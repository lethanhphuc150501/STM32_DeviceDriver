
CH5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003824  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b64  08003b64  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b64  08003b64  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b64  08003b64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b68  08003b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  08003bdc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003bdc  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006091  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014ac  00000000  00000000  0002612a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  000275d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d0  00000000  00000000  00027c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017975  00000000  00000000  00028200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000717a  00000000  00000000  0003fb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b8d  00000000  00000000  00046cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ca87c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002440  00000000  00000000  000ca8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000ccd0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003f  00000000  00000000  000ccd30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003918 	.word	0x08003918

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003918 	.word	0x08003918

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t uTimes = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 facb 	bl	80006f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f831 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f89b 	bl	8000298 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000162:	f000 f86f 	bl	8000244 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Enables retarget of standard I/O over the USART2 */
  RetargetInit(&huart2);
 8000166:	4811      	ldr	r0, [pc, #68]	; (80001ac <main+0x60>)
 8000168:	f000 f90a 	bl	8000380 <RetargetInit>
  /* USER CODE END 2 */

  printf("How many times to print the message?: ");
 800016c:	4810      	ldr	r0, [pc, #64]	; (80001b0 <main+0x64>)
 800016e:	f001 fcb7 	bl	8001ae0 <iprintf>
  scanf("%hhu", &uTimes);
 8000172:	1dbb      	adds	r3, r7, #6
 8000174:	4619      	mov	r1, r3
 8000176:	480f      	ldr	r0, [pc, #60]	; (80001b4 <main+0x68>)
 8000178:	f001 fd40 	bl	8001bfc <iscanf>
  printf("\r\n");
 800017c:	480e      	ldr	r0, [pc, #56]	; (80001b8 <main+0x6c>)
 800017e:	f001 fd35 	bl	8001bec <puts>

  for(uint8_t i = 0; i < uTimes;) {
 8000182:	2300      	movs	r3, #0
 8000184:	71fb      	strb	r3, [r7, #7]
 8000186:	e00b      	b.n	80001a0 <main+0x54>
	HAL_Delay(500);
 8000188:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800018c:	f000 fb12 	bl	80007b4 <HAL_Delay>
	printf("Hello, Nucleo: %u \r\n", ++i);
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	3301      	adds	r3, #1
 8000194:	71fb      	strb	r3, [r7, #7]
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	4619      	mov	r1, r3
 800019a:	4808      	ldr	r0, [pc, #32]	; (80001bc <main+0x70>)
 800019c:	f001 fca0 	bl	8001ae0 <iprintf>
  for(uint8_t i = 0; i < uTimes;) {
 80001a0:	79bb      	ldrb	r3, [r7, #6]
 80001a2:	79fa      	ldrb	r2, [r7, #7]
 80001a4:	429a      	cmp	r2, r3
 80001a6:	d3ef      	bcc.n	8000188 <main+0x3c>
  }
  while(1);
 80001a8:	e7fe      	b.n	80001a8 <main+0x5c>
 80001aa:	bf00      	nop
 80001ac:	2000008c 	.word	0x2000008c
 80001b0:	08003930 	.word	0x08003930
 80001b4:	08003958 	.word	0x08003958
 80001b8:	08003960 	.word	0x08003960
 80001bc:	08003964 	.word	0x08003964

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b090      	sub	sp, #64	; 0x40
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0318 	add.w	r3, r7, #24
 80001ca:	2228      	movs	r2, #40	; 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f001 fc7e 	bl	8001ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e2:	2302      	movs	r3, #2
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e6:	2301      	movs	r3, #1
 80001e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ea:	2310      	movs	r3, #16
 80001ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ee:	2302      	movs	r3, #2
 80001f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001f2:	2300      	movs	r3, #0
 80001f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001f6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fc:	f107 0318 	add.w	r3, r7, #24
 8000200:	4618      	mov	r0, r3
 8000202:	f000 fdc7 	bl	8000d94 <HAL_RCC_OscConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800020c:	f000 f8b2 	bl	8000374 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000210:	230f      	movs	r3, #15
 8000212:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000214:	2302      	movs	r3, #2
 8000216:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	2102      	movs	r1, #2
 800022a:	4618      	mov	r0, r3
 800022c:	f001 f834 	bl	8001298 <HAL_RCC_ClockConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000236:	f000 f89d 	bl	8000374 <Error_Handler>
  }
}
 800023a:	bf00      	nop
 800023c:	3740      	adds	r7, #64	; 0x40
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <MX_USART2_UART_Init+0x4c>)
 800024a:	4a12      	ldr	r2, [pc, #72]	; (8000294 <MX_USART2_UART_Init+0x50>)
 800024c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800024e:	4b10      	ldr	r3, [pc, #64]	; (8000290 <MX_USART2_UART_Init+0x4c>)
 8000250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000254:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <MX_USART2_UART_Init+0x4c>)
 8000258:	2200      	movs	r2, #0
 800025a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <MX_USART2_UART_Init+0x4c>)
 800025e:	2200      	movs	r2, #0
 8000260:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000262:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <MX_USART2_UART_Init+0x4c>)
 8000264:	2200      	movs	r2, #0
 8000266:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000268:	4b09      	ldr	r3, [pc, #36]	; (8000290 <MX_USART2_UART_Init+0x4c>)
 800026a:	220c      	movs	r2, #12
 800026c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <MX_USART2_UART_Init+0x4c>)
 8000270:	2200      	movs	r2, #0
 8000272:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <MX_USART2_UART_Init+0x4c>)
 8000276:	2200      	movs	r2, #0
 8000278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800027a:	4805      	ldr	r0, [pc, #20]	; (8000290 <MX_USART2_UART_Init+0x4c>)
 800027c:	f001 f9a4 	bl	80015c8 <HAL_UART_Init>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000286:	f000 f875 	bl	8000374 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	2000008c 	.word	0x2000008c
 8000294:	40004400 	.word	0x40004400

08000298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029e:	f107 0310 	add.w	r3, r7, #16
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ac:	4b2d      	ldr	r3, [pc, #180]	; (8000364 <MX_GPIO_Init+0xcc>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a2c      	ldr	r2, [pc, #176]	; (8000364 <MX_GPIO_Init+0xcc>)
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b2a      	ldr	r3, [pc, #168]	; (8000364 <MX_GPIO_Init+0xcc>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0310 	and.w	r3, r3, #16
 80002c0:	60fb      	str	r3, [r7, #12]
 80002c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c4:	4b27      	ldr	r3, [pc, #156]	; (8000364 <MX_GPIO_Init+0xcc>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a26      	ldr	r2, [pc, #152]	; (8000364 <MX_GPIO_Init+0xcc>)
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b24      	ldr	r3, [pc, #144]	; (8000364 <MX_GPIO_Init+0xcc>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0320 	and.w	r3, r3, #32
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002dc:	4b21      	ldr	r3, [pc, #132]	; (8000364 <MX_GPIO_Init+0xcc>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a20      	ldr	r2, [pc, #128]	; (8000364 <MX_GPIO_Init+0xcc>)
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <MX_GPIO_Init+0xcc>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0304 	and.w	r3, r3, #4
 80002f0:	607b      	str	r3, [r7, #4]
 80002f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <MX_GPIO_Init+0xcc>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a1a      	ldr	r2, [pc, #104]	; (8000364 <MX_GPIO_Init+0xcc>)
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <MX_GPIO_Init+0xcc>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0308 	and.w	r3, r3, #8
 8000308:	603b      	str	r3, [r7, #0]
 800030a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2120      	movs	r1, #32
 8000310:	4815      	ldr	r0, [pc, #84]	; (8000368 <MX_GPIO_Init+0xd0>)
 8000312:	f000 fd05 	bl	8000d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <MX_GPIO_Init+0xd4>)
 800031e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	2300      	movs	r3, #0
 8000322:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000324:	f107 0310 	add.w	r3, r7, #16
 8000328:	4619      	mov	r1, r3
 800032a:	4811      	ldr	r0, [pc, #68]	; (8000370 <MX_GPIO_Init+0xd8>)
 800032c:	f000 fb74 	bl	8000a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000330:	2320      	movs	r3, #32
 8000332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000334:	2301      	movs	r3, #1
 8000336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000338:	2300      	movs	r3, #0
 800033a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033c:	2302      	movs	r3, #2
 800033e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000340:	f107 0310 	add.w	r3, r7, #16
 8000344:	4619      	mov	r1, r3
 8000346:	4808      	ldr	r0, [pc, #32]	; (8000368 <MX_GPIO_Init+0xd0>)
 8000348:	f000 fb66 	bl	8000a18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800034c:	2200      	movs	r2, #0
 800034e:	2100      	movs	r1, #0
 8000350:	2028      	movs	r0, #40	; 0x28
 8000352:	f000 fb2a 	bl	80009aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000356:	2028      	movs	r0, #40	; 0x28
 8000358:	f000 fb43 	bl	80009e2 <HAL_NVIC_EnableIRQ>

}
 800035c:	bf00      	nop
 800035e:	3720      	adds	r7, #32
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40021000 	.word	0x40021000
 8000368:	40010800 	.word	0x40010800
 800036c:	10110000 	.word	0x10110000
 8000370:	40011000 	.word	0x40011000

08000374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000378:	b672      	cpsid	i
}
 800037a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800037c:	e7fe      	b.n	800037c <Error_Handler+0x8>
	...

08000380 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000388:	4a07      	ldr	r2, [pc, #28]	; (80003a8 <RetargetInit+0x28>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800038e:	4b07      	ldr	r3, [pc, #28]	; (80003ac <RetargetInit+0x2c>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	6898      	ldr	r0, [r3, #8]
 8000394:	2300      	movs	r3, #0
 8000396:	2202      	movs	r2, #2
 8000398:	2100      	movs	r1, #0
 800039a:	f001 fc47 	bl	8001c2c <setvbuf>
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	200000d0 	.word	0x200000d0
 80003ac:	2000000c 	.word	0x2000000c

080003b0 <_isatty>:

int _isatty(int fd) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	db04      	blt.n	80003c8 <_isatty+0x18>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	dc01      	bgt.n	80003c8 <_isatty+0x18>
    return 1;
 80003c4:	2301      	movs	r3, #1
 80003c6:	e005      	b.n	80003d4 <_isatty+0x24>

  errno = EBADF;
 80003c8:	f001 fb58 	bl	8001a7c <__errno>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2209      	movs	r2, #9
 80003d0:	601a      	str	r2, [r3, #0]
  return 0;
 80003d2:	2300      	movs	r3, #0
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <_write>:

int _write(int fd, char* ptr, int len) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d002      	beq.n	80003f4 <_write+0x18>
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	2b02      	cmp	r3, #2
 80003f2:	d111      	bne.n	8000418 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80003f4:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <_write+0x54>)
 80003f6:	6818      	ldr	r0, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	b29a      	uxth	r2, r3
 80003fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000400:	68b9      	ldr	r1, [r7, #8]
 8000402:	f001 f92e 	bl	8001662 <HAL_UART_Transmit>
 8000406:	4603      	mov	r3, r0
 8000408:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800040a:	7dfb      	ldrb	r3, [r7, #23]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d101      	bne.n	8000414 <_write+0x38>
      return len;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	e008      	b.n	8000426 <_write+0x4a>
    else
      return EIO;
 8000414:	2305      	movs	r3, #5
 8000416:	e006      	b.n	8000426 <_write+0x4a>
  }
  errno = EBADF;
 8000418:	f001 fb30 	bl	8001a7c <__errno>
 800041c:	4603      	mov	r3, r0
 800041e:	2209      	movs	r2, #9
 8000420:	601a      	str	r2, [r3, #0]
  return -1;
 8000422:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000426:	4618      	mov	r0, r3
 8000428:	3718      	adds	r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	200000d0 	.word	0x200000d0

08000434 <_close>:

int _close(int fd) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2b00      	cmp	r3, #0
 8000440:	db04      	blt.n	800044c <_close+0x18>
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2b02      	cmp	r3, #2
 8000446:	dc01      	bgt.n	800044c <_close+0x18>
    return 0;
 8000448:	2300      	movs	r3, #0
 800044a:	e006      	b.n	800045a <_close+0x26>

  errno = EBADF;
 800044c:	f001 fb16 	bl	8001a7c <__errno>
 8000450:	4603      	mov	r3, r0
 8000452:	2209      	movs	r2, #9
 8000454:	601a      	str	r2, [r3, #0]
  return -1;
 8000456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800045a:	4618      	mov	r0, r3
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <_read>:

int _read(int fd, char* ptr, int len) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d110      	bne.n	8000498 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <_read+0x4c>)
 8000478:	6818      	ldr	r0, [r3, #0]
 800047a:	f04f 33ff 	mov.w	r3, #4294967295
 800047e:	2201      	movs	r2, #1
 8000480:	68b9      	ldr	r1, [r7, #8]
 8000482:	f001 f980 	bl	8001786 <HAL_UART_Receive>
 8000486:	4603      	mov	r3, r0
 8000488:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800048a:	7dfb      	ldrb	r3, [r7, #23]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d101      	bne.n	8000494 <_read+0x30>
      return 1;
 8000490:	2301      	movs	r3, #1
 8000492:	e008      	b.n	80004a6 <_read+0x42>
    else
      return EIO;
 8000494:	2305      	movs	r3, #5
 8000496:	e006      	b.n	80004a6 <_read+0x42>
  }
  errno = EBADF;
 8000498:	f001 faf0 	bl	8001a7c <__errno>
 800049c:	4603      	mov	r3, r0
 800049e:	2209      	movs	r2, #9
 80004a0:	601a      	str	r2, [r3, #0]
  return -1;
 80004a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3718      	adds	r7, #24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	200000d0 	.word	0x200000d0

080004b4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	db08      	blt.n	80004d6 <_fstat+0x22>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b02      	cmp	r3, #2
 80004c8:	dc05      	bgt.n	80004d6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004d0:	605a      	str	r2, [r3, #4]
    return 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	e005      	b.n	80004e2 <_fstat+0x2e>
  }

  errno = EBADF;
 80004d6:	f001 fad1 	bl	8001a7c <__errno>
 80004da:	4603      	mov	r3, r0
 80004dc:	2209      	movs	r2, #9
 80004de:	601a      	str	r2, [r3, #0]
  return 0;
 80004e0:	2300      	movs	r3, #0
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_MspInit+0x5c>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a14      	ldr	r2, [pc, #80]	; (8000548 <HAL_MspInit+0x5c>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_MspInit+0x5c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <HAL_MspInit+0x5c>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_MspInit+0x60>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <HAL_MspInit+0x60>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000
 800054c:	40010000 	.word	0x40010000

08000550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a15      	ldr	r2, [pc, #84]	; (80005c0 <HAL_UART_MspInit+0x70>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d123      	bne.n	80005b8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <HAL_UART_MspInit+0x74>)
 8000572:	69db      	ldr	r3, [r3, #28]
 8000574:	4a13      	ldr	r2, [pc, #76]	; (80005c4 <HAL_UART_MspInit+0x74>)
 8000576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057a:	61d3      	str	r3, [r2, #28]
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <HAL_UART_MspInit+0x74>)
 800057e:	69db      	ldr	r3, [r3, #28]
 8000580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <HAL_UART_MspInit+0x74>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <HAL_UART_MspInit+0x74>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <HAL_UART_MspInit+0x74>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005a0:	230c      	movs	r3, #12
 80005a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <HAL_UART_MspInit+0x78>)
 80005b4:	f000 fa30 	bl	8000a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005b8:	bf00      	nop
 80005ba:	3720      	adds	r7, #32
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40004400 	.word	0x40004400
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40010800 	.word	0x40010800

080005cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <NMI_Handler+0x4>

080005d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <HardFault_Handler+0x4>

080005d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <MemManage_Handler+0x4>

080005de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <BusFault_Handler+0x4>

080005e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <UsageFault_Handler+0x4>

080005ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr

080005f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr

08000602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000612:	f000 f8b3 	bl	800077c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}

0800061a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800061e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000622:	f000 fb95 	bl	8000d50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000634:	4a14      	ldr	r2, [pc, #80]	; (8000688 <_sbrk+0x5c>)
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <_sbrk+0x60>)
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <_sbrk+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d102      	bne.n	800064e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <_sbrk+0x64>)
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <_sbrk+0x68>)
 800064c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	429a      	cmp	r2, r3
 800065a:	d207      	bcs.n	800066c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800065c:	f001 fa0e 	bl	8001a7c <__errno>
 8000660:	4603      	mov	r3, r0
 8000662:	220c      	movs	r2, #12
 8000664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	e009      	b.n	8000680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <_sbrk+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <_sbrk+0x64>)
 800067c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20005000 	.word	0x20005000
 800068c:	00000400 	.word	0x00000400
 8000690:	200000d4 	.word	0x200000d4
 8000694:	200000f0 	.word	0x200000f0

08000698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	; (80006e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ca:	f7ff ffe5 	bl	8000698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ce:	f001 f9db 	bl	8001a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff fd3b 	bl	800014c <main>
  bx lr
 80006d6:	4770      	bx	lr
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006e0:	08003b6c 	.word	0x08003b6c
  ldr r2, =_sbss
 80006e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006e8:	200000ec 	.word	0x200000ec

080006ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_2_IRQHandler>
	...

080006f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_Init+0x28>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_Init+0x28>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f947 	bl	8000994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000706:	2000      	movs	r0, #0
 8000708:	f000 f808 	bl	800071c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070c:	f7ff feee 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40022000 	.word	0x40022000

0800071c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_InitTick+0x54>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_InitTick+0x58>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000732:	fbb3 f3f1 	udiv	r3, r3, r1
 8000736:	fbb2 f3f3 	udiv	r3, r2, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f95f 	bl	80009fe <HAL_SYSTICK_Config>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e00e      	b.n	8000768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d80a      	bhi.n	8000766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000750:	2200      	movs	r2, #0
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	f04f 30ff 	mov.w	r0, #4294967295
 8000758:	f000 f927 	bl	80009aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800075c:	4a06      	ldr	r2, [pc, #24]	; (8000778 <HAL_InitTick+0x5c>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	e000      	b.n	8000768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	20000008 	.word	0x20000008
 8000778:	20000004 	.word	0x20000004

0800077c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_IncTick+0x1c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_IncTick+0x20>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a03      	ldr	r2, [pc, #12]	; (800079c <HAL_IncTick+0x20>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	20000008 	.word	0x20000008
 800079c:	200000d8 	.word	0x200000d8

080007a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return uwTick;
 80007a4:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <HAL_GetTick+0x10>)
 80007a6:	681b      	ldr	r3, [r3, #0]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	200000d8 	.word	0x200000d8

080007b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007bc:	f7ff fff0 	bl	80007a0 <HAL_GetTick>
 80007c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007cc:	d005      	beq.n	80007da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_Delay+0x44>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4413      	add	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007da:	bf00      	nop
 80007dc:	f7ff ffe0 	bl	80007a0 <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d8f7      	bhi.n	80007dc <HAL_Delay+0x28>
  {
  }
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000008 	.word	0x20000008

080007fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60d3      	str	r3, [r2, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <__NVIC_GetPriorityGrouping+0x18>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	f003 0307 	and.w	r3, r3, #7
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	db0b      	blt.n	800088a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f003 021f 	and.w	r2, r3, #31
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <__NVIC_EnableIRQ+0x34>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	095b      	lsrs	r3, r3, #5
 8000880:	2001      	movs	r0, #1
 8000882:	fa00 f202 	lsl.w	r2, r0, r2
 8000886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	; (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	; (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f1c3 0307 	rsb	r3, r3, #7
 8000906:	2b04      	cmp	r3, #4
 8000908:	bf28      	it	cs
 800090a:	2304      	movcs	r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3304      	adds	r3, #4
 8000912:	2b06      	cmp	r3, #6
 8000914:	d902      	bls.n	800091c <NVIC_EncodePriority+0x30>
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3b03      	subs	r3, #3
 800091a:	e000      	b.n	800091e <NVIC_EncodePriority+0x32>
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	f04f 32ff 	mov.w	r2, #4294967295
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000934:	f04f 31ff 	mov.w	r1, #4294967295
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43d9      	mvns	r1, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	4313      	orrs	r3, r2
         );
}
 8000946:	4618      	mov	r0, r3
 8000948:	3724      	adds	r7, #36	; 0x24
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000960:	d301      	bcc.n	8000966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000962:	2301      	movs	r3, #1
 8000964:	e00f      	b.n	8000986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <SysTick_Config+0x40>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096e:	210f      	movs	r1, #15
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	f7ff ff90 	bl	8000898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SysTick_Config+0x40>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <SysTick_Config+0x40>)
 8000980:	2207      	movs	r2, #7
 8000982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	e000e010 	.word	0xe000e010

08000994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ff2d 	bl	80007fc <__NVIC_SetPriorityGrouping>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4603      	mov	r3, r0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009bc:	f7ff ff42 	bl	8000844 <__NVIC_GetPriorityGrouping>
 80009c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	6978      	ldr	r0, [r7, #20]
 80009c8:	f7ff ff90 	bl	80008ec <NVIC_EncodePriority>
 80009cc:	4602      	mov	r2, r0
 80009ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff5f 	bl	8000898 <__NVIC_SetPriority>
}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff35 	bl	8000860 <__NVIC_EnableIRQ>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ffa2 	bl	8000950 <SysTick_Config>
 8000a0c:	4603      	mov	r3, r0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b08b      	sub	sp, #44	; 0x2c
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2a:	e169      	b.n	8000d00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	69fa      	ldr	r2, [r7, #28]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	f040 8158 	bne.w	8000cfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	4a9a      	ldr	r2, [pc, #616]	; (8000cb8 <HAL_GPIO_Init+0x2a0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d05e      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a54:	4a98      	ldr	r2, [pc, #608]	; (8000cb8 <HAL_GPIO_Init+0x2a0>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d875      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a5a:	4a98      	ldr	r2, [pc, #608]	; (8000cbc <HAL_GPIO_Init+0x2a4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d058      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a60:	4a96      	ldr	r2, [pc, #600]	; (8000cbc <HAL_GPIO_Init+0x2a4>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d86f      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a66:	4a96      	ldr	r2, [pc, #600]	; (8000cc0 <HAL_GPIO_Init+0x2a8>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d052      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a6c:	4a94      	ldr	r2, [pc, #592]	; (8000cc0 <HAL_GPIO_Init+0x2a8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d869      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a72:	4a94      	ldr	r2, [pc, #592]	; (8000cc4 <HAL_GPIO_Init+0x2ac>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d04c      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a78:	4a92      	ldr	r2, [pc, #584]	; (8000cc4 <HAL_GPIO_Init+0x2ac>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d863      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a7e:	4a92      	ldr	r2, [pc, #584]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d046      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a84:	4a90      	ldr	r2, [pc, #576]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d85d      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a8a:	2b12      	cmp	r3, #18
 8000a8c:	d82a      	bhi.n	8000ae4 <HAL_GPIO_Init+0xcc>
 8000a8e:	2b12      	cmp	r3, #18
 8000a90:	d859      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a92:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <HAL_GPIO_Init+0x80>)
 8000a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a98:	08000b13 	.word	0x08000b13
 8000a9c:	08000aed 	.word	0x08000aed
 8000aa0:	08000aff 	.word	0x08000aff
 8000aa4:	08000b41 	.word	0x08000b41
 8000aa8:	08000b47 	.word	0x08000b47
 8000aac:	08000b47 	.word	0x08000b47
 8000ab0:	08000b47 	.word	0x08000b47
 8000ab4:	08000b47 	.word	0x08000b47
 8000ab8:	08000b47 	.word	0x08000b47
 8000abc:	08000b47 	.word	0x08000b47
 8000ac0:	08000b47 	.word	0x08000b47
 8000ac4:	08000b47 	.word	0x08000b47
 8000ac8:	08000b47 	.word	0x08000b47
 8000acc:	08000b47 	.word	0x08000b47
 8000ad0:	08000b47 	.word	0x08000b47
 8000ad4:	08000b47 	.word	0x08000b47
 8000ad8:	08000b47 	.word	0x08000b47
 8000adc:	08000af5 	.word	0x08000af5
 8000ae0:	08000b09 	.word	0x08000b09
 8000ae4:	4a79      	ldr	r2, [pc, #484]	; (8000ccc <HAL_GPIO_Init+0x2b4>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d013      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aea:	e02c      	b.n	8000b46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	623b      	str	r3, [r7, #32]
          break;
 8000af2:	e029      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	3304      	adds	r3, #4
 8000afa:	623b      	str	r3, [r7, #32]
          break;
 8000afc:	e024      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	3308      	adds	r3, #8
 8000b04:	623b      	str	r3, [r7, #32]
          break;
 8000b06:	e01f      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	330c      	adds	r3, #12
 8000b0e:	623b      	str	r3, [r7, #32]
          break;
 8000b10:	e01a      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	623b      	str	r3, [r7, #32]
          break;
 8000b1e:	e013      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d105      	bne.n	8000b34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	611a      	str	r2, [r3, #16]
          break;
 8000b32:	e009      	b.n	8000b48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b34:	2308      	movs	r3, #8
 8000b36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	615a      	str	r2, [r3, #20]
          break;
 8000b3e:	e003      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
          break;
 8000b44:	e000      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          break;
 8000b46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	2bff      	cmp	r3, #255	; 0xff
 8000b4c:	d801      	bhi.n	8000b52 <HAL_GPIO_Init+0x13a>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	e001      	b.n	8000b56 <HAL_GPIO_Init+0x13e>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3304      	adds	r3, #4
 8000b56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	2bff      	cmp	r3, #255	; 0xff
 8000b5c:	d802      	bhi.n	8000b64 <HAL_GPIO_Init+0x14c>
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	e002      	b.n	8000b6a <HAL_GPIO_Init+0x152>
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	3b08      	subs	r3, #8
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	210f      	movs	r1, #15
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	fa01 f303 	lsl.w	r3, r1, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	6a39      	ldr	r1, [r7, #32]
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	431a      	orrs	r2, r3
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 80b1 	beq.w	8000cfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b98:	4b4d      	ldr	r3, [pc, #308]	; (8000cd0 <HAL_GPIO_Init+0x2b8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a4c      	ldr	r2, [pc, #304]	; (8000cd0 <HAL_GPIO_Init+0x2b8>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b4a      	ldr	r3, [pc, #296]	; (8000cd0 <HAL_GPIO_Init+0x2b8>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bb0:	4a48      	ldr	r2, [pc, #288]	; (8000cd4 <HAL_GPIO_Init+0x2bc>)
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a40      	ldr	r2, [pc, #256]	; (8000cd8 <HAL_GPIO_Init+0x2c0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d013      	beq.n	8000c04 <HAL_GPIO_Init+0x1ec>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a3f      	ldr	r2, [pc, #252]	; (8000cdc <HAL_GPIO_Init+0x2c4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d00d      	beq.n	8000c00 <HAL_GPIO_Init+0x1e8>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a3e      	ldr	r2, [pc, #248]	; (8000ce0 <HAL_GPIO_Init+0x2c8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d007      	beq.n	8000bfc <HAL_GPIO_Init+0x1e4>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a3d      	ldr	r2, [pc, #244]	; (8000ce4 <HAL_GPIO_Init+0x2cc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d101      	bne.n	8000bf8 <HAL_GPIO_Init+0x1e0>
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e006      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	e004      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000c04:	2300      	movs	r3, #0
 8000c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c08:	f002 0203 	and.w	r2, r2, #3
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	4093      	lsls	r3, r2
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c16:	492f      	ldr	r1, [pc, #188]	; (8000cd4 <HAL_GPIO_Init+0x2bc>)
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d006      	beq.n	8000c3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c30:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	492c      	ldr	r1, [pc, #176]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	600b      	str	r3, [r1, #0]
 8000c3c:	e006      	b.n	8000c4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	4928      	ldr	r1, [pc, #160]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c48:	4013      	ands	r3, r2
 8000c4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d006      	beq.n	8000c66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c58:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	4922      	ldr	r1, [pc, #136]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	604b      	str	r3, [r1, #4]
 8000c64:	e006      	b.n	8000c74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	491e      	ldr	r1, [pc, #120]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d006      	beq.n	8000c8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	4918      	ldr	r1, [pc, #96]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	608b      	str	r3, [r1, #8]
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	4914      	ldr	r1, [pc, #80]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d021      	beq.n	8000cec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	60cb      	str	r3, [r1, #12]
 8000cb4:	e021      	b.n	8000cfa <HAL_GPIO_Init+0x2e2>
 8000cb6:	bf00      	nop
 8000cb8:	10320000 	.word	0x10320000
 8000cbc:	10310000 	.word	0x10310000
 8000cc0:	10220000 	.word	0x10220000
 8000cc4:	10210000 	.word	0x10210000
 8000cc8:	10120000 	.word	0x10120000
 8000ccc:	10110000 	.word	0x10110000
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010000 	.word	0x40010000
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	40010c00 	.word	0x40010c00
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40011400 	.word	0x40011400
 8000ce8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_GPIO_Init+0x304>)
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	4909      	ldr	r1, [pc, #36]	; (8000d1c <HAL_GPIO_Init+0x304>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f47f ae8e 	bne.w	8000a2c <HAL_GPIO_Init+0x14>
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	372c      	adds	r7, #44	; 0x2c
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	40010400 	.word	0x40010400

08000d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d30:	787b      	ldrb	r3, [r7, #1]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d36:	887a      	ldrh	r2, [r7, #2]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d3c:	e003      	b.n	8000d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	041a      	lsls	r2, r3, #16
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	611a      	str	r2, [r3, #16]
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d5c:	695a      	ldr	r2, [r3, #20]
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	4013      	ands	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d006      	beq.n	8000d74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f806 	bl	8000d80 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40010400 	.word	0x40010400

08000d80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e272      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 8087 	beq.w	8000ec2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000db4:	4b92      	ldr	r3, [pc, #584]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 030c 	and.w	r3, r3, #12
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	d00c      	beq.n	8000dda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dc0:	4b8f      	ldr	r3, [pc, #572]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 030c 	and.w	r3, r3, #12
 8000dc8:	2b08      	cmp	r3, #8
 8000dca:	d112      	bne.n	8000df2 <HAL_RCC_OscConfig+0x5e>
 8000dcc:	4b8c      	ldr	r3, [pc, #560]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd8:	d10b      	bne.n	8000df2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dda:	4b89      	ldr	r3, [pc, #548]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d06c      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x12c>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d168      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e24c      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dfa:	d106      	bne.n	8000e0a <HAL_RCC_OscConfig+0x76>
 8000dfc:	4b80      	ldr	r3, [pc, #512]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a7f      	ldr	r2, [pc, #508]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	e02e      	b.n	8000e68 <HAL_RCC_OscConfig+0xd4>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x98>
 8000e12:	4b7b      	ldr	r3, [pc, #492]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a7a      	ldr	r2, [pc, #488]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b78      	ldr	r3, [pc, #480]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a77      	ldr	r2, [pc, #476]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e01d      	b.n	8000e68 <HAL_RCC_OscConfig+0xd4>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e34:	d10c      	bne.n	8000e50 <HAL_RCC_OscConfig+0xbc>
 8000e36:	4b72      	ldr	r3, [pc, #456]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a71      	ldr	r2, [pc, #452]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	4b6f      	ldr	r3, [pc, #444]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a6e      	ldr	r2, [pc, #440]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e00b      	b.n	8000e68 <HAL_RCC_OscConfig+0xd4>
 8000e50:	4b6b      	ldr	r3, [pc, #428]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a6a      	ldr	r2, [pc, #424]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b68      	ldr	r3, [pc, #416]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a67      	ldr	r2, [pc, #412]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d013      	beq.n	8000e98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fc96 	bl	80007a0 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e78:	f7ff fc92 	bl	80007a0 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b64      	cmp	r3, #100	; 0x64
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e200      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8a:	4b5d      	ldr	r3, [pc, #372]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f0      	beq.n	8000e78 <HAL_RCC_OscConfig+0xe4>
 8000e96:	e014      	b.n	8000ec2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e98:	f7ff fc82 	bl	80007a0 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fc7e 	bl	80007a0 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b64      	cmp	r3, #100	; 0x64
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e1ec      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb2:	4b53      	ldr	r3, [pc, #332]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f0      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x10c>
 8000ebe:	e000      	b.n	8000ec2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d063      	beq.n	8000f96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ece:	4b4c      	ldr	r3, [pc, #304]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 030c 	and.w	r3, r3, #12
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00b      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eda:	4b49      	ldr	r3, [pc, #292]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d11c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x18c>
 8000ee6:	4b46      	ldr	r3, [pc, #280]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d116      	bne.n	8000f20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef2:	4b43      	ldr	r3, [pc, #268]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d005      	beq.n	8000f0a <HAL_RCC_OscConfig+0x176>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d001      	beq.n	8000f0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e1c0      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0a:	4b3d      	ldr	r3, [pc, #244]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4939      	ldr	r1, [pc, #228]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1e:	e03a      	b.n	8000f96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d020      	beq.n	8000f6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f28:	4b36      	ldr	r3, [pc, #216]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fc37 	bl	80007a0 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f36:	f7ff fc33 	bl	80007a0 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e1a1      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f48:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0f0      	beq.n	8000f36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f54:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	4927      	ldr	r1, [pc, #156]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	600b      	str	r3, [r1, #0]
 8000f68:	e015      	b.n	8000f96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff fc16 	bl	80007a0 <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f78:	f7ff fc12 	bl	80007a0 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e180      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f0      	bne.n	8000f78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d03a      	beq.n	8001018 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d019      	beq.n	8000fde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <HAL_RCC_OscConfig+0x274>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb0:	f7ff fbf6 	bl	80007a0 <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb8:	f7ff fbf2 	bl	80007a0 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e160      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0f0      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f000 fad8 	bl	800158c <RCC_Delay>
 8000fdc:	e01c      	b.n	8001018 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_RCC_OscConfig+0x274>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe4:	f7ff fbdc 	bl	80007a0 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fea:	e00f      	b.n	800100c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fec:	f7ff fbd8 	bl	80007a0 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d908      	bls.n	800100c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e146      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	42420000 	.word	0x42420000
 8001008:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800100c:	4b92      	ldr	r3, [pc, #584]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1e9      	bne.n	8000fec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 80a6 	beq.w	8001172 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800102a:	4b8b      	ldr	r3, [pc, #556]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10d      	bne.n	8001052 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b88      	ldr	r3, [pc, #544]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a87      	ldr	r2, [pc, #540]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b85      	ldr	r3, [pc, #532]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800104e:	2301      	movs	r3, #1
 8001050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001052:	4b82      	ldr	r3, [pc, #520]	; (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105a:	2b00      	cmp	r3, #0
 800105c:	d118      	bne.n	8001090 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800105e:	4b7f      	ldr	r3, [pc, #508]	; (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a7e      	ldr	r2, [pc, #504]	; (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800106a:	f7ff fb99 	bl	80007a0 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001072:	f7ff fb95 	bl	80007a0 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b64      	cmp	r3, #100	; 0x64
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e103      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001084:	4b75      	ldr	r3, [pc, #468]	; (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d106      	bne.n	80010a6 <HAL_RCC_OscConfig+0x312>
 8001098:	4b6f      	ldr	r3, [pc, #444]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4a6e      	ldr	r2, [pc, #440]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6213      	str	r3, [r2, #32]
 80010a4:	e02d      	b.n	8001102 <HAL_RCC_OscConfig+0x36e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x334>
 80010ae:	4b6a      	ldr	r3, [pc, #424]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	4a69      	ldr	r2, [pc, #420]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	6213      	str	r3, [r2, #32]
 80010ba:	4b67      	ldr	r3, [pc, #412]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4a66      	ldr	r2, [pc, #408]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	f023 0304 	bic.w	r3, r3, #4
 80010c4:	6213      	str	r3, [r2, #32]
 80010c6:	e01c      	b.n	8001102 <HAL_RCC_OscConfig+0x36e>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d10c      	bne.n	80010ea <HAL_RCC_OscConfig+0x356>
 80010d0:	4b61      	ldr	r3, [pc, #388]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	4a60      	ldr	r2, [pc, #384]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6213      	str	r3, [r2, #32]
 80010dc:	4b5e      	ldr	r3, [pc, #376]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	4a5d      	ldr	r2, [pc, #372]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6213      	str	r3, [r2, #32]
 80010e8:	e00b      	b.n	8001102 <HAL_RCC_OscConfig+0x36e>
 80010ea:	4b5b      	ldr	r3, [pc, #364]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	4a5a      	ldr	r2, [pc, #360]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	6213      	str	r3, [r2, #32]
 80010f6:	4b58      	ldr	r3, [pc, #352]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4a57      	ldr	r2, [pc, #348]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	f023 0304 	bic.w	r3, r3, #4
 8001100:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d015      	beq.n	8001136 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fb49 	bl	80007a0 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001110:	e00a      	b.n	8001128 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001112:	f7ff fb45 	bl	80007a0 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001120:	4293      	cmp	r3, r2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e0b1      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001128:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0ee      	beq.n	8001112 <HAL_RCC_OscConfig+0x37e>
 8001134:	e014      	b.n	8001160 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001136:	f7ff fb33 	bl	80007a0 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113c:	e00a      	b.n	8001154 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113e:	f7ff fb2f 	bl	80007a0 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	f241 3288 	movw	r2, #5000	; 0x1388
 800114c:	4293      	cmp	r3, r2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e09b      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001154:	4b40      	ldr	r3, [pc, #256]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1ee      	bne.n	800113e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d105      	bne.n	8001172 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001166:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a3b      	ldr	r2, [pc, #236]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001170:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 8087 	beq.w	800128a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800117c:	4b36      	ldr	r3, [pc, #216]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	2b08      	cmp	r3, #8
 8001186:	d061      	beq.n	800124c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d146      	bne.n	800121e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001190:	4b33      	ldr	r3, [pc, #204]	; (8001260 <HAL_RCC_OscConfig+0x4cc>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fb03 	bl	80007a0 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119e:	f7ff faff 	bl	80007a0 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e06d      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f0      	bne.n	800119e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c4:	d108      	bne.n	80011d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	4921      	ldr	r1, [pc, #132]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a19      	ldr	r1, [r3, #32]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	430b      	orrs	r3, r1
 80011ea:	491b      	ldr	r1, [pc, #108]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_RCC_OscConfig+0x4cc>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f6:	f7ff fad3 	bl	80007a0 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fe:	f7ff facf 	bl	80007a0 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e03d      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x46a>
 800121c:	e035      	b.n	800128a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_RCC_OscConfig+0x4cc>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fabc 	bl	80007a0 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800122c:	f7ff fab8 	bl	80007a0 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e026      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0x498>
 800124a:	e01e      	b.n	800128a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d107      	bne.n	8001264 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e019      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
 8001258:	40021000 	.word	0x40021000
 800125c:	40007000 	.word	0x40007000
 8001260:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_RCC_OscConfig+0x500>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	429a      	cmp	r2, r3
 8001276:	d106      	bne.n	8001286 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001282:	429a      	cmp	r2, r3
 8001284:	d001      	beq.n	800128a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0d0      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012ac:	4b6a      	ldr	r3, [pc, #424]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d910      	bls.n	80012dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ba:	4b67      	ldr	r3, [pc, #412]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 0207 	bic.w	r2, r3, #7
 80012c2:	4965      	ldr	r1, [pc, #404]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ca:	4b63      	ldr	r3, [pc, #396]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0b8      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d020      	beq.n	800132a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f4:	4b59      	ldr	r3, [pc, #356]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a58      	ldr	r2, [pc, #352]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800130c:	4b53      	ldr	r3, [pc, #332]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4a52      	ldr	r2, [pc, #328]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001316:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001318:	4b50      	ldr	r3, [pc, #320]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	494d      	ldr	r1, [pc, #308]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d040      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b47      	ldr	r3, [pc, #284]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d115      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e07f      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d107      	bne.n	8001366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001356:	4b41      	ldr	r3, [pc, #260]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d109      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e073      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e06b      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001376:	4b39      	ldr	r3, [pc, #228]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f023 0203 	bic.w	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4936      	ldr	r1, [pc, #216]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001388:	f7ff fa0a 	bl	80007a0 <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001390:	f7ff fa06 	bl	80007a0 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	; 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e053      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	4b2d      	ldr	r3, [pc, #180]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 020c 	and.w	r2, r3, #12
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d1eb      	bne.n	8001390 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d210      	bcs.n	80013e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 0207 	bic.w	r2, r3, #7
 80013ce:	4922      	ldr	r1, [pc, #136]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e032      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4916      	ldr	r1, [pc, #88]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d009      	beq.n	8001426 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	490e      	ldr	r1, [pc, #56]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001426:	f000 f821 	bl	800146c <HAL_RCC_GetSysClockFreq>
 800142a:	4602      	mov	r2, r0
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	490a      	ldr	r1, [pc, #40]	; (8001460 <HAL_RCC_ClockConfig+0x1c8>)
 8001438:	5ccb      	ldrb	r3, [r1, r3]
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	4a09      	ldr	r2, [pc, #36]	; (8001464 <HAL_RCC_ClockConfig+0x1cc>)
 8001440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_RCC_ClockConfig+0x1d0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f968 	bl	800071c <HAL_InitTick>

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000
 800145c:	40021000 	.word	0x40021000
 8001460:	08003998 	.word	0x08003998
 8001464:	20000000 	.word	0x20000000
 8001468:	20000004 	.word	0x20000004

0800146c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800146c:	b490      	push	{r4, r7}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001472:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_RCC_GetSysClockFreq+0xac>)
 8001474:	1d3c      	adds	r4, r7, #4
 8001476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800147c:	f240 2301 	movw	r3, #513	; 0x201
 8001480:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d002      	beq.n	80014ac <HAL_RCC_GetSysClockFreq+0x40>
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d003      	beq.n	80014b2 <HAL_RCC_GetSysClockFreq+0x46>
 80014aa:	e02b      	b.n	8001504 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014ae:	623b      	str	r3, [r7, #32]
      break;
 80014b0:	e02b      	b.n	800150a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	0c9b      	lsrs	r3, r3, #18
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3328      	adds	r3, #40	; 0x28
 80014bc:	443b      	add	r3, r7
 80014be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d012      	beq.n	80014f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_RCC_GetSysClockFreq+0xb0>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	0c5b      	lsrs	r3, r3, #17
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	3328      	adds	r3, #40	; 0x28
 80014da:	443b      	add	r3, r7
 80014dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014e6:	fb03 f202 	mul.w	r2, r3, r2
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
 80014f2:	e004      	b.n	80014fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	623b      	str	r3, [r7, #32]
      break;
 8001502:	e002      	b.n	800150a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001506:	623b      	str	r3, [r7, #32]
      break;
 8001508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800150a:	6a3b      	ldr	r3, [r7, #32]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bc90      	pop	{r4, r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	0800397c 	.word	0x0800397c
 800151c:	40021000 	.word	0x40021000
 8001520:	007a1200 	.word	0x007a1200
 8001524:	003d0900 	.word	0x003d0900

08001528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <HAL_RCC_GetHCLKFreq+0x10>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000000 	.word	0x20000000

0800153c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001540:	f7ff fff2 	bl	8001528 <HAL_RCC_GetHCLKFreq>
 8001544:	4602      	mov	r2, r0
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	0a1b      	lsrs	r3, r3, #8
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	4903      	ldr	r1, [pc, #12]	; (8001560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000
 8001560:	080039a8 	.word	0x080039a8

08001564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001568:	f7ff ffde 	bl	8001528 <HAL_RCC_GetHCLKFreq>
 800156c:	4602      	mov	r2, r0
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	0adb      	lsrs	r3, r3, #11
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	4903      	ldr	r1, [pc, #12]	; (8001588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800157a:	5ccb      	ldrb	r3, [r1, r3]
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001580:	4618      	mov	r0, r3
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	080039a8 	.word	0x080039a8

0800158c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <RCC_Delay+0x34>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <RCC_Delay+0x38>)
 800159a:	fba2 2303 	umull	r2, r3, r2, r3
 800159e:	0a5b      	lsrs	r3, r3, #9
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015a8:	bf00      	nop
  }
  while (Delay --);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1e5a      	subs	r2, r3, #1
 80015ae:	60fa      	str	r2, [r7, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f9      	bne.n	80015a8 <RCC_Delay+0x1c>
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000000 	.word	0x20000000
 80015c4:	10624dd3 	.word	0x10624dd3

080015c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e03f      	b.n	800165a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d106      	bne.n	80015f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7fe ffae 	bl	8000550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2224      	movs	r2, #36	; 0x24
 80015f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800160a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f9a7 	bl	8001960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2220      	movs	r2, #32
 800164c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2220      	movs	r2, #32
 8001654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b08a      	sub	sp, #40	; 0x28
 8001666:	af02      	add	r7, sp, #8
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	4613      	mov	r3, r2
 8001670:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b20      	cmp	r3, #32
 8001680:	d17c      	bne.n	800177c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <HAL_UART_Transmit+0x2c>
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e075      	b.n	800177e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_UART_Transmit+0x3e>
 800169c:	2302      	movs	r3, #2
 800169e:	e06e      	b.n	800177e <HAL_UART_Transmit+0x11c>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2221      	movs	r2, #33	; 0x21
 80016b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80016b6:	f7ff f873 	bl	80007a0 <HAL_GetTick>
 80016ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	88fa      	ldrh	r2, [r7, #6]
 80016c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	88fa      	ldrh	r2, [r7, #6]
 80016c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d0:	d108      	bne.n	80016e4 <HAL_UART_Transmit+0x82>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d104      	bne.n	80016e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	e003      	b.n	80016ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80016f4:	e02a      	b.n	800174c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2200      	movs	r2, #0
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f000 f8e2 	bl	80018ca <UART_WaitOnFlagUntilTimeout>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e036      	b.n	800177e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10b      	bne.n	800172e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001724:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	3302      	adds	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	e007      	b.n	800173e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	781a      	ldrb	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	3301      	adds	r3, #1
 800173c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001742:	b29b      	uxth	r3, r3
 8001744:	3b01      	subs	r3, #1
 8001746:	b29a      	uxth	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001750:	b29b      	uxth	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1cf      	bne.n	80016f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2200      	movs	r2, #0
 800175e:	2140      	movs	r1, #64	; 0x40
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f8b2 	bl	80018ca <UART_WaitOnFlagUntilTimeout>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e006      	b.n	800177e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2220      	movs	r2, #32
 8001774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	e000      	b.n	800177e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800177c:	2302      	movs	r3, #2
  }
}
 800177e:	4618      	mov	r0, r3
 8001780:	3720      	adds	r7, #32
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b08a      	sub	sp, #40	; 0x28
 800178a:	af02      	add	r7, sp, #8
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	4613      	mov	r3, r2
 8001794:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b20      	cmp	r3, #32
 80017a4:	f040 808c 	bne.w	80018c0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <HAL_UART_Receive+0x2e>
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e084      	b.n	80018c2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_UART_Receive+0x40>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e07d      	b.n	80018c2 <HAL_UART_Receive+0x13c>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2222      	movs	r2, #34	; 0x22
 80017d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80017e2:	f7fe ffdd 	bl	80007a0 <HAL_GetTick>
 80017e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	88fa      	ldrh	r2, [r7, #6]
 80017ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	88fa      	ldrh	r2, [r7, #6]
 80017f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017fc:	d108      	bne.n	8001810 <HAL_UART_Receive+0x8a>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d104      	bne.n	8001810 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	e003      	b.n	8001818 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001820:	e043      	b.n	80018aa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2200      	movs	r2, #0
 800182a:	2120      	movs	r1, #32
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f000 f84c 	bl	80018ca <UART_WaitOnFlagUntilTimeout>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e042      	b.n	80018c2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10c      	bne.n	800185c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	b29b      	uxth	r3, r3
 800184a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800184e:	b29a      	uxth	r2, r3
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	3302      	adds	r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	e01f      	b.n	800189c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001864:	d007      	beq.n	8001876 <HAL_UART_Receive+0xf0>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10a      	bne.n	8001884 <HAL_UART_Receive+0xfe>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e008      	b.n	8001896 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001890:	b2da      	uxtb	r2, r3
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3301      	adds	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1b6      	bne.n	8001822 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2220      	movs	r2, #32
 80018b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	e000      	b.n	80018c2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80018c0:	2302      	movs	r3, #2
  }
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	4613      	mov	r3, r2
 80018d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018da:	e02c      	b.n	8001936 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e2:	d028      	beq.n	8001936 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d007      	beq.n	80018fa <UART_WaitOnFlagUntilTimeout+0x30>
 80018ea:	f7fe ff59 	bl	80007a0 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d21d      	bcs.n	8001936 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001908:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2220      	movs	r2, #32
 800191e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2220      	movs	r2, #32
 8001926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e00f      	b.n	8001956 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4013      	ands	r3, r2
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	429a      	cmp	r2, r3
 8001944:	bf0c      	ite	eq
 8001946:	2301      	moveq	r3, #1
 8001948:	2300      	movne	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	429a      	cmp	r2, r3
 8001952:	d0c3      	beq.n	80018dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	4313      	orrs	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800199a:	f023 030c 	bic.w	r3, r3, #12
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	430b      	orrs	r3, r1
 80019a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699a      	ldr	r2, [r3, #24]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a2c      	ldr	r2, [pc, #176]	; (8001a74 <UART_SetConfig+0x114>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d103      	bne.n	80019d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80019c8:	f7ff fdcc 	bl	8001564 <HAL_RCC_GetPCLK2Freq>
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	e002      	b.n	80019d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80019d0:	f7ff fdb4 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 80019d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	009a      	lsls	r2, r3, #2
 80019e0:	441a      	add	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ec:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <UART_SetConfig+0x118>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	0119      	lsls	r1, r3, #4
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	009a      	lsls	r2, r3, #2
 8001a00:	441a      	add	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <UART_SetConfig+0x118>)
 8001a0e:	fba3 0302 	umull	r0, r3, r3, r2
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2064      	movs	r0, #100	; 0x64
 8001a16:	fb00 f303 	mul.w	r3, r0, r3
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	3332      	adds	r3, #50	; 0x32
 8001a20:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <UART_SetConfig+0x118>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a2c:	4419      	add	r1, r3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	009a      	lsls	r2, r3, #2
 8001a38:	441a      	add	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <UART_SetConfig+0x118>)
 8001a46:	fba3 0302 	umull	r0, r3, r3, r2
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	2064      	movs	r0, #100	; 0x64
 8001a4e:	fb00 f303 	mul.w	r3, r0, r3
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	3332      	adds	r3, #50	; 0x32
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <UART_SetConfig+0x118>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	f003 020f 	and.w	r2, r3, #15
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	440a      	add	r2, r1
 8001a6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40013800 	.word	0x40013800
 8001a78:	51eb851f 	.word	0x51eb851f

08001a7c <__errno>:
 8001a7c:	4b01      	ldr	r3, [pc, #4]	; (8001a84 <__errno+0x8>)
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	2000000c 	.word	0x2000000c

08001a88 <__libc_init_array>:
 8001a88:	b570      	push	{r4, r5, r6, lr}
 8001a8a:	2600      	movs	r6, #0
 8001a8c:	4d0c      	ldr	r5, [pc, #48]	; (8001ac0 <__libc_init_array+0x38>)
 8001a8e:	4c0d      	ldr	r4, [pc, #52]	; (8001ac4 <__libc_init_array+0x3c>)
 8001a90:	1b64      	subs	r4, r4, r5
 8001a92:	10a4      	asrs	r4, r4, #2
 8001a94:	42a6      	cmp	r6, r4
 8001a96:	d109      	bne.n	8001aac <__libc_init_array+0x24>
 8001a98:	f001 ff3e 	bl	8003918 <_init>
 8001a9c:	2600      	movs	r6, #0
 8001a9e:	4d0a      	ldr	r5, [pc, #40]	; (8001ac8 <__libc_init_array+0x40>)
 8001aa0:	4c0a      	ldr	r4, [pc, #40]	; (8001acc <__libc_init_array+0x44>)
 8001aa2:	1b64      	subs	r4, r4, r5
 8001aa4:	10a4      	asrs	r4, r4, #2
 8001aa6:	42a6      	cmp	r6, r4
 8001aa8:	d105      	bne.n	8001ab6 <__libc_init_array+0x2e>
 8001aaa:	bd70      	pop	{r4, r5, r6, pc}
 8001aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ab0:	4798      	blx	r3
 8001ab2:	3601      	adds	r6, #1
 8001ab4:	e7ee      	b.n	8001a94 <__libc_init_array+0xc>
 8001ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aba:	4798      	blx	r3
 8001abc:	3601      	adds	r6, #1
 8001abe:	e7f2      	b.n	8001aa6 <__libc_init_array+0x1e>
 8001ac0:	08003b64 	.word	0x08003b64
 8001ac4:	08003b64 	.word	0x08003b64
 8001ac8:	08003b64 	.word	0x08003b64
 8001acc:	08003b68 	.word	0x08003b68

08001ad0 <memset>:
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4402      	add	r2, r0
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d100      	bne.n	8001ada <memset+0xa>
 8001ad8:	4770      	bx	lr
 8001ada:	f803 1b01 	strb.w	r1, [r3], #1
 8001ade:	e7f9      	b.n	8001ad4 <memset+0x4>

08001ae0 <iprintf>:
 8001ae0:	b40f      	push	{r0, r1, r2, r3}
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <iprintf+0x2c>)
 8001ae4:	b513      	push	{r0, r1, r4, lr}
 8001ae6:	681c      	ldr	r4, [r3, #0]
 8001ae8:	b124      	cbz	r4, 8001af4 <iprintf+0x14>
 8001aea:	69a3      	ldr	r3, [r4, #24]
 8001aec:	b913      	cbnz	r3, 8001af4 <iprintf+0x14>
 8001aee:	4620      	mov	r0, r4
 8001af0:	f000 fb4a 	bl	8002188 <__sinit>
 8001af4:	ab05      	add	r3, sp, #20
 8001af6:	4620      	mov	r0, r4
 8001af8:	9a04      	ldr	r2, [sp, #16]
 8001afa:	68a1      	ldr	r1, [r4, #8]
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	f000 fd71 	bl	80025e4 <_vfiprintf_r>
 8001b02:	b002      	add	sp, #8
 8001b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b08:	b004      	add	sp, #16
 8001b0a:	4770      	bx	lr
 8001b0c:	2000000c 	.word	0x2000000c

08001b10 <_puts_r>:
 8001b10:	b570      	push	{r4, r5, r6, lr}
 8001b12:	460e      	mov	r6, r1
 8001b14:	4605      	mov	r5, r0
 8001b16:	b118      	cbz	r0, 8001b20 <_puts_r+0x10>
 8001b18:	6983      	ldr	r3, [r0, #24]
 8001b1a:	b90b      	cbnz	r3, 8001b20 <_puts_r+0x10>
 8001b1c:	f000 fb34 	bl	8002188 <__sinit>
 8001b20:	69ab      	ldr	r3, [r5, #24]
 8001b22:	68ac      	ldr	r4, [r5, #8]
 8001b24:	b913      	cbnz	r3, 8001b2c <_puts_r+0x1c>
 8001b26:	4628      	mov	r0, r5
 8001b28:	f000 fb2e 	bl	8002188 <__sinit>
 8001b2c:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <_puts_r+0xd0>)
 8001b2e:	429c      	cmp	r4, r3
 8001b30:	d120      	bne.n	8001b74 <_puts_r+0x64>
 8001b32:	686c      	ldr	r4, [r5, #4]
 8001b34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b36:	07db      	lsls	r3, r3, #31
 8001b38:	d405      	bmi.n	8001b46 <_puts_r+0x36>
 8001b3a:	89a3      	ldrh	r3, [r4, #12]
 8001b3c:	0598      	lsls	r0, r3, #22
 8001b3e:	d402      	bmi.n	8001b46 <_puts_r+0x36>
 8001b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b42:	f000 fbdc 	bl	80022fe <__retarget_lock_acquire_recursive>
 8001b46:	89a3      	ldrh	r3, [r4, #12]
 8001b48:	0719      	lsls	r1, r3, #28
 8001b4a:	d51d      	bpl.n	8001b88 <_puts_r+0x78>
 8001b4c:	6923      	ldr	r3, [r4, #16]
 8001b4e:	b1db      	cbz	r3, 8001b88 <_puts_r+0x78>
 8001b50:	3e01      	subs	r6, #1
 8001b52:	68a3      	ldr	r3, [r4, #8]
 8001b54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	60a3      	str	r3, [r4, #8]
 8001b5c:	bb39      	cbnz	r1, 8001bae <_puts_r+0x9e>
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	da38      	bge.n	8001bd4 <_puts_r+0xc4>
 8001b62:	4622      	mov	r2, r4
 8001b64:	210a      	movs	r1, #10
 8001b66:	4628      	mov	r0, r5
 8001b68:	f000 f926 	bl	8001db8 <__swbuf_r>
 8001b6c:	3001      	adds	r0, #1
 8001b6e:	d011      	beq.n	8001b94 <_puts_r+0x84>
 8001b70:	250a      	movs	r5, #10
 8001b72:	e011      	b.n	8001b98 <_puts_r+0x88>
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <_puts_r+0xd4>)
 8001b76:	429c      	cmp	r4, r3
 8001b78:	d101      	bne.n	8001b7e <_puts_r+0x6e>
 8001b7a:	68ac      	ldr	r4, [r5, #8]
 8001b7c:	e7da      	b.n	8001b34 <_puts_r+0x24>
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <_puts_r+0xd8>)
 8001b80:	429c      	cmp	r4, r3
 8001b82:	bf08      	it	eq
 8001b84:	68ec      	ldreq	r4, [r5, #12]
 8001b86:	e7d5      	b.n	8001b34 <_puts_r+0x24>
 8001b88:	4621      	mov	r1, r4
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	f000 f966 	bl	8001e5c <__swsetup_r>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d0dd      	beq.n	8001b50 <_puts_r+0x40>
 8001b94:	f04f 35ff 	mov.w	r5, #4294967295
 8001b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b9a:	07da      	lsls	r2, r3, #31
 8001b9c:	d405      	bmi.n	8001baa <_puts_r+0x9a>
 8001b9e:	89a3      	ldrh	r3, [r4, #12]
 8001ba0:	059b      	lsls	r3, r3, #22
 8001ba2:	d402      	bmi.n	8001baa <_puts_r+0x9a>
 8001ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ba6:	f000 fbab 	bl	8002300 <__retarget_lock_release_recursive>
 8001baa:	4628      	mov	r0, r5
 8001bac:	bd70      	pop	{r4, r5, r6, pc}
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	da04      	bge.n	8001bbc <_puts_r+0xac>
 8001bb2:	69a2      	ldr	r2, [r4, #24]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	dc06      	bgt.n	8001bc6 <_puts_r+0xb6>
 8001bb8:	290a      	cmp	r1, #10
 8001bba:	d004      	beq.n	8001bc6 <_puts_r+0xb6>
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	6022      	str	r2, [r4, #0]
 8001bc2:	7019      	strb	r1, [r3, #0]
 8001bc4:	e7c5      	b.n	8001b52 <_puts_r+0x42>
 8001bc6:	4622      	mov	r2, r4
 8001bc8:	4628      	mov	r0, r5
 8001bca:	f000 f8f5 	bl	8001db8 <__swbuf_r>
 8001bce:	3001      	adds	r0, #1
 8001bd0:	d1bf      	bne.n	8001b52 <_puts_r+0x42>
 8001bd2:	e7df      	b.n	8001b94 <_puts_r+0x84>
 8001bd4:	250a      	movs	r5, #10
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	6022      	str	r2, [r4, #0]
 8001bdc:	701d      	strb	r5, [r3, #0]
 8001bde:	e7db      	b.n	8001b98 <_puts_r+0x88>
 8001be0:	080039d4 	.word	0x080039d4
 8001be4:	080039f4 	.word	0x080039f4
 8001be8:	080039b4 	.word	0x080039b4

08001bec <puts>:
 8001bec:	4b02      	ldr	r3, [pc, #8]	; (8001bf8 <puts+0xc>)
 8001bee:	4601      	mov	r1, r0
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	f7ff bf8d 	b.w	8001b10 <_puts_r>
 8001bf6:	bf00      	nop
 8001bf8:	2000000c 	.word	0x2000000c

08001bfc <iscanf>:
 8001bfc:	b40f      	push	{r0, r1, r2, r3}
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <iscanf+0x2c>)
 8001c00:	b513      	push	{r0, r1, r4, lr}
 8001c02:	681c      	ldr	r4, [r3, #0]
 8001c04:	b124      	cbz	r4, 8001c10 <iscanf+0x14>
 8001c06:	69a3      	ldr	r3, [r4, #24]
 8001c08:	b913      	cbnz	r3, 8001c10 <iscanf+0x14>
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f000 fabc 	bl	8002188 <__sinit>
 8001c10:	ab05      	add	r3, sp, #20
 8001c12:	4620      	mov	r0, r4
 8001c14:	9a04      	ldr	r2, [sp, #16]
 8001c16:	6861      	ldr	r1, [r4, #4]
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	f001 f94f 	bl	8002ebc <_vfiscanf_r>
 8001c1e:	b002      	add	sp, #8
 8001c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c24:	b004      	add	sp, #16
 8001c26:	4770      	bx	lr
 8001c28:	2000000c 	.word	0x2000000c

08001c2c <setvbuf>:
 8001c2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001c30:	461d      	mov	r5, r3
 8001c32:	4b5d      	ldr	r3, [pc, #372]	; (8001da8 <setvbuf+0x17c>)
 8001c34:	4604      	mov	r4, r0
 8001c36:	681f      	ldr	r7, [r3, #0]
 8001c38:	460e      	mov	r6, r1
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	b127      	cbz	r7, 8001c48 <setvbuf+0x1c>
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	b913      	cbnz	r3, 8001c48 <setvbuf+0x1c>
 8001c42:	4638      	mov	r0, r7
 8001c44:	f000 faa0 	bl	8002188 <__sinit>
 8001c48:	4b58      	ldr	r3, [pc, #352]	; (8001dac <setvbuf+0x180>)
 8001c4a:	429c      	cmp	r4, r3
 8001c4c:	d167      	bne.n	8001d1e <setvbuf+0xf2>
 8001c4e:	687c      	ldr	r4, [r7, #4]
 8001c50:	f1b8 0f02 	cmp.w	r8, #2
 8001c54:	d006      	beq.n	8001c64 <setvbuf+0x38>
 8001c56:	f1b8 0f01 	cmp.w	r8, #1
 8001c5a:	f200 809f 	bhi.w	8001d9c <setvbuf+0x170>
 8001c5e:	2d00      	cmp	r5, #0
 8001c60:	f2c0 809c 	blt.w	8001d9c <setvbuf+0x170>
 8001c64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c66:	07db      	lsls	r3, r3, #31
 8001c68:	d405      	bmi.n	8001c76 <setvbuf+0x4a>
 8001c6a:	89a3      	ldrh	r3, [r4, #12]
 8001c6c:	0598      	lsls	r0, r3, #22
 8001c6e:	d402      	bmi.n	8001c76 <setvbuf+0x4a>
 8001c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c72:	f000 fb44 	bl	80022fe <__retarget_lock_acquire_recursive>
 8001c76:	4621      	mov	r1, r4
 8001c78:	4638      	mov	r0, r7
 8001c7a:	f000 f9df 	bl	800203c <_fflush_r>
 8001c7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c80:	b141      	cbz	r1, 8001c94 <setvbuf+0x68>
 8001c82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c86:	4299      	cmp	r1, r3
 8001c88:	d002      	beq.n	8001c90 <setvbuf+0x64>
 8001c8a:	4638      	mov	r0, r7
 8001c8c:	f000 fba6 	bl	80023dc <_free_r>
 8001c90:	2300      	movs	r3, #0
 8001c92:	6363      	str	r3, [r4, #52]	; 0x34
 8001c94:	2300      	movs	r3, #0
 8001c96:	61a3      	str	r3, [r4, #24]
 8001c98:	6063      	str	r3, [r4, #4]
 8001c9a:	89a3      	ldrh	r3, [r4, #12]
 8001c9c:	0619      	lsls	r1, r3, #24
 8001c9e:	d503      	bpl.n	8001ca8 <setvbuf+0x7c>
 8001ca0:	4638      	mov	r0, r7
 8001ca2:	6921      	ldr	r1, [r4, #16]
 8001ca4:	f000 fb9a 	bl	80023dc <_free_r>
 8001ca8:	89a3      	ldrh	r3, [r4, #12]
 8001caa:	f1b8 0f02 	cmp.w	r8, #2
 8001cae:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001cb2:	f023 0303 	bic.w	r3, r3, #3
 8001cb6:	81a3      	strh	r3, [r4, #12]
 8001cb8:	d06c      	beq.n	8001d94 <setvbuf+0x168>
 8001cba:	ab01      	add	r3, sp, #4
 8001cbc:	466a      	mov	r2, sp
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	4638      	mov	r0, r7
 8001cc2:	f000 fb1e 	bl	8002302 <__swhatbuf_r>
 8001cc6:	89a3      	ldrh	r3, [r4, #12]
 8001cc8:	4318      	orrs	r0, r3
 8001cca:	81a0      	strh	r0, [r4, #12]
 8001ccc:	2d00      	cmp	r5, #0
 8001cce:	d130      	bne.n	8001d32 <setvbuf+0x106>
 8001cd0:	9d00      	ldr	r5, [sp, #0]
 8001cd2:	4628      	mov	r0, r5
 8001cd4:	f000 fb7a 	bl	80023cc <malloc>
 8001cd8:	4606      	mov	r6, r0
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	d155      	bne.n	8001d8a <setvbuf+0x15e>
 8001cde:	f8dd 9000 	ldr.w	r9, [sp]
 8001ce2:	45a9      	cmp	r9, r5
 8001ce4:	d14a      	bne.n	8001d7c <setvbuf+0x150>
 8001ce6:	f04f 35ff 	mov.w	r5, #4294967295
 8001cea:	2200      	movs	r2, #0
 8001cec:	60a2      	str	r2, [r4, #8]
 8001cee:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001cf2:	6022      	str	r2, [r4, #0]
 8001cf4:	6122      	str	r2, [r4, #16]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cfc:	6162      	str	r2, [r4, #20]
 8001cfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	07d2      	lsls	r2, r2, #31
 8001d06:	81a3      	strh	r3, [r4, #12]
 8001d08:	d405      	bmi.n	8001d16 <setvbuf+0xea>
 8001d0a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001d0e:	d102      	bne.n	8001d16 <setvbuf+0xea>
 8001d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d12:	f000 faf5 	bl	8002300 <__retarget_lock_release_recursive>
 8001d16:	4628      	mov	r0, r5
 8001d18:	b003      	add	sp, #12
 8001d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d1e:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <setvbuf+0x184>)
 8001d20:	429c      	cmp	r4, r3
 8001d22:	d101      	bne.n	8001d28 <setvbuf+0xfc>
 8001d24:	68bc      	ldr	r4, [r7, #8]
 8001d26:	e793      	b.n	8001c50 <setvbuf+0x24>
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <setvbuf+0x188>)
 8001d2a:	429c      	cmp	r4, r3
 8001d2c:	bf08      	it	eq
 8001d2e:	68fc      	ldreq	r4, [r7, #12]
 8001d30:	e78e      	b.n	8001c50 <setvbuf+0x24>
 8001d32:	2e00      	cmp	r6, #0
 8001d34:	d0cd      	beq.n	8001cd2 <setvbuf+0xa6>
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	b913      	cbnz	r3, 8001d40 <setvbuf+0x114>
 8001d3a:	4638      	mov	r0, r7
 8001d3c:	f000 fa24 	bl	8002188 <__sinit>
 8001d40:	f1b8 0f01 	cmp.w	r8, #1
 8001d44:	bf08      	it	eq
 8001d46:	89a3      	ldrheq	r3, [r4, #12]
 8001d48:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001d4c:	bf04      	itt	eq
 8001d4e:	f043 0301 	orreq.w	r3, r3, #1
 8001d52:	81a3      	strheq	r3, [r4, #12]
 8001d54:	89a2      	ldrh	r2, [r4, #12]
 8001d56:	6026      	str	r6, [r4, #0]
 8001d58:	f012 0308 	ands.w	r3, r2, #8
 8001d5c:	d01c      	beq.n	8001d98 <setvbuf+0x16c>
 8001d5e:	07d3      	lsls	r3, r2, #31
 8001d60:	bf41      	itttt	mi
 8001d62:	2300      	movmi	r3, #0
 8001d64:	426d      	negmi	r5, r5
 8001d66:	60a3      	strmi	r3, [r4, #8]
 8001d68:	61a5      	strmi	r5, [r4, #24]
 8001d6a:	bf58      	it	pl
 8001d6c:	60a5      	strpl	r5, [r4, #8]
 8001d6e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001d70:	f015 0501 	ands.w	r5, r5, #1
 8001d74:	d115      	bne.n	8001da2 <setvbuf+0x176>
 8001d76:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001d7a:	e7c8      	b.n	8001d0e <setvbuf+0xe2>
 8001d7c:	4648      	mov	r0, r9
 8001d7e:	f000 fb25 	bl	80023cc <malloc>
 8001d82:	4606      	mov	r6, r0
 8001d84:	2800      	cmp	r0, #0
 8001d86:	d0ae      	beq.n	8001ce6 <setvbuf+0xba>
 8001d88:	464d      	mov	r5, r9
 8001d8a:	89a3      	ldrh	r3, [r4, #12]
 8001d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d90:	81a3      	strh	r3, [r4, #12]
 8001d92:	e7d0      	b.n	8001d36 <setvbuf+0x10a>
 8001d94:	2500      	movs	r5, #0
 8001d96:	e7a8      	b.n	8001cea <setvbuf+0xbe>
 8001d98:	60a3      	str	r3, [r4, #8]
 8001d9a:	e7e8      	b.n	8001d6e <setvbuf+0x142>
 8001d9c:	f04f 35ff 	mov.w	r5, #4294967295
 8001da0:	e7b9      	b.n	8001d16 <setvbuf+0xea>
 8001da2:	2500      	movs	r5, #0
 8001da4:	e7b7      	b.n	8001d16 <setvbuf+0xea>
 8001da6:	bf00      	nop
 8001da8:	2000000c 	.word	0x2000000c
 8001dac:	080039d4 	.word	0x080039d4
 8001db0:	080039f4 	.word	0x080039f4
 8001db4:	080039b4 	.word	0x080039b4

08001db8 <__swbuf_r>:
 8001db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dba:	460e      	mov	r6, r1
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	4605      	mov	r5, r0
 8001dc0:	b118      	cbz	r0, 8001dca <__swbuf_r+0x12>
 8001dc2:	6983      	ldr	r3, [r0, #24]
 8001dc4:	b90b      	cbnz	r3, 8001dca <__swbuf_r+0x12>
 8001dc6:	f000 f9df 	bl	8002188 <__sinit>
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <__swbuf_r+0x98>)
 8001dcc:	429c      	cmp	r4, r3
 8001dce:	d12b      	bne.n	8001e28 <__swbuf_r+0x70>
 8001dd0:	686c      	ldr	r4, [r5, #4]
 8001dd2:	69a3      	ldr	r3, [r4, #24]
 8001dd4:	60a3      	str	r3, [r4, #8]
 8001dd6:	89a3      	ldrh	r3, [r4, #12]
 8001dd8:	071a      	lsls	r2, r3, #28
 8001dda:	d52f      	bpl.n	8001e3c <__swbuf_r+0x84>
 8001ddc:	6923      	ldr	r3, [r4, #16]
 8001dde:	b36b      	cbz	r3, 8001e3c <__swbuf_r+0x84>
 8001de0:	6923      	ldr	r3, [r4, #16]
 8001de2:	6820      	ldr	r0, [r4, #0]
 8001de4:	b2f6      	uxtb	r6, r6
 8001de6:	1ac0      	subs	r0, r0, r3
 8001de8:	6963      	ldr	r3, [r4, #20]
 8001dea:	4637      	mov	r7, r6
 8001dec:	4283      	cmp	r3, r0
 8001dee:	dc04      	bgt.n	8001dfa <__swbuf_r+0x42>
 8001df0:	4621      	mov	r1, r4
 8001df2:	4628      	mov	r0, r5
 8001df4:	f000 f922 	bl	800203c <_fflush_r>
 8001df8:	bb30      	cbnz	r0, 8001e48 <__swbuf_r+0x90>
 8001dfa:	68a3      	ldr	r3, [r4, #8]
 8001dfc:	3001      	adds	r0, #1
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	60a3      	str	r3, [r4, #8]
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	6022      	str	r2, [r4, #0]
 8001e08:	701e      	strb	r6, [r3, #0]
 8001e0a:	6963      	ldr	r3, [r4, #20]
 8001e0c:	4283      	cmp	r3, r0
 8001e0e:	d004      	beq.n	8001e1a <__swbuf_r+0x62>
 8001e10:	89a3      	ldrh	r3, [r4, #12]
 8001e12:	07db      	lsls	r3, r3, #31
 8001e14:	d506      	bpl.n	8001e24 <__swbuf_r+0x6c>
 8001e16:	2e0a      	cmp	r6, #10
 8001e18:	d104      	bne.n	8001e24 <__swbuf_r+0x6c>
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	4628      	mov	r0, r5
 8001e1e:	f000 f90d 	bl	800203c <_fflush_r>
 8001e22:	b988      	cbnz	r0, 8001e48 <__swbuf_r+0x90>
 8001e24:	4638      	mov	r0, r7
 8001e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <__swbuf_r+0x9c>)
 8001e2a:	429c      	cmp	r4, r3
 8001e2c:	d101      	bne.n	8001e32 <__swbuf_r+0x7a>
 8001e2e:	68ac      	ldr	r4, [r5, #8]
 8001e30:	e7cf      	b.n	8001dd2 <__swbuf_r+0x1a>
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <__swbuf_r+0xa0>)
 8001e34:	429c      	cmp	r4, r3
 8001e36:	bf08      	it	eq
 8001e38:	68ec      	ldreq	r4, [r5, #12]
 8001e3a:	e7ca      	b.n	8001dd2 <__swbuf_r+0x1a>
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	4628      	mov	r0, r5
 8001e40:	f000 f80c 	bl	8001e5c <__swsetup_r>
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d0cb      	beq.n	8001de0 <__swbuf_r+0x28>
 8001e48:	f04f 37ff 	mov.w	r7, #4294967295
 8001e4c:	e7ea      	b.n	8001e24 <__swbuf_r+0x6c>
 8001e4e:	bf00      	nop
 8001e50:	080039d4 	.word	0x080039d4
 8001e54:	080039f4 	.word	0x080039f4
 8001e58:	080039b4 	.word	0x080039b4

08001e5c <__swsetup_r>:
 8001e5c:	4b32      	ldr	r3, [pc, #200]	; (8001f28 <__swsetup_r+0xcc>)
 8001e5e:	b570      	push	{r4, r5, r6, lr}
 8001e60:	681d      	ldr	r5, [r3, #0]
 8001e62:	4606      	mov	r6, r0
 8001e64:	460c      	mov	r4, r1
 8001e66:	b125      	cbz	r5, 8001e72 <__swsetup_r+0x16>
 8001e68:	69ab      	ldr	r3, [r5, #24]
 8001e6a:	b913      	cbnz	r3, 8001e72 <__swsetup_r+0x16>
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	f000 f98b 	bl	8002188 <__sinit>
 8001e72:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <__swsetup_r+0xd0>)
 8001e74:	429c      	cmp	r4, r3
 8001e76:	d10f      	bne.n	8001e98 <__swsetup_r+0x3c>
 8001e78:	686c      	ldr	r4, [r5, #4]
 8001e7a:	89a3      	ldrh	r3, [r4, #12]
 8001e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e80:	0719      	lsls	r1, r3, #28
 8001e82:	d42c      	bmi.n	8001ede <__swsetup_r+0x82>
 8001e84:	06dd      	lsls	r5, r3, #27
 8001e86:	d411      	bmi.n	8001eac <__swsetup_r+0x50>
 8001e88:	2309      	movs	r3, #9
 8001e8a:	6033      	str	r3, [r6, #0]
 8001e8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	81a3      	strh	r3, [r4, #12]
 8001e96:	e03e      	b.n	8001f16 <__swsetup_r+0xba>
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <__swsetup_r+0xd4>)
 8001e9a:	429c      	cmp	r4, r3
 8001e9c:	d101      	bne.n	8001ea2 <__swsetup_r+0x46>
 8001e9e:	68ac      	ldr	r4, [r5, #8]
 8001ea0:	e7eb      	b.n	8001e7a <__swsetup_r+0x1e>
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <__swsetup_r+0xd8>)
 8001ea4:	429c      	cmp	r4, r3
 8001ea6:	bf08      	it	eq
 8001ea8:	68ec      	ldreq	r4, [r5, #12]
 8001eaa:	e7e6      	b.n	8001e7a <__swsetup_r+0x1e>
 8001eac:	0758      	lsls	r0, r3, #29
 8001eae:	d512      	bpl.n	8001ed6 <__swsetup_r+0x7a>
 8001eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001eb2:	b141      	cbz	r1, 8001ec6 <__swsetup_r+0x6a>
 8001eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001eb8:	4299      	cmp	r1, r3
 8001eba:	d002      	beq.n	8001ec2 <__swsetup_r+0x66>
 8001ebc:	4630      	mov	r0, r6
 8001ebe:	f000 fa8d 	bl	80023dc <_free_r>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	6363      	str	r3, [r4, #52]	; 0x34
 8001ec6:	89a3      	ldrh	r3, [r4, #12]
 8001ec8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ecc:	81a3      	strh	r3, [r4, #12]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	6063      	str	r3, [r4, #4]
 8001ed2:	6923      	ldr	r3, [r4, #16]
 8001ed4:	6023      	str	r3, [r4, #0]
 8001ed6:	89a3      	ldrh	r3, [r4, #12]
 8001ed8:	f043 0308 	orr.w	r3, r3, #8
 8001edc:	81a3      	strh	r3, [r4, #12]
 8001ede:	6923      	ldr	r3, [r4, #16]
 8001ee0:	b94b      	cbnz	r3, 8001ef6 <__swsetup_r+0x9a>
 8001ee2:	89a3      	ldrh	r3, [r4, #12]
 8001ee4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eec:	d003      	beq.n	8001ef6 <__swsetup_r+0x9a>
 8001eee:	4621      	mov	r1, r4
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	f000 fa2b 	bl	800234c <__smakebuf_r>
 8001ef6:	89a0      	ldrh	r0, [r4, #12]
 8001ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001efc:	f010 0301 	ands.w	r3, r0, #1
 8001f00:	d00a      	beq.n	8001f18 <__swsetup_r+0xbc>
 8001f02:	2300      	movs	r3, #0
 8001f04:	60a3      	str	r3, [r4, #8]
 8001f06:	6963      	ldr	r3, [r4, #20]
 8001f08:	425b      	negs	r3, r3
 8001f0a:	61a3      	str	r3, [r4, #24]
 8001f0c:	6923      	ldr	r3, [r4, #16]
 8001f0e:	b943      	cbnz	r3, 8001f22 <__swsetup_r+0xc6>
 8001f10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001f14:	d1ba      	bne.n	8001e8c <__swsetup_r+0x30>
 8001f16:	bd70      	pop	{r4, r5, r6, pc}
 8001f18:	0781      	lsls	r1, r0, #30
 8001f1a:	bf58      	it	pl
 8001f1c:	6963      	ldrpl	r3, [r4, #20]
 8001f1e:	60a3      	str	r3, [r4, #8]
 8001f20:	e7f4      	b.n	8001f0c <__swsetup_r+0xb0>
 8001f22:	2000      	movs	r0, #0
 8001f24:	e7f7      	b.n	8001f16 <__swsetup_r+0xba>
 8001f26:	bf00      	nop
 8001f28:	2000000c 	.word	0x2000000c
 8001f2c:	080039d4 	.word	0x080039d4
 8001f30:	080039f4 	.word	0x080039f4
 8001f34:	080039b4 	.word	0x080039b4

08001f38 <__sflush_r>:
 8001f38:	898a      	ldrh	r2, [r1, #12]
 8001f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3c:	4605      	mov	r5, r0
 8001f3e:	0710      	lsls	r0, r2, #28
 8001f40:	460c      	mov	r4, r1
 8001f42:	d457      	bmi.n	8001ff4 <__sflush_r+0xbc>
 8001f44:	684b      	ldr	r3, [r1, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	dc04      	bgt.n	8001f54 <__sflush_r+0x1c>
 8001f4a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	dc01      	bgt.n	8001f54 <__sflush_r+0x1c>
 8001f50:	2000      	movs	r0, #0
 8001f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f56:	2e00      	cmp	r6, #0
 8001f58:	d0fa      	beq.n	8001f50 <__sflush_r+0x18>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f60:	682f      	ldr	r7, [r5, #0]
 8001f62:	602b      	str	r3, [r5, #0]
 8001f64:	d032      	beq.n	8001fcc <__sflush_r+0x94>
 8001f66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f68:	89a3      	ldrh	r3, [r4, #12]
 8001f6a:	075a      	lsls	r2, r3, #29
 8001f6c:	d505      	bpl.n	8001f7a <__sflush_r+0x42>
 8001f6e:	6863      	ldr	r3, [r4, #4]
 8001f70:	1ac0      	subs	r0, r0, r3
 8001f72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f74:	b10b      	cbz	r3, 8001f7a <__sflush_r+0x42>
 8001f76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f78:	1ac0      	subs	r0, r0, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f80:	4628      	mov	r0, r5
 8001f82:	6a21      	ldr	r1, [r4, #32]
 8001f84:	47b0      	blx	r6
 8001f86:	1c43      	adds	r3, r0, #1
 8001f88:	89a3      	ldrh	r3, [r4, #12]
 8001f8a:	d106      	bne.n	8001f9a <__sflush_r+0x62>
 8001f8c:	6829      	ldr	r1, [r5, #0]
 8001f8e:	291d      	cmp	r1, #29
 8001f90:	d82c      	bhi.n	8001fec <__sflush_r+0xb4>
 8001f92:	4a29      	ldr	r2, [pc, #164]	; (8002038 <__sflush_r+0x100>)
 8001f94:	40ca      	lsrs	r2, r1
 8001f96:	07d6      	lsls	r6, r2, #31
 8001f98:	d528      	bpl.n	8001fec <__sflush_r+0xb4>
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	6062      	str	r2, [r4, #4]
 8001f9e:	6922      	ldr	r2, [r4, #16]
 8001fa0:	04d9      	lsls	r1, r3, #19
 8001fa2:	6022      	str	r2, [r4, #0]
 8001fa4:	d504      	bpl.n	8001fb0 <__sflush_r+0x78>
 8001fa6:	1c42      	adds	r2, r0, #1
 8001fa8:	d101      	bne.n	8001fae <__sflush_r+0x76>
 8001faa:	682b      	ldr	r3, [r5, #0]
 8001fac:	b903      	cbnz	r3, 8001fb0 <__sflush_r+0x78>
 8001fae:	6560      	str	r0, [r4, #84]	; 0x54
 8001fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fb2:	602f      	str	r7, [r5, #0]
 8001fb4:	2900      	cmp	r1, #0
 8001fb6:	d0cb      	beq.n	8001f50 <__sflush_r+0x18>
 8001fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fbc:	4299      	cmp	r1, r3
 8001fbe:	d002      	beq.n	8001fc6 <__sflush_r+0x8e>
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	f000 fa0b 	bl	80023dc <_free_r>
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	6360      	str	r0, [r4, #52]	; 0x34
 8001fca:	e7c2      	b.n	8001f52 <__sflush_r+0x1a>
 8001fcc:	6a21      	ldr	r1, [r4, #32]
 8001fce:	2301      	movs	r3, #1
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	47b0      	blx	r6
 8001fd4:	1c41      	adds	r1, r0, #1
 8001fd6:	d1c7      	bne.n	8001f68 <__sflush_r+0x30>
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0c4      	beq.n	8001f68 <__sflush_r+0x30>
 8001fde:	2b1d      	cmp	r3, #29
 8001fe0:	d001      	beq.n	8001fe6 <__sflush_r+0xae>
 8001fe2:	2b16      	cmp	r3, #22
 8001fe4:	d101      	bne.n	8001fea <__sflush_r+0xb2>
 8001fe6:	602f      	str	r7, [r5, #0]
 8001fe8:	e7b2      	b.n	8001f50 <__sflush_r+0x18>
 8001fea:	89a3      	ldrh	r3, [r4, #12]
 8001fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff0:	81a3      	strh	r3, [r4, #12]
 8001ff2:	e7ae      	b.n	8001f52 <__sflush_r+0x1a>
 8001ff4:	690f      	ldr	r7, [r1, #16]
 8001ff6:	2f00      	cmp	r7, #0
 8001ff8:	d0aa      	beq.n	8001f50 <__sflush_r+0x18>
 8001ffa:	0793      	lsls	r3, r2, #30
 8001ffc:	bf18      	it	ne
 8001ffe:	2300      	movne	r3, #0
 8002000:	680e      	ldr	r6, [r1, #0]
 8002002:	bf08      	it	eq
 8002004:	694b      	ldreq	r3, [r1, #20]
 8002006:	1bf6      	subs	r6, r6, r7
 8002008:	600f      	str	r7, [r1, #0]
 800200a:	608b      	str	r3, [r1, #8]
 800200c:	2e00      	cmp	r6, #0
 800200e:	dd9f      	ble.n	8001f50 <__sflush_r+0x18>
 8002010:	4633      	mov	r3, r6
 8002012:	463a      	mov	r2, r7
 8002014:	4628      	mov	r0, r5
 8002016:	6a21      	ldr	r1, [r4, #32]
 8002018:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800201c:	47e0      	blx	ip
 800201e:	2800      	cmp	r0, #0
 8002020:	dc06      	bgt.n	8002030 <__sflush_r+0xf8>
 8002022:	89a3      	ldrh	r3, [r4, #12]
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800202c:	81a3      	strh	r3, [r4, #12]
 800202e:	e790      	b.n	8001f52 <__sflush_r+0x1a>
 8002030:	4407      	add	r7, r0
 8002032:	1a36      	subs	r6, r6, r0
 8002034:	e7ea      	b.n	800200c <__sflush_r+0xd4>
 8002036:	bf00      	nop
 8002038:	20400001 	.word	0x20400001

0800203c <_fflush_r>:
 800203c:	b538      	push	{r3, r4, r5, lr}
 800203e:	690b      	ldr	r3, [r1, #16]
 8002040:	4605      	mov	r5, r0
 8002042:	460c      	mov	r4, r1
 8002044:	b913      	cbnz	r3, 800204c <_fflush_r+0x10>
 8002046:	2500      	movs	r5, #0
 8002048:	4628      	mov	r0, r5
 800204a:	bd38      	pop	{r3, r4, r5, pc}
 800204c:	b118      	cbz	r0, 8002056 <_fflush_r+0x1a>
 800204e:	6983      	ldr	r3, [r0, #24]
 8002050:	b90b      	cbnz	r3, 8002056 <_fflush_r+0x1a>
 8002052:	f000 f899 	bl	8002188 <__sinit>
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <_fflush_r+0x6c>)
 8002058:	429c      	cmp	r4, r3
 800205a:	d11b      	bne.n	8002094 <_fflush_r+0x58>
 800205c:	686c      	ldr	r4, [r5, #4]
 800205e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0ef      	beq.n	8002046 <_fflush_r+0xa>
 8002066:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002068:	07d0      	lsls	r0, r2, #31
 800206a:	d404      	bmi.n	8002076 <_fflush_r+0x3a>
 800206c:	0599      	lsls	r1, r3, #22
 800206e:	d402      	bmi.n	8002076 <_fflush_r+0x3a>
 8002070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002072:	f000 f944 	bl	80022fe <__retarget_lock_acquire_recursive>
 8002076:	4628      	mov	r0, r5
 8002078:	4621      	mov	r1, r4
 800207a:	f7ff ff5d 	bl	8001f38 <__sflush_r>
 800207e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002080:	4605      	mov	r5, r0
 8002082:	07da      	lsls	r2, r3, #31
 8002084:	d4e0      	bmi.n	8002048 <_fflush_r+0xc>
 8002086:	89a3      	ldrh	r3, [r4, #12]
 8002088:	059b      	lsls	r3, r3, #22
 800208a:	d4dd      	bmi.n	8002048 <_fflush_r+0xc>
 800208c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800208e:	f000 f937 	bl	8002300 <__retarget_lock_release_recursive>
 8002092:	e7d9      	b.n	8002048 <_fflush_r+0xc>
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <_fflush_r+0x70>)
 8002096:	429c      	cmp	r4, r3
 8002098:	d101      	bne.n	800209e <_fflush_r+0x62>
 800209a:	68ac      	ldr	r4, [r5, #8]
 800209c:	e7df      	b.n	800205e <_fflush_r+0x22>
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <_fflush_r+0x74>)
 80020a0:	429c      	cmp	r4, r3
 80020a2:	bf08      	it	eq
 80020a4:	68ec      	ldreq	r4, [r5, #12]
 80020a6:	e7da      	b.n	800205e <_fflush_r+0x22>
 80020a8:	080039d4 	.word	0x080039d4
 80020ac:	080039f4 	.word	0x080039f4
 80020b0:	080039b4 	.word	0x080039b4

080020b4 <fflush>:
 80020b4:	4601      	mov	r1, r0
 80020b6:	b920      	cbnz	r0, 80020c2 <fflush+0xe>
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <fflush+0x18>)
 80020ba:	4905      	ldr	r1, [pc, #20]	; (80020d0 <fflush+0x1c>)
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	f000 b8fe 	b.w	80022be <_fwalk_reent>
 80020c2:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <fflush+0x20>)
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	f7ff bfb9 	b.w	800203c <_fflush_r>
 80020ca:	bf00      	nop
 80020cc:	080039b0 	.word	0x080039b0
 80020d0:	0800203d 	.word	0x0800203d
 80020d4:	2000000c 	.word	0x2000000c

080020d8 <std>:
 80020d8:	2300      	movs	r3, #0
 80020da:	b510      	push	{r4, lr}
 80020dc:	4604      	mov	r4, r0
 80020de:	e9c0 3300 	strd	r3, r3, [r0]
 80020e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80020e6:	6083      	str	r3, [r0, #8]
 80020e8:	8181      	strh	r1, [r0, #12]
 80020ea:	6643      	str	r3, [r0, #100]	; 0x64
 80020ec:	81c2      	strh	r2, [r0, #14]
 80020ee:	6183      	str	r3, [r0, #24]
 80020f0:	4619      	mov	r1, r3
 80020f2:	2208      	movs	r2, #8
 80020f4:	305c      	adds	r0, #92	; 0x5c
 80020f6:	f7ff fceb 	bl	8001ad0 <memset>
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <std+0x38>)
 80020fc:	6224      	str	r4, [r4, #32]
 80020fe:	6263      	str	r3, [r4, #36]	; 0x24
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <std+0x3c>)
 8002102:	62a3      	str	r3, [r4, #40]	; 0x28
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <std+0x40>)
 8002106:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <std+0x44>)
 800210a:	6323      	str	r3, [r4, #48]	; 0x30
 800210c:	bd10      	pop	{r4, pc}
 800210e:	bf00      	nop
 8002110:	0800336d 	.word	0x0800336d
 8002114:	0800338f 	.word	0x0800338f
 8002118:	080033c7 	.word	0x080033c7
 800211c:	080033eb 	.word	0x080033eb

08002120 <_cleanup_r>:
 8002120:	4901      	ldr	r1, [pc, #4]	; (8002128 <_cleanup_r+0x8>)
 8002122:	f000 b8cc 	b.w	80022be <_fwalk_reent>
 8002126:	bf00      	nop
 8002128:	0800203d 	.word	0x0800203d

0800212c <__sfmoreglue>:
 800212c:	2268      	movs	r2, #104	; 0x68
 800212e:	b570      	push	{r4, r5, r6, lr}
 8002130:	1e4d      	subs	r5, r1, #1
 8002132:	4355      	muls	r5, r2
 8002134:	460e      	mov	r6, r1
 8002136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800213a:	f000 f9b7 	bl	80024ac <_malloc_r>
 800213e:	4604      	mov	r4, r0
 8002140:	b140      	cbz	r0, 8002154 <__sfmoreglue+0x28>
 8002142:	2100      	movs	r1, #0
 8002144:	e9c0 1600 	strd	r1, r6, [r0]
 8002148:	300c      	adds	r0, #12
 800214a:	60a0      	str	r0, [r4, #8]
 800214c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002150:	f7ff fcbe 	bl	8001ad0 <memset>
 8002154:	4620      	mov	r0, r4
 8002156:	bd70      	pop	{r4, r5, r6, pc}

08002158 <__sfp_lock_acquire>:
 8002158:	4801      	ldr	r0, [pc, #4]	; (8002160 <__sfp_lock_acquire+0x8>)
 800215a:	f000 b8d0 	b.w	80022fe <__retarget_lock_acquire_recursive>
 800215e:	bf00      	nop
 8002160:	200000dd 	.word	0x200000dd

08002164 <__sfp_lock_release>:
 8002164:	4801      	ldr	r0, [pc, #4]	; (800216c <__sfp_lock_release+0x8>)
 8002166:	f000 b8cb 	b.w	8002300 <__retarget_lock_release_recursive>
 800216a:	bf00      	nop
 800216c:	200000dd 	.word	0x200000dd

08002170 <__sinit_lock_acquire>:
 8002170:	4801      	ldr	r0, [pc, #4]	; (8002178 <__sinit_lock_acquire+0x8>)
 8002172:	f000 b8c4 	b.w	80022fe <__retarget_lock_acquire_recursive>
 8002176:	bf00      	nop
 8002178:	200000de 	.word	0x200000de

0800217c <__sinit_lock_release>:
 800217c:	4801      	ldr	r0, [pc, #4]	; (8002184 <__sinit_lock_release+0x8>)
 800217e:	f000 b8bf 	b.w	8002300 <__retarget_lock_release_recursive>
 8002182:	bf00      	nop
 8002184:	200000de 	.word	0x200000de

08002188 <__sinit>:
 8002188:	b510      	push	{r4, lr}
 800218a:	4604      	mov	r4, r0
 800218c:	f7ff fff0 	bl	8002170 <__sinit_lock_acquire>
 8002190:	69a3      	ldr	r3, [r4, #24]
 8002192:	b11b      	cbz	r3, 800219c <__sinit+0x14>
 8002194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002198:	f7ff bff0 	b.w	800217c <__sinit_lock_release>
 800219c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80021a0:	6523      	str	r3, [r4, #80]	; 0x50
 80021a2:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <__sinit+0x68>)
 80021a4:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <__sinit+0x6c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80021aa:	42a3      	cmp	r3, r4
 80021ac:	bf08      	it	eq
 80021ae:	2301      	moveq	r3, #1
 80021b0:	4620      	mov	r0, r4
 80021b2:	bf08      	it	eq
 80021b4:	61a3      	streq	r3, [r4, #24]
 80021b6:	f000 f81f 	bl	80021f8 <__sfp>
 80021ba:	6060      	str	r0, [r4, #4]
 80021bc:	4620      	mov	r0, r4
 80021be:	f000 f81b 	bl	80021f8 <__sfp>
 80021c2:	60a0      	str	r0, [r4, #8]
 80021c4:	4620      	mov	r0, r4
 80021c6:	f000 f817 	bl	80021f8 <__sfp>
 80021ca:	2200      	movs	r2, #0
 80021cc:	2104      	movs	r1, #4
 80021ce:	60e0      	str	r0, [r4, #12]
 80021d0:	6860      	ldr	r0, [r4, #4]
 80021d2:	f7ff ff81 	bl	80020d8 <std>
 80021d6:	2201      	movs	r2, #1
 80021d8:	2109      	movs	r1, #9
 80021da:	68a0      	ldr	r0, [r4, #8]
 80021dc:	f7ff ff7c 	bl	80020d8 <std>
 80021e0:	2202      	movs	r2, #2
 80021e2:	2112      	movs	r1, #18
 80021e4:	68e0      	ldr	r0, [r4, #12]
 80021e6:	f7ff ff77 	bl	80020d8 <std>
 80021ea:	2301      	movs	r3, #1
 80021ec:	61a3      	str	r3, [r4, #24]
 80021ee:	e7d1      	b.n	8002194 <__sinit+0xc>
 80021f0:	080039b0 	.word	0x080039b0
 80021f4:	08002121 	.word	0x08002121

080021f8 <__sfp>:
 80021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fa:	4607      	mov	r7, r0
 80021fc:	f7ff ffac 	bl	8002158 <__sfp_lock_acquire>
 8002200:	4b1e      	ldr	r3, [pc, #120]	; (800227c <__sfp+0x84>)
 8002202:	681e      	ldr	r6, [r3, #0]
 8002204:	69b3      	ldr	r3, [r6, #24]
 8002206:	b913      	cbnz	r3, 800220e <__sfp+0x16>
 8002208:	4630      	mov	r0, r6
 800220a:	f7ff ffbd 	bl	8002188 <__sinit>
 800220e:	3648      	adds	r6, #72	; 0x48
 8002210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002214:	3b01      	subs	r3, #1
 8002216:	d503      	bpl.n	8002220 <__sfp+0x28>
 8002218:	6833      	ldr	r3, [r6, #0]
 800221a:	b30b      	cbz	r3, 8002260 <__sfp+0x68>
 800221c:	6836      	ldr	r6, [r6, #0]
 800221e:	e7f7      	b.n	8002210 <__sfp+0x18>
 8002220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002224:	b9d5      	cbnz	r5, 800225c <__sfp+0x64>
 8002226:	4b16      	ldr	r3, [pc, #88]	; (8002280 <__sfp+0x88>)
 8002228:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800222c:	60e3      	str	r3, [r4, #12]
 800222e:	6665      	str	r5, [r4, #100]	; 0x64
 8002230:	f000 f864 	bl	80022fc <__retarget_lock_init_recursive>
 8002234:	f7ff ff96 	bl	8002164 <__sfp_lock_release>
 8002238:	2208      	movs	r2, #8
 800223a:	4629      	mov	r1, r5
 800223c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002240:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002244:	6025      	str	r5, [r4, #0]
 8002246:	61a5      	str	r5, [r4, #24]
 8002248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800224c:	f7ff fc40 	bl	8001ad0 <memset>
 8002250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002258:	4620      	mov	r0, r4
 800225a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800225c:	3468      	adds	r4, #104	; 0x68
 800225e:	e7d9      	b.n	8002214 <__sfp+0x1c>
 8002260:	2104      	movs	r1, #4
 8002262:	4638      	mov	r0, r7
 8002264:	f7ff ff62 	bl	800212c <__sfmoreglue>
 8002268:	4604      	mov	r4, r0
 800226a:	6030      	str	r0, [r6, #0]
 800226c:	2800      	cmp	r0, #0
 800226e:	d1d5      	bne.n	800221c <__sfp+0x24>
 8002270:	f7ff ff78 	bl	8002164 <__sfp_lock_release>
 8002274:	230c      	movs	r3, #12
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	e7ee      	b.n	8002258 <__sfp+0x60>
 800227a:	bf00      	nop
 800227c:	080039b0 	.word	0x080039b0
 8002280:	ffff0001 	.word	0xffff0001

08002284 <_fwalk>:
 8002284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002288:	460f      	mov	r7, r1
 800228a:	2600      	movs	r6, #0
 800228c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002290:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8002294:	f1b8 0801 	subs.w	r8, r8, #1
 8002298:	d505      	bpl.n	80022a6 <_fwalk+0x22>
 800229a:	6824      	ldr	r4, [r4, #0]
 800229c:	2c00      	cmp	r4, #0
 800229e:	d1f7      	bne.n	8002290 <_fwalk+0xc>
 80022a0:	4630      	mov	r0, r6
 80022a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022a6:	89ab      	ldrh	r3, [r5, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d906      	bls.n	80022ba <_fwalk+0x36>
 80022ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80022b0:	3301      	adds	r3, #1
 80022b2:	d002      	beq.n	80022ba <_fwalk+0x36>
 80022b4:	4628      	mov	r0, r5
 80022b6:	47b8      	blx	r7
 80022b8:	4306      	orrs	r6, r0
 80022ba:	3568      	adds	r5, #104	; 0x68
 80022bc:	e7ea      	b.n	8002294 <_fwalk+0x10>

080022be <_fwalk_reent>:
 80022be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022c2:	4606      	mov	r6, r0
 80022c4:	4688      	mov	r8, r1
 80022c6:	2700      	movs	r7, #0
 80022c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80022cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80022d0:	f1b9 0901 	subs.w	r9, r9, #1
 80022d4:	d505      	bpl.n	80022e2 <_fwalk_reent+0x24>
 80022d6:	6824      	ldr	r4, [r4, #0]
 80022d8:	2c00      	cmp	r4, #0
 80022da:	d1f7      	bne.n	80022cc <_fwalk_reent+0xe>
 80022dc:	4638      	mov	r0, r7
 80022de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022e2:	89ab      	ldrh	r3, [r5, #12]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d907      	bls.n	80022f8 <_fwalk_reent+0x3a>
 80022e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80022ec:	3301      	adds	r3, #1
 80022ee:	d003      	beq.n	80022f8 <_fwalk_reent+0x3a>
 80022f0:	4629      	mov	r1, r5
 80022f2:	4630      	mov	r0, r6
 80022f4:	47c0      	blx	r8
 80022f6:	4307      	orrs	r7, r0
 80022f8:	3568      	adds	r5, #104	; 0x68
 80022fa:	e7e9      	b.n	80022d0 <_fwalk_reent+0x12>

080022fc <__retarget_lock_init_recursive>:
 80022fc:	4770      	bx	lr

080022fe <__retarget_lock_acquire_recursive>:
 80022fe:	4770      	bx	lr

08002300 <__retarget_lock_release_recursive>:
 8002300:	4770      	bx	lr

08002302 <__swhatbuf_r>:
 8002302:	b570      	push	{r4, r5, r6, lr}
 8002304:	460e      	mov	r6, r1
 8002306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800230a:	4614      	mov	r4, r2
 800230c:	2900      	cmp	r1, #0
 800230e:	461d      	mov	r5, r3
 8002310:	b096      	sub	sp, #88	; 0x58
 8002312:	da08      	bge.n	8002326 <__swhatbuf_r+0x24>
 8002314:	2200      	movs	r2, #0
 8002316:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800231a:	602a      	str	r2, [r5, #0]
 800231c:	061a      	lsls	r2, r3, #24
 800231e:	d410      	bmi.n	8002342 <__swhatbuf_r+0x40>
 8002320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002324:	e00e      	b.n	8002344 <__swhatbuf_r+0x42>
 8002326:	466a      	mov	r2, sp
 8002328:	f001 fa48 	bl	80037bc <_fstat_r>
 800232c:	2800      	cmp	r0, #0
 800232e:	dbf1      	blt.n	8002314 <__swhatbuf_r+0x12>
 8002330:	9a01      	ldr	r2, [sp, #4]
 8002332:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002336:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800233a:	425a      	negs	r2, r3
 800233c:	415a      	adcs	r2, r3
 800233e:	602a      	str	r2, [r5, #0]
 8002340:	e7ee      	b.n	8002320 <__swhatbuf_r+0x1e>
 8002342:	2340      	movs	r3, #64	; 0x40
 8002344:	2000      	movs	r0, #0
 8002346:	6023      	str	r3, [r4, #0]
 8002348:	b016      	add	sp, #88	; 0x58
 800234a:	bd70      	pop	{r4, r5, r6, pc}

0800234c <__smakebuf_r>:
 800234c:	898b      	ldrh	r3, [r1, #12]
 800234e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002350:	079d      	lsls	r5, r3, #30
 8002352:	4606      	mov	r6, r0
 8002354:	460c      	mov	r4, r1
 8002356:	d507      	bpl.n	8002368 <__smakebuf_r+0x1c>
 8002358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800235c:	6023      	str	r3, [r4, #0]
 800235e:	6123      	str	r3, [r4, #16]
 8002360:	2301      	movs	r3, #1
 8002362:	6163      	str	r3, [r4, #20]
 8002364:	b002      	add	sp, #8
 8002366:	bd70      	pop	{r4, r5, r6, pc}
 8002368:	466a      	mov	r2, sp
 800236a:	ab01      	add	r3, sp, #4
 800236c:	f7ff ffc9 	bl	8002302 <__swhatbuf_r>
 8002370:	9900      	ldr	r1, [sp, #0]
 8002372:	4605      	mov	r5, r0
 8002374:	4630      	mov	r0, r6
 8002376:	f000 f899 	bl	80024ac <_malloc_r>
 800237a:	b948      	cbnz	r0, 8002390 <__smakebuf_r+0x44>
 800237c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002380:	059a      	lsls	r2, r3, #22
 8002382:	d4ef      	bmi.n	8002364 <__smakebuf_r+0x18>
 8002384:	f023 0303 	bic.w	r3, r3, #3
 8002388:	f043 0302 	orr.w	r3, r3, #2
 800238c:	81a3      	strh	r3, [r4, #12]
 800238e:	e7e3      	b.n	8002358 <__smakebuf_r+0xc>
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <__smakebuf_r+0x7c>)
 8002392:	62b3      	str	r3, [r6, #40]	; 0x28
 8002394:	89a3      	ldrh	r3, [r4, #12]
 8002396:	6020      	str	r0, [r4, #0]
 8002398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239c:	81a3      	strh	r3, [r4, #12]
 800239e:	9b00      	ldr	r3, [sp, #0]
 80023a0:	6120      	str	r0, [r4, #16]
 80023a2:	6163      	str	r3, [r4, #20]
 80023a4:	9b01      	ldr	r3, [sp, #4]
 80023a6:	b15b      	cbz	r3, 80023c0 <__smakebuf_r+0x74>
 80023a8:	4630      	mov	r0, r6
 80023aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023ae:	f001 fa17 	bl	80037e0 <_isatty_r>
 80023b2:	b128      	cbz	r0, 80023c0 <__smakebuf_r+0x74>
 80023b4:	89a3      	ldrh	r3, [r4, #12]
 80023b6:	f023 0303 	bic.w	r3, r3, #3
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	81a3      	strh	r3, [r4, #12]
 80023c0:	89a0      	ldrh	r0, [r4, #12]
 80023c2:	4305      	orrs	r5, r0
 80023c4:	81a5      	strh	r5, [r4, #12]
 80023c6:	e7cd      	b.n	8002364 <__smakebuf_r+0x18>
 80023c8:	08002121 	.word	0x08002121

080023cc <malloc>:
 80023cc:	4b02      	ldr	r3, [pc, #8]	; (80023d8 <malloc+0xc>)
 80023ce:	4601      	mov	r1, r0
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	f000 b86b 	b.w	80024ac <_malloc_r>
 80023d6:	bf00      	nop
 80023d8:	2000000c 	.word	0x2000000c

080023dc <_free_r>:
 80023dc:	b538      	push	{r3, r4, r5, lr}
 80023de:	4605      	mov	r5, r0
 80023e0:	2900      	cmp	r1, #0
 80023e2:	d040      	beq.n	8002466 <_free_r+0x8a>
 80023e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023e8:	1f0c      	subs	r4, r1, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bfb8      	it	lt
 80023ee:	18e4      	addlt	r4, r4, r3
 80023f0:	f001 fa34 	bl	800385c <__malloc_lock>
 80023f4:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <_free_r+0x8c>)
 80023f6:	6813      	ldr	r3, [r2, #0]
 80023f8:	b933      	cbnz	r3, 8002408 <_free_r+0x2c>
 80023fa:	6063      	str	r3, [r4, #4]
 80023fc:	6014      	str	r4, [r2, #0]
 80023fe:	4628      	mov	r0, r5
 8002400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002404:	f001 ba30 	b.w	8003868 <__malloc_unlock>
 8002408:	42a3      	cmp	r3, r4
 800240a:	d908      	bls.n	800241e <_free_r+0x42>
 800240c:	6820      	ldr	r0, [r4, #0]
 800240e:	1821      	adds	r1, r4, r0
 8002410:	428b      	cmp	r3, r1
 8002412:	bf01      	itttt	eq
 8002414:	6819      	ldreq	r1, [r3, #0]
 8002416:	685b      	ldreq	r3, [r3, #4]
 8002418:	1809      	addeq	r1, r1, r0
 800241a:	6021      	streq	r1, [r4, #0]
 800241c:	e7ed      	b.n	80023fa <_free_r+0x1e>
 800241e:	461a      	mov	r2, r3
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	b10b      	cbz	r3, 8002428 <_free_r+0x4c>
 8002424:	42a3      	cmp	r3, r4
 8002426:	d9fa      	bls.n	800241e <_free_r+0x42>
 8002428:	6811      	ldr	r1, [r2, #0]
 800242a:	1850      	adds	r0, r2, r1
 800242c:	42a0      	cmp	r0, r4
 800242e:	d10b      	bne.n	8002448 <_free_r+0x6c>
 8002430:	6820      	ldr	r0, [r4, #0]
 8002432:	4401      	add	r1, r0
 8002434:	1850      	adds	r0, r2, r1
 8002436:	4283      	cmp	r3, r0
 8002438:	6011      	str	r1, [r2, #0]
 800243a:	d1e0      	bne.n	80023fe <_free_r+0x22>
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4401      	add	r1, r0
 8002442:	6011      	str	r1, [r2, #0]
 8002444:	6053      	str	r3, [r2, #4]
 8002446:	e7da      	b.n	80023fe <_free_r+0x22>
 8002448:	d902      	bls.n	8002450 <_free_r+0x74>
 800244a:	230c      	movs	r3, #12
 800244c:	602b      	str	r3, [r5, #0]
 800244e:	e7d6      	b.n	80023fe <_free_r+0x22>
 8002450:	6820      	ldr	r0, [r4, #0]
 8002452:	1821      	adds	r1, r4, r0
 8002454:	428b      	cmp	r3, r1
 8002456:	bf01      	itttt	eq
 8002458:	6819      	ldreq	r1, [r3, #0]
 800245a:	685b      	ldreq	r3, [r3, #4]
 800245c:	1809      	addeq	r1, r1, r0
 800245e:	6021      	streq	r1, [r4, #0]
 8002460:	6063      	str	r3, [r4, #4]
 8002462:	6054      	str	r4, [r2, #4]
 8002464:	e7cb      	b.n	80023fe <_free_r+0x22>
 8002466:	bd38      	pop	{r3, r4, r5, pc}
 8002468:	200000e0 	.word	0x200000e0

0800246c <sbrk_aligned>:
 800246c:	b570      	push	{r4, r5, r6, lr}
 800246e:	4e0e      	ldr	r6, [pc, #56]	; (80024a8 <sbrk_aligned+0x3c>)
 8002470:	460c      	mov	r4, r1
 8002472:	6831      	ldr	r1, [r6, #0]
 8002474:	4605      	mov	r5, r0
 8002476:	b911      	cbnz	r1, 800247e <sbrk_aligned+0x12>
 8002478:	f000 ff30 	bl	80032dc <_sbrk_r>
 800247c:	6030      	str	r0, [r6, #0]
 800247e:	4621      	mov	r1, r4
 8002480:	4628      	mov	r0, r5
 8002482:	f000 ff2b 	bl	80032dc <_sbrk_r>
 8002486:	1c43      	adds	r3, r0, #1
 8002488:	d00a      	beq.n	80024a0 <sbrk_aligned+0x34>
 800248a:	1cc4      	adds	r4, r0, #3
 800248c:	f024 0403 	bic.w	r4, r4, #3
 8002490:	42a0      	cmp	r0, r4
 8002492:	d007      	beq.n	80024a4 <sbrk_aligned+0x38>
 8002494:	1a21      	subs	r1, r4, r0
 8002496:	4628      	mov	r0, r5
 8002498:	f000 ff20 	bl	80032dc <_sbrk_r>
 800249c:	3001      	adds	r0, #1
 800249e:	d101      	bne.n	80024a4 <sbrk_aligned+0x38>
 80024a0:	f04f 34ff 	mov.w	r4, #4294967295
 80024a4:	4620      	mov	r0, r4
 80024a6:	bd70      	pop	{r4, r5, r6, pc}
 80024a8:	200000e4 	.word	0x200000e4

080024ac <_malloc_r>:
 80024ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024b0:	1ccd      	adds	r5, r1, #3
 80024b2:	f025 0503 	bic.w	r5, r5, #3
 80024b6:	3508      	adds	r5, #8
 80024b8:	2d0c      	cmp	r5, #12
 80024ba:	bf38      	it	cc
 80024bc:	250c      	movcc	r5, #12
 80024be:	2d00      	cmp	r5, #0
 80024c0:	4607      	mov	r7, r0
 80024c2:	db01      	blt.n	80024c8 <_malloc_r+0x1c>
 80024c4:	42a9      	cmp	r1, r5
 80024c6:	d905      	bls.n	80024d4 <_malloc_r+0x28>
 80024c8:	230c      	movs	r3, #12
 80024ca:	2600      	movs	r6, #0
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	4630      	mov	r0, r6
 80024d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024d4:	4e2e      	ldr	r6, [pc, #184]	; (8002590 <_malloc_r+0xe4>)
 80024d6:	f001 f9c1 	bl	800385c <__malloc_lock>
 80024da:	6833      	ldr	r3, [r6, #0]
 80024dc:	461c      	mov	r4, r3
 80024de:	bb34      	cbnz	r4, 800252e <_malloc_r+0x82>
 80024e0:	4629      	mov	r1, r5
 80024e2:	4638      	mov	r0, r7
 80024e4:	f7ff ffc2 	bl	800246c <sbrk_aligned>
 80024e8:	1c43      	adds	r3, r0, #1
 80024ea:	4604      	mov	r4, r0
 80024ec:	d14d      	bne.n	800258a <_malloc_r+0xde>
 80024ee:	6834      	ldr	r4, [r6, #0]
 80024f0:	4626      	mov	r6, r4
 80024f2:	2e00      	cmp	r6, #0
 80024f4:	d140      	bne.n	8002578 <_malloc_r+0xcc>
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	4631      	mov	r1, r6
 80024fa:	4638      	mov	r0, r7
 80024fc:	eb04 0803 	add.w	r8, r4, r3
 8002500:	f000 feec 	bl	80032dc <_sbrk_r>
 8002504:	4580      	cmp	r8, r0
 8002506:	d13a      	bne.n	800257e <_malloc_r+0xd2>
 8002508:	6821      	ldr	r1, [r4, #0]
 800250a:	3503      	adds	r5, #3
 800250c:	1a6d      	subs	r5, r5, r1
 800250e:	f025 0503 	bic.w	r5, r5, #3
 8002512:	3508      	adds	r5, #8
 8002514:	2d0c      	cmp	r5, #12
 8002516:	bf38      	it	cc
 8002518:	250c      	movcc	r5, #12
 800251a:	4638      	mov	r0, r7
 800251c:	4629      	mov	r1, r5
 800251e:	f7ff ffa5 	bl	800246c <sbrk_aligned>
 8002522:	3001      	adds	r0, #1
 8002524:	d02b      	beq.n	800257e <_malloc_r+0xd2>
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	442b      	add	r3, r5
 800252a:	6023      	str	r3, [r4, #0]
 800252c:	e00e      	b.n	800254c <_malloc_r+0xa0>
 800252e:	6822      	ldr	r2, [r4, #0]
 8002530:	1b52      	subs	r2, r2, r5
 8002532:	d41e      	bmi.n	8002572 <_malloc_r+0xc6>
 8002534:	2a0b      	cmp	r2, #11
 8002536:	d916      	bls.n	8002566 <_malloc_r+0xba>
 8002538:	1961      	adds	r1, r4, r5
 800253a:	42a3      	cmp	r3, r4
 800253c:	6025      	str	r5, [r4, #0]
 800253e:	bf18      	it	ne
 8002540:	6059      	strne	r1, [r3, #4]
 8002542:	6863      	ldr	r3, [r4, #4]
 8002544:	bf08      	it	eq
 8002546:	6031      	streq	r1, [r6, #0]
 8002548:	5162      	str	r2, [r4, r5]
 800254a:	604b      	str	r3, [r1, #4]
 800254c:	4638      	mov	r0, r7
 800254e:	f104 060b 	add.w	r6, r4, #11
 8002552:	f001 f989 	bl	8003868 <__malloc_unlock>
 8002556:	f026 0607 	bic.w	r6, r6, #7
 800255a:	1d23      	adds	r3, r4, #4
 800255c:	1af2      	subs	r2, r6, r3
 800255e:	d0b6      	beq.n	80024ce <_malloc_r+0x22>
 8002560:	1b9b      	subs	r3, r3, r6
 8002562:	50a3      	str	r3, [r4, r2]
 8002564:	e7b3      	b.n	80024ce <_malloc_r+0x22>
 8002566:	6862      	ldr	r2, [r4, #4]
 8002568:	42a3      	cmp	r3, r4
 800256a:	bf0c      	ite	eq
 800256c:	6032      	streq	r2, [r6, #0]
 800256e:	605a      	strne	r2, [r3, #4]
 8002570:	e7ec      	b.n	800254c <_malloc_r+0xa0>
 8002572:	4623      	mov	r3, r4
 8002574:	6864      	ldr	r4, [r4, #4]
 8002576:	e7b2      	b.n	80024de <_malloc_r+0x32>
 8002578:	4634      	mov	r4, r6
 800257a:	6876      	ldr	r6, [r6, #4]
 800257c:	e7b9      	b.n	80024f2 <_malloc_r+0x46>
 800257e:	230c      	movs	r3, #12
 8002580:	4638      	mov	r0, r7
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	f001 f970 	bl	8003868 <__malloc_unlock>
 8002588:	e7a1      	b.n	80024ce <_malloc_r+0x22>
 800258a:	6025      	str	r5, [r4, #0]
 800258c:	e7de      	b.n	800254c <_malloc_r+0xa0>
 800258e:	bf00      	nop
 8002590:	200000e0 	.word	0x200000e0

08002594 <__sfputc_r>:
 8002594:	6893      	ldr	r3, [r2, #8]
 8002596:	b410      	push	{r4}
 8002598:	3b01      	subs	r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	6093      	str	r3, [r2, #8]
 800259e:	da07      	bge.n	80025b0 <__sfputc_r+0x1c>
 80025a0:	6994      	ldr	r4, [r2, #24]
 80025a2:	42a3      	cmp	r3, r4
 80025a4:	db01      	blt.n	80025aa <__sfputc_r+0x16>
 80025a6:	290a      	cmp	r1, #10
 80025a8:	d102      	bne.n	80025b0 <__sfputc_r+0x1c>
 80025aa:	bc10      	pop	{r4}
 80025ac:	f7ff bc04 	b.w	8001db8 <__swbuf_r>
 80025b0:	6813      	ldr	r3, [r2, #0]
 80025b2:	1c58      	adds	r0, r3, #1
 80025b4:	6010      	str	r0, [r2, #0]
 80025b6:	7019      	strb	r1, [r3, #0]
 80025b8:	4608      	mov	r0, r1
 80025ba:	bc10      	pop	{r4}
 80025bc:	4770      	bx	lr

080025be <__sfputs_r>:
 80025be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c0:	4606      	mov	r6, r0
 80025c2:	460f      	mov	r7, r1
 80025c4:	4614      	mov	r4, r2
 80025c6:	18d5      	adds	r5, r2, r3
 80025c8:	42ac      	cmp	r4, r5
 80025ca:	d101      	bne.n	80025d0 <__sfputs_r+0x12>
 80025cc:	2000      	movs	r0, #0
 80025ce:	e007      	b.n	80025e0 <__sfputs_r+0x22>
 80025d0:	463a      	mov	r2, r7
 80025d2:	4630      	mov	r0, r6
 80025d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025d8:	f7ff ffdc 	bl	8002594 <__sfputc_r>
 80025dc:	1c43      	adds	r3, r0, #1
 80025de:	d1f3      	bne.n	80025c8 <__sfputs_r+0xa>
 80025e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025e4 <_vfiprintf_r>:
 80025e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025e8:	460d      	mov	r5, r1
 80025ea:	4614      	mov	r4, r2
 80025ec:	4698      	mov	r8, r3
 80025ee:	4606      	mov	r6, r0
 80025f0:	b09d      	sub	sp, #116	; 0x74
 80025f2:	b118      	cbz	r0, 80025fc <_vfiprintf_r+0x18>
 80025f4:	6983      	ldr	r3, [r0, #24]
 80025f6:	b90b      	cbnz	r3, 80025fc <_vfiprintf_r+0x18>
 80025f8:	f7ff fdc6 	bl	8002188 <__sinit>
 80025fc:	4b89      	ldr	r3, [pc, #548]	; (8002824 <_vfiprintf_r+0x240>)
 80025fe:	429d      	cmp	r5, r3
 8002600:	d11b      	bne.n	800263a <_vfiprintf_r+0x56>
 8002602:	6875      	ldr	r5, [r6, #4]
 8002604:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002606:	07d9      	lsls	r1, r3, #31
 8002608:	d405      	bmi.n	8002616 <_vfiprintf_r+0x32>
 800260a:	89ab      	ldrh	r3, [r5, #12]
 800260c:	059a      	lsls	r2, r3, #22
 800260e:	d402      	bmi.n	8002616 <_vfiprintf_r+0x32>
 8002610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002612:	f7ff fe74 	bl	80022fe <__retarget_lock_acquire_recursive>
 8002616:	89ab      	ldrh	r3, [r5, #12]
 8002618:	071b      	lsls	r3, r3, #28
 800261a:	d501      	bpl.n	8002620 <_vfiprintf_r+0x3c>
 800261c:	692b      	ldr	r3, [r5, #16]
 800261e:	b9eb      	cbnz	r3, 800265c <_vfiprintf_r+0x78>
 8002620:	4629      	mov	r1, r5
 8002622:	4630      	mov	r0, r6
 8002624:	f7ff fc1a 	bl	8001e5c <__swsetup_r>
 8002628:	b1c0      	cbz	r0, 800265c <_vfiprintf_r+0x78>
 800262a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800262c:	07dc      	lsls	r4, r3, #31
 800262e:	d50e      	bpl.n	800264e <_vfiprintf_r+0x6a>
 8002630:	f04f 30ff 	mov.w	r0, #4294967295
 8002634:	b01d      	add	sp, #116	; 0x74
 8002636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800263a:	4b7b      	ldr	r3, [pc, #492]	; (8002828 <_vfiprintf_r+0x244>)
 800263c:	429d      	cmp	r5, r3
 800263e:	d101      	bne.n	8002644 <_vfiprintf_r+0x60>
 8002640:	68b5      	ldr	r5, [r6, #8]
 8002642:	e7df      	b.n	8002604 <_vfiprintf_r+0x20>
 8002644:	4b79      	ldr	r3, [pc, #484]	; (800282c <_vfiprintf_r+0x248>)
 8002646:	429d      	cmp	r5, r3
 8002648:	bf08      	it	eq
 800264a:	68f5      	ldreq	r5, [r6, #12]
 800264c:	e7da      	b.n	8002604 <_vfiprintf_r+0x20>
 800264e:	89ab      	ldrh	r3, [r5, #12]
 8002650:	0598      	lsls	r0, r3, #22
 8002652:	d4ed      	bmi.n	8002630 <_vfiprintf_r+0x4c>
 8002654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002656:	f7ff fe53 	bl	8002300 <__retarget_lock_release_recursive>
 800265a:	e7e9      	b.n	8002630 <_vfiprintf_r+0x4c>
 800265c:	2300      	movs	r3, #0
 800265e:	9309      	str	r3, [sp, #36]	; 0x24
 8002660:	2320      	movs	r3, #32
 8002662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002666:	2330      	movs	r3, #48	; 0x30
 8002668:	f04f 0901 	mov.w	r9, #1
 800266c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002670:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002830 <_vfiprintf_r+0x24c>
 8002674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002678:	4623      	mov	r3, r4
 800267a:	469a      	mov	sl, r3
 800267c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002680:	b10a      	cbz	r2, 8002686 <_vfiprintf_r+0xa2>
 8002682:	2a25      	cmp	r2, #37	; 0x25
 8002684:	d1f9      	bne.n	800267a <_vfiprintf_r+0x96>
 8002686:	ebba 0b04 	subs.w	fp, sl, r4
 800268a:	d00b      	beq.n	80026a4 <_vfiprintf_r+0xc0>
 800268c:	465b      	mov	r3, fp
 800268e:	4622      	mov	r2, r4
 8002690:	4629      	mov	r1, r5
 8002692:	4630      	mov	r0, r6
 8002694:	f7ff ff93 	bl	80025be <__sfputs_r>
 8002698:	3001      	adds	r0, #1
 800269a:	f000 80aa 	beq.w	80027f2 <_vfiprintf_r+0x20e>
 800269e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026a0:	445a      	add	r2, fp
 80026a2:	9209      	str	r2, [sp, #36]	; 0x24
 80026a4:	f89a 3000 	ldrb.w	r3, [sl]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a2 	beq.w	80027f2 <_vfiprintf_r+0x20e>
 80026ae:	2300      	movs	r3, #0
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026b8:	f10a 0a01 	add.w	sl, sl, #1
 80026bc:	9304      	str	r3, [sp, #16]
 80026be:	9307      	str	r3, [sp, #28]
 80026c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026c4:	931a      	str	r3, [sp, #104]	; 0x68
 80026c6:	4654      	mov	r4, sl
 80026c8:	2205      	movs	r2, #5
 80026ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026ce:	4858      	ldr	r0, [pc, #352]	; (8002830 <_vfiprintf_r+0x24c>)
 80026d0:	f001 f8a8 	bl	8003824 <memchr>
 80026d4:	9a04      	ldr	r2, [sp, #16]
 80026d6:	b9d8      	cbnz	r0, 8002710 <_vfiprintf_r+0x12c>
 80026d8:	06d1      	lsls	r1, r2, #27
 80026da:	bf44      	itt	mi
 80026dc:	2320      	movmi	r3, #32
 80026de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026e2:	0713      	lsls	r3, r2, #28
 80026e4:	bf44      	itt	mi
 80026e6:	232b      	movmi	r3, #43	; 0x2b
 80026e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026ec:	f89a 3000 	ldrb.w	r3, [sl]
 80026f0:	2b2a      	cmp	r3, #42	; 0x2a
 80026f2:	d015      	beq.n	8002720 <_vfiprintf_r+0x13c>
 80026f4:	4654      	mov	r4, sl
 80026f6:	2000      	movs	r0, #0
 80026f8:	f04f 0c0a 	mov.w	ip, #10
 80026fc:	9a07      	ldr	r2, [sp, #28]
 80026fe:	4621      	mov	r1, r4
 8002700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002704:	3b30      	subs	r3, #48	; 0x30
 8002706:	2b09      	cmp	r3, #9
 8002708:	d94e      	bls.n	80027a8 <_vfiprintf_r+0x1c4>
 800270a:	b1b0      	cbz	r0, 800273a <_vfiprintf_r+0x156>
 800270c:	9207      	str	r2, [sp, #28]
 800270e:	e014      	b.n	800273a <_vfiprintf_r+0x156>
 8002710:	eba0 0308 	sub.w	r3, r0, r8
 8002714:	fa09 f303 	lsl.w	r3, r9, r3
 8002718:	4313      	orrs	r3, r2
 800271a:	46a2      	mov	sl, r4
 800271c:	9304      	str	r3, [sp, #16]
 800271e:	e7d2      	b.n	80026c6 <_vfiprintf_r+0xe2>
 8002720:	9b03      	ldr	r3, [sp, #12]
 8002722:	1d19      	adds	r1, r3, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	9103      	str	r1, [sp, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	bfbb      	ittet	lt
 800272c:	425b      	neglt	r3, r3
 800272e:	f042 0202 	orrlt.w	r2, r2, #2
 8002732:	9307      	strge	r3, [sp, #28]
 8002734:	9307      	strlt	r3, [sp, #28]
 8002736:	bfb8      	it	lt
 8002738:	9204      	strlt	r2, [sp, #16]
 800273a:	7823      	ldrb	r3, [r4, #0]
 800273c:	2b2e      	cmp	r3, #46	; 0x2e
 800273e:	d10c      	bne.n	800275a <_vfiprintf_r+0x176>
 8002740:	7863      	ldrb	r3, [r4, #1]
 8002742:	2b2a      	cmp	r3, #42	; 0x2a
 8002744:	d135      	bne.n	80027b2 <_vfiprintf_r+0x1ce>
 8002746:	9b03      	ldr	r3, [sp, #12]
 8002748:	3402      	adds	r4, #2
 800274a:	1d1a      	adds	r2, r3, #4
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	9203      	str	r2, [sp, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	bfb8      	it	lt
 8002754:	f04f 33ff 	movlt.w	r3, #4294967295
 8002758:	9305      	str	r3, [sp, #20]
 800275a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002834 <_vfiprintf_r+0x250>
 800275e:	2203      	movs	r2, #3
 8002760:	4650      	mov	r0, sl
 8002762:	7821      	ldrb	r1, [r4, #0]
 8002764:	f001 f85e 	bl	8003824 <memchr>
 8002768:	b140      	cbz	r0, 800277c <_vfiprintf_r+0x198>
 800276a:	2340      	movs	r3, #64	; 0x40
 800276c:	eba0 000a 	sub.w	r0, r0, sl
 8002770:	fa03 f000 	lsl.w	r0, r3, r0
 8002774:	9b04      	ldr	r3, [sp, #16]
 8002776:	3401      	adds	r4, #1
 8002778:	4303      	orrs	r3, r0
 800277a:	9304      	str	r3, [sp, #16]
 800277c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002780:	2206      	movs	r2, #6
 8002782:	482d      	ldr	r0, [pc, #180]	; (8002838 <_vfiprintf_r+0x254>)
 8002784:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002788:	f001 f84c 	bl	8003824 <memchr>
 800278c:	2800      	cmp	r0, #0
 800278e:	d03f      	beq.n	8002810 <_vfiprintf_r+0x22c>
 8002790:	4b2a      	ldr	r3, [pc, #168]	; (800283c <_vfiprintf_r+0x258>)
 8002792:	bb1b      	cbnz	r3, 80027dc <_vfiprintf_r+0x1f8>
 8002794:	9b03      	ldr	r3, [sp, #12]
 8002796:	3307      	adds	r3, #7
 8002798:	f023 0307 	bic.w	r3, r3, #7
 800279c:	3308      	adds	r3, #8
 800279e:	9303      	str	r3, [sp, #12]
 80027a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027a2:	443b      	add	r3, r7
 80027a4:	9309      	str	r3, [sp, #36]	; 0x24
 80027a6:	e767      	b.n	8002678 <_vfiprintf_r+0x94>
 80027a8:	460c      	mov	r4, r1
 80027aa:	2001      	movs	r0, #1
 80027ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80027b0:	e7a5      	b.n	80026fe <_vfiprintf_r+0x11a>
 80027b2:	2300      	movs	r3, #0
 80027b4:	f04f 0c0a 	mov.w	ip, #10
 80027b8:	4619      	mov	r1, r3
 80027ba:	3401      	adds	r4, #1
 80027bc:	9305      	str	r3, [sp, #20]
 80027be:	4620      	mov	r0, r4
 80027c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027c4:	3a30      	subs	r2, #48	; 0x30
 80027c6:	2a09      	cmp	r2, #9
 80027c8:	d903      	bls.n	80027d2 <_vfiprintf_r+0x1ee>
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0c5      	beq.n	800275a <_vfiprintf_r+0x176>
 80027ce:	9105      	str	r1, [sp, #20]
 80027d0:	e7c3      	b.n	800275a <_vfiprintf_r+0x176>
 80027d2:	4604      	mov	r4, r0
 80027d4:	2301      	movs	r3, #1
 80027d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80027da:	e7f0      	b.n	80027be <_vfiprintf_r+0x1da>
 80027dc:	ab03      	add	r3, sp, #12
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	462a      	mov	r2, r5
 80027e2:	4630      	mov	r0, r6
 80027e4:	4b16      	ldr	r3, [pc, #88]	; (8002840 <_vfiprintf_r+0x25c>)
 80027e6:	a904      	add	r1, sp, #16
 80027e8:	f3af 8000 	nop.w
 80027ec:	4607      	mov	r7, r0
 80027ee:	1c78      	adds	r0, r7, #1
 80027f0:	d1d6      	bne.n	80027a0 <_vfiprintf_r+0x1bc>
 80027f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027f4:	07d9      	lsls	r1, r3, #31
 80027f6:	d405      	bmi.n	8002804 <_vfiprintf_r+0x220>
 80027f8:	89ab      	ldrh	r3, [r5, #12]
 80027fa:	059a      	lsls	r2, r3, #22
 80027fc:	d402      	bmi.n	8002804 <_vfiprintf_r+0x220>
 80027fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002800:	f7ff fd7e 	bl	8002300 <__retarget_lock_release_recursive>
 8002804:	89ab      	ldrh	r3, [r5, #12]
 8002806:	065b      	lsls	r3, r3, #25
 8002808:	f53f af12 	bmi.w	8002630 <_vfiprintf_r+0x4c>
 800280c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800280e:	e711      	b.n	8002634 <_vfiprintf_r+0x50>
 8002810:	ab03      	add	r3, sp, #12
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	462a      	mov	r2, r5
 8002816:	4630      	mov	r0, r6
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <_vfiprintf_r+0x25c>)
 800281a:	a904      	add	r1, sp, #16
 800281c:	f000 f882 	bl	8002924 <_printf_i>
 8002820:	e7e4      	b.n	80027ec <_vfiprintf_r+0x208>
 8002822:	bf00      	nop
 8002824:	080039d4 	.word	0x080039d4
 8002828:	080039f4 	.word	0x080039f4
 800282c:	080039b4 	.word	0x080039b4
 8002830:	08003a14 	.word	0x08003a14
 8002834:	08003a1a 	.word	0x08003a1a
 8002838:	08003a1e 	.word	0x08003a1e
 800283c:	00000000 	.word	0x00000000
 8002840:	080025bf 	.word	0x080025bf

08002844 <_printf_common>:
 8002844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002848:	4616      	mov	r6, r2
 800284a:	4699      	mov	r9, r3
 800284c:	688a      	ldr	r2, [r1, #8]
 800284e:	690b      	ldr	r3, [r1, #16]
 8002850:	4607      	mov	r7, r0
 8002852:	4293      	cmp	r3, r2
 8002854:	bfb8      	it	lt
 8002856:	4613      	movlt	r3, r2
 8002858:	6033      	str	r3, [r6, #0]
 800285a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800285e:	460c      	mov	r4, r1
 8002860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002864:	b10a      	cbz	r2, 800286a <_printf_common+0x26>
 8002866:	3301      	adds	r3, #1
 8002868:	6033      	str	r3, [r6, #0]
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	0699      	lsls	r1, r3, #26
 800286e:	bf42      	ittt	mi
 8002870:	6833      	ldrmi	r3, [r6, #0]
 8002872:	3302      	addmi	r3, #2
 8002874:	6033      	strmi	r3, [r6, #0]
 8002876:	6825      	ldr	r5, [r4, #0]
 8002878:	f015 0506 	ands.w	r5, r5, #6
 800287c:	d106      	bne.n	800288c <_printf_common+0x48>
 800287e:	f104 0a19 	add.w	sl, r4, #25
 8002882:	68e3      	ldr	r3, [r4, #12]
 8002884:	6832      	ldr	r2, [r6, #0]
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	42ab      	cmp	r3, r5
 800288a:	dc28      	bgt.n	80028de <_printf_common+0x9a>
 800288c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002890:	1e13      	subs	r3, r2, #0
 8002892:	6822      	ldr	r2, [r4, #0]
 8002894:	bf18      	it	ne
 8002896:	2301      	movne	r3, #1
 8002898:	0692      	lsls	r2, r2, #26
 800289a:	d42d      	bmi.n	80028f8 <_printf_common+0xb4>
 800289c:	4649      	mov	r1, r9
 800289e:	4638      	mov	r0, r7
 80028a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028a4:	47c0      	blx	r8
 80028a6:	3001      	adds	r0, #1
 80028a8:	d020      	beq.n	80028ec <_printf_common+0xa8>
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	68e5      	ldr	r5, [r4, #12]
 80028ae:	f003 0306 	and.w	r3, r3, #6
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	bf18      	it	ne
 80028b6:	2500      	movne	r5, #0
 80028b8:	6832      	ldr	r2, [r6, #0]
 80028ba:	f04f 0600 	mov.w	r6, #0
 80028be:	68a3      	ldr	r3, [r4, #8]
 80028c0:	bf08      	it	eq
 80028c2:	1aad      	subeq	r5, r5, r2
 80028c4:	6922      	ldr	r2, [r4, #16]
 80028c6:	bf08      	it	eq
 80028c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028cc:	4293      	cmp	r3, r2
 80028ce:	bfc4      	itt	gt
 80028d0:	1a9b      	subgt	r3, r3, r2
 80028d2:	18ed      	addgt	r5, r5, r3
 80028d4:	341a      	adds	r4, #26
 80028d6:	42b5      	cmp	r5, r6
 80028d8:	d11a      	bne.n	8002910 <_printf_common+0xcc>
 80028da:	2000      	movs	r0, #0
 80028dc:	e008      	b.n	80028f0 <_printf_common+0xac>
 80028de:	2301      	movs	r3, #1
 80028e0:	4652      	mov	r2, sl
 80028e2:	4649      	mov	r1, r9
 80028e4:	4638      	mov	r0, r7
 80028e6:	47c0      	blx	r8
 80028e8:	3001      	adds	r0, #1
 80028ea:	d103      	bne.n	80028f4 <_printf_common+0xb0>
 80028ec:	f04f 30ff 	mov.w	r0, #4294967295
 80028f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028f4:	3501      	adds	r5, #1
 80028f6:	e7c4      	b.n	8002882 <_printf_common+0x3e>
 80028f8:	2030      	movs	r0, #48	; 0x30
 80028fa:	18e1      	adds	r1, r4, r3
 80028fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002906:	4422      	add	r2, r4
 8002908:	3302      	adds	r3, #2
 800290a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800290e:	e7c5      	b.n	800289c <_printf_common+0x58>
 8002910:	2301      	movs	r3, #1
 8002912:	4622      	mov	r2, r4
 8002914:	4649      	mov	r1, r9
 8002916:	4638      	mov	r0, r7
 8002918:	47c0      	blx	r8
 800291a:	3001      	adds	r0, #1
 800291c:	d0e6      	beq.n	80028ec <_printf_common+0xa8>
 800291e:	3601      	adds	r6, #1
 8002920:	e7d9      	b.n	80028d6 <_printf_common+0x92>
	...

08002924 <_printf_i>:
 8002924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002928:	7e0f      	ldrb	r7, [r1, #24]
 800292a:	4691      	mov	r9, r2
 800292c:	2f78      	cmp	r7, #120	; 0x78
 800292e:	4680      	mov	r8, r0
 8002930:	460c      	mov	r4, r1
 8002932:	469a      	mov	sl, r3
 8002934:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002936:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800293a:	d807      	bhi.n	800294c <_printf_i+0x28>
 800293c:	2f62      	cmp	r7, #98	; 0x62
 800293e:	d80a      	bhi.n	8002956 <_printf_i+0x32>
 8002940:	2f00      	cmp	r7, #0
 8002942:	f000 80d9 	beq.w	8002af8 <_printf_i+0x1d4>
 8002946:	2f58      	cmp	r7, #88	; 0x58
 8002948:	f000 80a4 	beq.w	8002a94 <_printf_i+0x170>
 800294c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002954:	e03a      	b.n	80029cc <_printf_i+0xa8>
 8002956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800295a:	2b15      	cmp	r3, #21
 800295c:	d8f6      	bhi.n	800294c <_printf_i+0x28>
 800295e:	a101      	add	r1, pc, #4	; (adr r1, 8002964 <_printf_i+0x40>)
 8002960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002964:	080029bd 	.word	0x080029bd
 8002968:	080029d1 	.word	0x080029d1
 800296c:	0800294d 	.word	0x0800294d
 8002970:	0800294d 	.word	0x0800294d
 8002974:	0800294d 	.word	0x0800294d
 8002978:	0800294d 	.word	0x0800294d
 800297c:	080029d1 	.word	0x080029d1
 8002980:	0800294d 	.word	0x0800294d
 8002984:	0800294d 	.word	0x0800294d
 8002988:	0800294d 	.word	0x0800294d
 800298c:	0800294d 	.word	0x0800294d
 8002990:	08002adf 	.word	0x08002adf
 8002994:	08002a01 	.word	0x08002a01
 8002998:	08002ac1 	.word	0x08002ac1
 800299c:	0800294d 	.word	0x0800294d
 80029a0:	0800294d 	.word	0x0800294d
 80029a4:	08002b01 	.word	0x08002b01
 80029a8:	0800294d 	.word	0x0800294d
 80029ac:	08002a01 	.word	0x08002a01
 80029b0:	0800294d 	.word	0x0800294d
 80029b4:	0800294d 	.word	0x0800294d
 80029b8:	08002ac9 	.word	0x08002ac9
 80029bc:	682b      	ldr	r3, [r5, #0]
 80029be:	1d1a      	adds	r2, r3, #4
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	602a      	str	r2, [r5, #0]
 80029c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0a4      	b.n	8002b1a <_printf_i+0x1f6>
 80029d0:	6820      	ldr	r0, [r4, #0]
 80029d2:	6829      	ldr	r1, [r5, #0]
 80029d4:	0606      	lsls	r6, r0, #24
 80029d6:	f101 0304 	add.w	r3, r1, #4
 80029da:	d50a      	bpl.n	80029f2 <_printf_i+0xce>
 80029dc:	680e      	ldr	r6, [r1, #0]
 80029de:	602b      	str	r3, [r5, #0]
 80029e0:	2e00      	cmp	r6, #0
 80029e2:	da03      	bge.n	80029ec <_printf_i+0xc8>
 80029e4:	232d      	movs	r3, #45	; 0x2d
 80029e6:	4276      	negs	r6, r6
 80029e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029ec:	230a      	movs	r3, #10
 80029ee:	485e      	ldr	r0, [pc, #376]	; (8002b68 <_printf_i+0x244>)
 80029f0:	e019      	b.n	8002a26 <_printf_i+0x102>
 80029f2:	680e      	ldr	r6, [r1, #0]
 80029f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80029f8:	602b      	str	r3, [r5, #0]
 80029fa:	bf18      	it	ne
 80029fc:	b236      	sxthne	r6, r6
 80029fe:	e7ef      	b.n	80029e0 <_printf_i+0xbc>
 8002a00:	682b      	ldr	r3, [r5, #0]
 8002a02:	6820      	ldr	r0, [r4, #0]
 8002a04:	1d19      	adds	r1, r3, #4
 8002a06:	6029      	str	r1, [r5, #0]
 8002a08:	0601      	lsls	r1, r0, #24
 8002a0a:	d501      	bpl.n	8002a10 <_printf_i+0xec>
 8002a0c:	681e      	ldr	r6, [r3, #0]
 8002a0e:	e002      	b.n	8002a16 <_printf_i+0xf2>
 8002a10:	0646      	lsls	r6, r0, #25
 8002a12:	d5fb      	bpl.n	8002a0c <_printf_i+0xe8>
 8002a14:	881e      	ldrh	r6, [r3, #0]
 8002a16:	2f6f      	cmp	r7, #111	; 0x6f
 8002a18:	bf0c      	ite	eq
 8002a1a:	2308      	moveq	r3, #8
 8002a1c:	230a      	movne	r3, #10
 8002a1e:	4852      	ldr	r0, [pc, #328]	; (8002b68 <_printf_i+0x244>)
 8002a20:	2100      	movs	r1, #0
 8002a22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a26:	6865      	ldr	r5, [r4, #4]
 8002a28:	2d00      	cmp	r5, #0
 8002a2a:	bfa8      	it	ge
 8002a2c:	6821      	ldrge	r1, [r4, #0]
 8002a2e:	60a5      	str	r5, [r4, #8]
 8002a30:	bfa4      	itt	ge
 8002a32:	f021 0104 	bicge.w	r1, r1, #4
 8002a36:	6021      	strge	r1, [r4, #0]
 8002a38:	b90e      	cbnz	r6, 8002a3e <_printf_i+0x11a>
 8002a3a:	2d00      	cmp	r5, #0
 8002a3c:	d04d      	beq.n	8002ada <_printf_i+0x1b6>
 8002a3e:	4615      	mov	r5, r2
 8002a40:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a44:	fb03 6711 	mls	r7, r3, r1, r6
 8002a48:	5dc7      	ldrb	r7, [r0, r7]
 8002a4a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a4e:	4637      	mov	r7, r6
 8002a50:	42bb      	cmp	r3, r7
 8002a52:	460e      	mov	r6, r1
 8002a54:	d9f4      	bls.n	8002a40 <_printf_i+0x11c>
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d10b      	bne.n	8002a72 <_printf_i+0x14e>
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	07de      	lsls	r6, r3, #31
 8002a5e:	d508      	bpl.n	8002a72 <_printf_i+0x14e>
 8002a60:	6923      	ldr	r3, [r4, #16]
 8002a62:	6861      	ldr	r1, [r4, #4]
 8002a64:	4299      	cmp	r1, r3
 8002a66:	bfde      	ittt	le
 8002a68:	2330      	movle	r3, #48	; 0x30
 8002a6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a72:	1b52      	subs	r2, r2, r5
 8002a74:	6122      	str	r2, [r4, #16]
 8002a76:	464b      	mov	r3, r9
 8002a78:	4621      	mov	r1, r4
 8002a7a:	4640      	mov	r0, r8
 8002a7c:	f8cd a000 	str.w	sl, [sp]
 8002a80:	aa03      	add	r2, sp, #12
 8002a82:	f7ff fedf 	bl	8002844 <_printf_common>
 8002a86:	3001      	adds	r0, #1
 8002a88:	d14c      	bne.n	8002b24 <_printf_i+0x200>
 8002a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8e:	b004      	add	sp, #16
 8002a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a94:	4834      	ldr	r0, [pc, #208]	; (8002b68 <_printf_i+0x244>)
 8002a96:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002a9a:	6829      	ldr	r1, [r5, #0]
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002aa2:	6029      	str	r1, [r5, #0]
 8002aa4:	061d      	lsls	r5, r3, #24
 8002aa6:	d514      	bpl.n	8002ad2 <_printf_i+0x1ae>
 8002aa8:	07df      	lsls	r7, r3, #31
 8002aaa:	bf44      	itt	mi
 8002aac:	f043 0320 	orrmi.w	r3, r3, #32
 8002ab0:	6023      	strmi	r3, [r4, #0]
 8002ab2:	b91e      	cbnz	r6, 8002abc <_printf_i+0x198>
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	f023 0320 	bic.w	r3, r3, #32
 8002aba:	6023      	str	r3, [r4, #0]
 8002abc:	2310      	movs	r3, #16
 8002abe:	e7af      	b.n	8002a20 <_printf_i+0xfc>
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	f043 0320 	orr.w	r3, r3, #32
 8002ac6:	6023      	str	r3, [r4, #0]
 8002ac8:	2378      	movs	r3, #120	; 0x78
 8002aca:	4828      	ldr	r0, [pc, #160]	; (8002b6c <_printf_i+0x248>)
 8002acc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ad0:	e7e3      	b.n	8002a9a <_printf_i+0x176>
 8002ad2:	0659      	lsls	r1, r3, #25
 8002ad4:	bf48      	it	mi
 8002ad6:	b2b6      	uxthmi	r6, r6
 8002ad8:	e7e6      	b.n	8002aa8 <_printf_i+0x184>
 8002ada:	4615      	mov	r5, r2
 8002adc:	e7bb      	b.n	8002a56 <_printf_i+0x132>
 8002ade:	682b      	ldr	r3, [r5, #0]
 8002ae0:	6826      	ldr	r6, [r4, #0]
 8002ae2:	1d18      	adds	r0, r3, #4
 8002ae4:	6961      	ldr	r1, [r4, #20]
 8002ae6:	6028      	str	r0, [r5, #0]
 8002ae8:	0635      	lsls	r5, r6, #24
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	d501      	bpl.n	8002af2 <_printf_i+0x1ce>
 8002aee:	6019      	str	r1, [r3, #0]
 8002af0:	e002      	b.n	8002af8 <_printf_i+0x1d4>
 8002af2:	0670      	lsls	r0, r6, #25
 8002af4:	d5fb      	bpl.n	8002aee <_printf_i+0x1ca>
 8002af6:	8019      	strh	r1, [r3, #0]
 8002af8:	2300      	movs	r3, #0
 8002afa:	4615      	mov	r5, r2
 8002afc:	6123      	str	r3, [r4, #16]
 8002afe:	e7ba      	b.n	8002a76 <_printf_i+0x152>
 8002b00:	682b      	ldr	r3, [r5, #0]
 8002b02:	2100      	movs	r1, #0
 8002b04:	1d1a      	adds	r2, r3, #4
 8002b06:	602a      	str	r2, [r5, #0]
 8002b08:	681d      	ldr	r5, [r3, #0]
 8002b0a:	6862      	ldr	r2, [r4, #4]
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	f000 fe89 	bl	8003824 <memchr>
 8002b12:	b108      	cbz	r0, 8002b18 <_printf_i+0x1f4>
 8002b14:	1b40      	subs	r0, r0, r5
 8002b16:	6060      	str	r0, [r4, #4]
 8002b18:	6863      	ldr	r3, [r4, #4]
 8002b1a:	6123      	str	r3, [r4, #16]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b22:	e7a8      	b.n	8002a76 <_printf_i+0x152>
 8002b24:	462a      	mov	r2, r5
 8002b26:	4649      	mov	r1, r9
 8002b28:	4640      	mov	r0, r8
 8002b2a:	6923      	ldr	r3, [r4, #16]
 8002b2c:	47d0      	blx	sl
 8002b2e:	3001      	adds	r0, #1
 8002b30:	d0ab      	beq.n	8002a8a <_printf_i+0x166>
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	079b      	lsls	r3, r3, #30
 8002b36:	d413      	bmi.n	8002b60 <_printf_i+0x23c>
 8002b38:	68e0      	ldr	r0, [r4, #12]
 8002b3a:	9b03      	ldr	r3, [sp, #12]
 8002b3c:	4298      	cmp	r0, r3
 8002b3e:	bfb8      	it	lt
 8002b40:	4618      	movlt	r0, r3
 8002b42:	e7a4      	b.n	8002a8e <_printf_i+0x16a>
 8002b44:	2301      	movs	r3, #1
 8002b46:	4632      	mov	r2, r6
 8002b48:	4649      	mov	r1, r9
 8002b4a:	4640      	mov	r0, r8
 8002b4c:	47d0      	blx	sl
 8002b4e:	3001      	adds	r0, #1
 8002b50:	d09b      	beq.n	8002a8a <_printf_i+0x166>
 8002b52:	3501      	adds	r5, #1
 8002b54:	68e3      	ldr	r3, [r4, #12]
 8002b56:	9903      	ldr	r1, [sp, #12]
 8002b58:	1a5b      	subs	r3, r3, r1
 8002b5a:	42ab      	cmp	r3, r5
 8002b5c:	dcf2      	bgt.n	8002b44 <_printf_i+0x220>
 8002b5e:	e7eb      	b.n	8002b38 <_printf_i+0x214>
 8002b60:	2500      	movs	r5, #0
 8002b62:	f104 0619 	add.w	r6, r4, #25
 8002b66:	e7f5      	b.n	8002b54 <_printf_i+0x230>
 8002b68:	08003a25 	.word	0x08003a25
 8002b6c:	08003a36 	.word	0x08003a36

08002b70 <__svfiscanf_r>:
 8002b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b74:	461d      	mov	r5, r3
 8002b76:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8002b78:	4606      	mov	r6, r0
 8002b7a:	07df      	lsls	r7, r3, #31
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	4692      	mov	sl, r2
 8002b80:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8002b84:	d405      	bmi.n	8002b92 <__svfiscanf_r+0x22>
 8002b86:	898b      	ldrh	r3, [r1, #12]
 8002b88:	0598      	lsls	r0, r3, #22
 8002b8a:	d402      	bmi.n	8002b92 <__svfiscanf_r+0x22>
 8002b8c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8002b8e:	f7ff fbb6 	bl	80022fe <__retarget_lock_acquire_recursive>
 8002b92:	2300      	movs	r3, #0
 8002b94:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8002b98:	4ba6      	ldr	r3, [pc, #664]	; (8002e34 <__svfiscanf_r+0x2c4>)
 8002b9a:	f10d 0804 	add.w	r8, sp, #4
 8002b9e:	93a0      	str	r3, [sp, #640]	; 0x280
 8002ba0:	4ba5      	ldr	r3, [pc, #660]	; (8002e38 <__svfiscanf_r+0x2c8>)
 8002ba2:	4fa6      	ldr	r7, [pc, #664]	; (8002e3c <__svfiscanf_r+0x2cc>)
 8002ba4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8002e40 <__svfiscanf_r+0x2d0>
 8002ba8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8002bac:	93a1      	str	r3, [sp, #644]	; 0x284
 8002bae:	9500      	str	r5, [sp, #0]
 8002bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8173 	beq.w	8002ea0 <__svfiscanf_r+0x330>
 8002bba:	5dd9      	ldrb	r1, [r3, r7]
 8002bbc:	f10a 0501 	add.w	r5, sl, #1
 8002bc0:	f011 0108 	ands.w	r1, r1, #8
 8002bc4:	d019      	beq.n	8002bfa <__svfiscanf_r+0x8a>
 8002bc6:	6863      	ldr	r3, [r4, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	dd0f      	ble.n	8002bec <__svfiscanf_r+0x7c>
 8002bcc:	6823      	ldr	r3, [r4, #0]
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	5cba      	ldrb	r2, [r7, r2]
 8002bd2:	0711      	lsls	r1, r2, #28
 8002bd4:	d401      	bmi.n	8002bda <__svfiscanf_r+0x6a>
 8002bd6:	46aa      	mov	sl, r5
 8002bd8:	e7ea      	b.n	8002bb0 <__svfiscanf_r+0x40>
 8002bda:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002bdc:	3301      	adds	r3, #1
 8002bde:	3201      	adds	r2, #1
 8002be0:	9245      	str	r2, [sp, #276]	; 0x114
 8002be2:	6862      	ldr	r2, [r4, #4]
 8002be4:	6023      	str	r3, [r4, #0]
 8002be6:	3a01      	subs	r2, #1
 8002be8:	6062      	str	r2, [r4, #4]
 8002bea:	e7ec      	b.n	8002bc6 <__svfiscanf_r+0x56>
 8002bec:	4621      	mov	r1, r4
 8002bee:	4630      	mov	r0, r6
 8002bf0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002bf2:	4798      	blx	r3
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d0e9      	beq.n	8002bcc <__svfiscanf_r+0x5c>
 8002bf8:	e7ed      	b.n	8002bd6 <__svfiscanf_r+0x66>
 8002bfa:	2b25      	cmp	r3, #37	; 0x25
 8002bfc:	d012      	beq.n	8002c24 <__svfiscanf_r+0xb4>
 8002bfe:	469a      	mov	sl, r3
 8002c00:	6863      	ldr	r3, [r4, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f340 8095 	ble.w	8002d32 <__svfiscanf_r+0x1c2>
 8002c08:	6822      	ldr	r2, [r4, #0]
 8002c0a:	7813      	ldrb	r3, [r2, #0]
 8002c0c:	4553      	cmp	r3, sl
 8002c0e:	f040 8147 	bne.w	8002ea0 <__svfiscanf_r+0x330>
 8002c12:	6863      	ldr	r3, [r4, #4]
 8002c14:	3201      	adds	r2, #1
 8002c16:	3b01      	subs	r3, #1
 8002c18:	6063      	str	r3, [r4, #4]
 8002c1a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8002c1c:	6022      	str	r2, [r4, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	9345      	str	r3, [sp, #276]	; 0x114
 8002c22:	e7d8      	b.n	8002bd6 <__svfiscanf_r+0x66>
 8002c24:	9141      	str	r1, [sp, #260]	; 0x104
 8002c26:	9143      	str	r1, [sp, #268]	; 0x10c
 8002c28:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8002c2c:	220a      	movs	r2, #10
 8002c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8002c30:	bf02      	ittt	eq
 8002c32:	2310      	moveq	r3, #16
 8002c34:	f10a 0502 	addeq.w	r5, sl, #2
 8002c38:	9341      	streq	r3, [sp, #260]	; 0x104
 8002c3a:	46aa      	mov	sl, r5
 8002c3c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8002c40:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002c44:	2b09      	cmp	r3, #9
 8002c46:	d91e      	bls.n	8002c86 <__svfiscanf_r+0x116>
 8002c48:	2203      	movs	r2, #3
 8002c4a:	487d      	ldr	r0, [pc, #500]	; (8002e40 <__svfiscanf_r+0x2d0>)
 8002c4c:	f000 fdea 	bl	8003824 <memchr>
 8002c50:	b140      	cbz	r0, 8002c64 <__svfiscanf_r+0xf4>
 8002c52:	2301      	movs	r3, #1
 8002c54:	4655      	mov	r5, sl
 8002c56:	eba0 0009 	sub.w	r0, r0, r9
 8002c5a:	fa03 f000 	lsl.w	r0, r3, r0
 8002c5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002c60:	4318      	orrs	r0, r3
 8002c62:	9041      	str	r0, [sp, #260]	; 0x104
 8002c64:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c68:	2b78      	cmp	r3, #120	; 0x78
 8002c6a:	d807      	bhi.n	8002c7c <__svfiscanf_r+0x10c>
 8002c6c:	2b57      	cmp	r3, #87	; 0x57
 8002c6e:	d811      	bhi.n	8002c94 <__svfiscanf_r+0x124>
 8002c70:	2b25      	cmp	r3, #37	; 0x25
 8002c72:	d0c4      	beq.n	8002bfe <__svfiscanf_r+0x8e>
 8002c74:	d858      	bhi.n	8002d28 <__svfiscanf_r+0x1b8>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80c8 	beq.w	8002e0c <__svfiscanf_r+0x29c>
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	9347      	str	r3, [sp, #284]	; 0x11c
 8002c80:	230a      	movs	r3, #10
 8002c82:	9342      	str	r3, [sp, #264]	; 0x108
 8002c84:	e07c      	b.n	8002d80 <__svfiscanf_r+0x210>
 8002c86:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002c88:	4655      	mov	r5, sl
 8002c8a:	fb02 1103 	mla	r1, r2, r3, r1
 8002c8e:	3930      	subs	r1, #48	; 0x30
 8002c90:	9143      	str	r1, [sp, #268]	; 0x10c
 8002c92:	e7d2      	b.n	8002c3a <__svfiscanf_r+0xca>
 8002c94:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8002c98:	2a20      	cmp	r2, #32
 8002c9a:	d8ef      	bhi.n	8002c7c <__svfiscanf_r+0x10c>
 8002c9c:	a101      	add	r1, pc, #4	; (adr r1, 8002ca4 <__svfiscanf_r+0x134>)
 8002c9e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002d6b 	.word	0x08002d6b
 8002ca8:	08002c7d 	.word	0x08002c7d
 8002cac:	08002c7d 	.word	0x08002c7d
 8002cb0:	08002dc9 	.word	0x08002dc9
 8002cb4:	08002c7d 	.word	0x08002c7d
 8002cb8:	08002c7d 	.word	0x08002c7d
 8002cbc:	08002c7d 	.word	0x08002c7d
 8002cc0:	08002c7d 	.word	0x08002c7d
 8002cc4:	08002c7d 	.word	0x08002c7d
 8002cc8:	08002c7d 	.word	0x08002c7d
 8002ccc:	08002c7d 	.word	0x08002c7d
 8002cd0:	08002ddf 	.word	0x08002ddf
 8002cd4:	08002db5 	.word	0x08002db5
 8002cd8:	08002d2f 	.word	0x08002d2f
 8002cdc:	08002d2f 	.word	0x08002d2f
 8002ce0:	08002d2f 	.word	0x08002d2f
 8002ce4:	08002c7d 	.word	0x08002c7d
 8002ce8:	08002db9 	.word	0x08002db9
 8002cec:	08002c7d 	.word	0x08002c7d
 8002cf0:	08002c7d 	.word	0x08002c7d
 8002cf4:	08002c7d 	.word	0x08002c7d
 8002cf8:	08002c7d 	.word	0x08002c7d
 8002cfc:	08002def 	.word	0x08002def
 8002d00:	08002dc1 	.word	0x08002dc1
 8002d04:	08002d63 	.word	0x08002d63
 8002d08:	08002c7d 	.word	0x08002c7d
 8002d0c:	08002c7d 	.word	0x08002c7d
 8002d10:	08002deb 	.word	0x08002deb
 8002d14:	08002c7d 	.word	0x08002c7d
 8002d18:	08002db5 	.word	0x08002db5
 8002d1c:	08002c7d 	.word	0x08002c7d
 8002d20:	08002c7d 	.word	0x08002c7d
 8002d24:	08002d6b 	.word	0x08002d6b
 8002d28:	3b45      	subs	r3, #69	; 0x45
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d8a6      	bhi.n	8002c7c <__svfiscanf_r+0x10c>
 8002d2e:	2305      	movs	r3, #5
 8002d30:	e025      	b.n	8002d7e <__svfiscanf_r+0x20e>
 8002d32:	4621      	mov	r1, r4
 8002d34:	4630      	mov	r0, r6
 8002d36:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002d38:	4798      	blx	r3
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	f43f af64 	beq.w	8002c08 <__svfiscanf_r+0x98>
 8002d40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d42:	07da      	lsls	r2, r3, #31
 8002d44:	f140 80a4 	bpl.w	8002e90 <__svfiscanf_r+0x320>
 8002d48:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	d067      	beq.n	8002e1e <__svfiscanf_r+0x2ae>
 8002d4e:	89a3      	ldrh	r3, [r4, #12]
 8002d50:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d54:	bf18      	it	ne
 8002d56:	f04f 30ff 	movne.w	r0, #4294967295
 8002d5a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8002d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d62:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002d64:	f042 0220 	orr.w	r2, r2, #32
 8002d68:	9241      	str	r2, [sp, #260]	; 0x104
 8002d6a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d70:	9241      	str	r2, [sp, #260]	; 0x104
 8002d72:	2210      	movs	r2, #16
 8002d74:	2b6f      	cmp	r3, #111	; 0x6f
 8002d76:	bf34      	ite	cc
 8002d78:	2303      	movcc	r3, #3
 8002d7a:	2304      	movcs	r3, #4
 8002d7c:	9242      	str	r2, [sp, #264]	; 0x108
 8002d7e:	9347      	str	r3, [sp, #284]	; 0x11c
 8002d80:	6863      	ldr	r3, [r4, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	dd4e      	ble.n	8002e24 <__svfiscanf_r+0x2b4>
 8002d86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002d88:	065b      	lsls	r3, r3, #25
 8002d8a:	d404      	bmi.n	8002d96 <__svfiscanf_r+0x226>
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	781a      	ldrb	r2, [r3, #0]
 8002d90:	5cba      	ldrb	r2, [r7, r2]
 8002d92:	0710      	lsls	r0, r2, #28
 8002d94:	d456      	bmi.n	8002e44 <__svfiscanf_r+0x2d4>
 8002d96:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	dc65      	bgt.n	8002e68 <__svfiscanf_r+0x2f8>
 8002d9c:	466b      	mov	r3, sp
 8002d9e:	4622      	mov	r2, r4
 8002da0:	4630      	mov	r0, r6
 8002da2:	a941      	add	r1, sp, #260	; 0x104
 8002da4:	f000 f8b2 	bl	8002f0c <_scanf_chars>
 8002da8:	2801      	cmp	r0, #1
 8002daa:	d079      	beq.n	8002ea0 <__svfiscanf_r+0x330>
 8002dac:	2802      	cmp	r0, #2
 8002dae:	f47f af12 	bne.w	8002bd6 <__svfiscanf_r+0x66>
 8002db2:	e7c5      	b.n	8002d40 <__svfiscanf_r+0x1d0>
 8002db4:	220a      	movs	r2, #10
 8002db6:	e7dd      	b.n	8002d74 <__svfiscanf_r+0x204>
 8002db8:	2300      	movs	r3, #0
 8002dba:	9342      	str	r3, [sp, #264]	; 0x108
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e7de      	b.n	8002d7e <__svfiscanf_r+0x20e>
 8002dc0:	2308      	movs	r3, #8
 8002dc2:	9342      	str	r3, [sp, #264]	; 0x108
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	e7da      	b.n	8002d7e <__svfiscanf_r+0x20e>
 8002dc8:	4629      	mov	r1, r5
 8002dca:	4640      	mov	r0, r8
 8002dcc:	f000 fa96 	bl	80032fc <__sccl>
 8002dd0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002dd2:	4605      	mov	r5, r0
 8002dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd8:	9341      	str	r3, [sp, #260]	; 0x104
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e7cf      	b.n	8002d7e <__svfiscanf_r+0x20e>
 8002dde:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002de4:	9341      	str	r3, [sp, #260]	; 0x104
 8002de6:	2300      	movs	r3, #0
 8002de8:	e7c9      	b.n	8002d7e <__svfiscanf_r+0x20e>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e7c7      	b.n	8002d7e <__svfiscanf_r+0x20e>
 8002dee:	9841      	ldr	r0, [sp, #260]	; 0x104
 8002df0:	06c3      	lsls	r3, r0, #27
 8002df2:	f53f aef0 	bmi.w	8002bd6 <__svfiscanf_r+0x66>
 8002df6:	9b00      	ldr	r3, [sp, #0]
 8002df8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002dfa:	1d19      	adds	r1, r3, #4
 8002dfc:	9100      	str	r1, [sp, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f010 0f01 	tst.w	r0, #1
 8002e04:	bf14      	ite	ne
 8002e06:	801a      	strhne	r2, [r3, #0]
 8002e08:	601a      	streq	r2, [r3, #0]
 8002e0a:	e6e4      	b.n	8002bd6 <__svfiscanf_r+0x66>
 8002e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e0e:	07d8      	lsls	r0, r3, #31
 8002e10:	d405      	bmi.n	8002e1e <__svfiscanf_r+0x2ae>
 8002e12:	89a3      	ldrh	r3, [r4, #12]
 8002e14:	0599      	lsls	r1, r3, #22
 8002e16:	d402      	bmi.n	8002e1e <__svfiscanf_r+0x2ae>
 8002e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e1a:	f7ff fa71 	bl	8002300 <__retarget_lock_release_recursive>
 8002e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e22:	e79a      	b.n	8002d5a <__svfiscanf_r+0x1ea>
 8002e24:	4621      	mov	r1, r4
 8002e26:	4630      	mov	r0, r6
 8002e28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002e2a:	4798      	blx	r3
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	d0aa      	beq.n	8002d86 <__svfiscanf_r+0x216>
 8002e30:	e786      	b.n	8002d40 <__svfiscanf_r+0x1d0>
 8002e32:	bf00      	nop
 8002e34:	08003649 	.word	0x08003649
 8002e38:	080031c5 	.word	0x080031c5
 8002e3c:	08003a63 	.word	0x08003a63
 8002e40:	08003a1a 	.word	0x08003a1a
 8002e44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002e46:	3201      	adds	r2, #1
 8002e48:	9245      	str	r2, [sp, #276]	; 0x114
 8002e4a:	6862      	ldr	r2, [r4, #4]
 8002e4c:	3a01      	subs	r2, #1
 8002e4e:	2a00      	cmp	r2, #0
 8002e50:	6062      	str	r2, [r4, #4]
 8002e52:	dd02      	ble.n	8002e5a <__svfiscanf_r+0x2ea>
 8002e54:	3301      	adds	r3, #1
 8002e56:	6023      	str	r3, [r4, #0]
 8002e58:	e798      	b.n	8002d8c <__svfiscanf_r+0x21c>
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	4630      	mov	r0, r6
 8002e5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002e60:	4798      	blx	r3
 8002e62:	2800      	cmp	r0, #0
 8002e64:	d092      	beq.n	8002d8c <__svfiscanf_r+0x21c>
 8002e66:	e76b      	b.n	8002d40 <__svfiscanf_r+0x1d0>
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	dc06      	bgt.n	8002e7a <__svfiscanf_r+0x30a>
 8002e6c:	466b      	mov	r3, sp
 8002e6e:	4622      	mov	r2, r4
 8002e70:	4630      	mov	r0, r6
 8002e72:	a941      	add	r1, sp, #260	; 0x104
 8002e74:	f000 f8a4 	bl	8002fc0 <_scanf_i>
 8002e78:	e796      	b.n	8002da8 <__svfiscanf_r+0x238>
 8002e7a:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <__svfiscanf_r+0x348>)
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f43f aeaa 	beq.w	8002bd6 <__svfiscanf_r+0x66>
 8002e82:	466b      	mov	r3, sp
 8002e84:	4622      	mov	r2, r4
 8002e86:	4630      	mov	r0, r6
 8002e88:	a941      	add	r1, sp, #260	; 0x104
 8002e8a:	f3af 8000 	nop.w
 8002e8e:	e78b      	b.n	8002da8 <__svfiscanf_r+0x238>
 8002e90:	89a3      	ldrh	r3, [r4, #12]
 8002e92:	0599      	lsls	r1, r3, #22
 8002e94:	f53f af58 	bmi.w	8002d48 <__svfiscanf_r+0x1d8>
 8002e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e9a:	f7ff fa31 	bl	8002300 <__retarget_lock_release_recursive>
 8002e9e:	e753      	b.n	8002d48 <__svfiscanf_r+0x1d8>
 8002ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ea2:	07da      	lsls	r2, r3, #31
 8002ea4:	d405      	bmi.n	8002eb2 <__svfiscanf_r+0x342>
 8002ea6:	89a3      	ldrh	r3, [r4, #12]
 8002ea8:	059b      	lsls	r3, r3, #22
 8002eaa:	d402      	bmi.n	8002eb2 <__svfiscanf_r+0x342>
 8002eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eae:	f7ff fa27 	bl	8002300 <__retarget_lock_release_recursive>
 8002eb2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002eb4:	e751      	b.n	8002d5a <__svfiscanf_r+0x1ea>
 8002eb6:	bf00      	nop
 8002eb8:	00000000 	.word	0x00000000

08002ebc <_vfiscanf_r>:
 8002ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ec0:	460c      	mov	r4, r1
 8002ec2:	4616      	mov	r6, r2
 8002ec4:	461f      	mov	r7, r3
 8002ec6:	4605      	mov	r5, r0
 8002ec8:	b118      	cbz	r0, 8002ed2 <_vfiscanf_r+0x16>
 8002eca:	6983      	ldr	r3, [r0, #24]
 8002ecc:	b90b      	cbnz	r3, 8002ed2 <_vfiscanf_r+0x16>
 8002ece:	f7ff f95b 	bl	8002188 <__sinit>
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <_vfiscanf_r+0x44>)
 8002ed4:	429c      	cmp	r4, r3
 8002ed6:	d108      	bne.n	8002eea <_vfiscanf_r+0x2e>
 8002ed8:	686c      	ldr	r4, [r5, #4]
 8002eda:	463b      	mov	r3, r7
 8002edc:	4632      	mov	r2, r6
 8002ede:	4621      	mov	r1, r4
 8002ee0:	4628      	mov	r0, r5
 8002ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee6:	f7ff be43 	b.w	8002b70 <__svfiscanf_r>
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <_vfiscanf_r+0x48>)
 8002eec:	429c      	cmp	r4, r3
 8002eee:	d101      	bne.n	8002ef4 <_vfiscanf_r+0x38>
 8002ef0:	68ac      	ldr	r4, [r5, #8]
 8002ef2:	e7f2      	b.n	8002eda <_vfiscanf_r+0x1e>
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <_vfiscanf_r+0x4c>)
 8002ef6:	429c      	cmp	r4, r3
 8002ef8:	bf08      	it	eq
 8002efa:	68ec      	ldreq	r4, [r5, #12]
 8002efc:	e7ed      	b.n	8002eda <_vfiscanf_r+0x1e>
 8002efe:	bf00      	nop
 8002f00:	080039d4 	.word	0x080039d4
 8002f04:	080039f4 	.word	0x080039f4
 8002f08:	080039b4 	.word	0x080039b4

08002f0c <_scanf_chars>:
 8002f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f10:	4615      	mov	r5, r2
 8002f12:	688a      	ldr	r2, [r1, #8]
 8002f14:	4680      	mov	r8, r0
 8002f16:	460c      	mov	r4, r1
 8002f18:	b932      	cbnz	r2, 8002f28 <_scanf_chars+0x1c>
 8002f1a:	698a      	ldr	r2, [r1, #24]
 8002f1c:	2a00      	cmp	r2, #0
 8002f1e:	bf0c      	ite	eq
 8002f20:	2201      	moveq	r2, #1
 8002f22:	f04f 32ff 	movne.w	r2, #4294967295
 8002f26:	608a      	str	r2, [r1, #8]
 8002f28:	2700      	movs	r7, #0
 8002f2a:	6822      	ldr	r2, [r4, #0]
 8002f2c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002fbc <_scanf_chars+0xb0>
 8002f30:	06d1      	lsls	r1, r2, #27
 8002f32:	bf5f      	itttt	pl
 8002f34:	681a      	ldrpl	r2, [r3, #0]
 8002f36:	1d11      	addpl	r1, r2, #4
 8002f38:	6019      	strpl	r1, [r3, #0]
 8002f3a:	6816      	ldrpl	r6, [r2, #0]
 8002f3c:	69a0      	ldr	r0, [r4, #24]
 8002f3e:	b188      	cbz	r0, 8002f64 <_scanf_chars+0x58>
 8002f40:	2801      	cmp	r0, #1
 8002f42:	d107      	bne.n	8002f54 <_scanf_chars+0x48>
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	6963      	ldr	r3, [r4, #20]
 8002f4a:	5c9b      	ldrb	r3, [r3, r2]
 8002f4c:	b953      	cbnz	r3, 8002f64 <_scanf_chars+0x58>
 8002f4e:	2f00      	cmp	r7, #0
 8002f50:	d031      	beq.n	8002fb6 <_scanf_chars+0xaa>
 8002f52:	e022      	b.n	8002f9a <_scanf_chars+0x8e>
 8002f54:	2802      	cmp	r0, #2
 8002f56:	d120      	bne.n	8002f9a <_scanf_chars+0x8e>
 8002f58:	682b      	ldr	r3, [r5, #0]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8002f60:	071b      	lsls	r3, r3, #28
 8002f62:	d41a      	bmi.n	8002f9a <_scanf_chars+0x8e>
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	3701      	adds	r7, #1
 8002f68:	06da      	lsls	r2, r3, #27
 8002f6a:	bf5e      	ittt	pl
 8002f6c:	682b      	ldrpl	r3, [r5, #0]
 8002f6e:	781b      	ldrbpl	r3, [r3, #0]
 8002f70:	f806 3b01 	strbpl.w	r3, [r6], #1
 8002f74:	682a      	ldr	r2, [r5, #0]
 8002f76:	686b      	ldr	r3, [r5, #4]
 8002f78:	3201      	adds	r2, #1
 8002f7a:	602a      	str	r2, [r5, #0]
 8002f7c:	68a2      	ldr	r2, [r4, #8]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	3a01      	subs	r2, #1
 8002f82:	606b      	str	r3, [r5, #4]
 8002f84:	60a2      	str	r2, [r4, #8]
 8002f86:	b142      	cbz	r2, 8002f9a <_scanf_chars+0x8e>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	dcd7      	bgt.n	8002f3c <_scanf_chars+0x30>
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	4640      	mov	r0, r8
 8002f90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002f94:	4798      	blx	r3
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d0d0      	beq.n	8002f3c <_scanf_chars+0x30>
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	f013 0310 	ands.w	r3, r3, #16
 8002fa0:	d105      	bne.n	8002fae <_scanf_chars+0xa2>
 8002fa2:	68e2      	ldr	r2, [r4, #12]
 8002fa4:	3201      	adds	r2, #1
 8002fa6:	60e2      	str	r2, [r4, #12]
 8002fa8:	69a2      	ldr	r2, [r4, #24]
 8002faa:	b102      	cbz	r2, 8002fae <_scanf_chars+0xa2>
 8002fac:	7033      	strb	r3, [r6, #0]
 8002fae:	2000      	movs	r0, #0
 8002fb0:	6923      	ldr	r3, [r4, #16]
 8002fb2:	443b      	add	r3, r7
 8002fb4:	6123      	str	r3, [r4, #16]
 8002fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fba:	bf00      	nop
 8002fbc:	08003a63 	.word	0x08003a63

08002fc0 <_scanf_i>:
 8002fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc4:	460c      	mov	r4, r1
 8002fc6:	4698      	mov	r8, r3
 8002fc8:	4b75      	ldr	r3, [pc, #468]	; (80031a0 <_scanf_i+0x1e0>)
 8002fca:	b087      	sub	sp, #28
 8002fcc:	4682      	mov	sl, r0
 8002fce:	4616      	mov	r6, r2
 8002fd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002fd4:	ab03      	add	r3, sp, #12
 8002fd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002fda:	4b72      	ldr	r3, [pc, #456]	; (80031a4 <_scanf_i+0x1e4>)
 8002fdc:	69a1      	ldr	r1, [r4, #24]
 8002fde:	4a72      	ldr	r2, [pc, #456]	; (80031a8 <_scanf_i+0x1e8>)
 8002fe0:	4627      	mov	r7, r4
 8002fe2:	2903      	cmp	r1, #3
 8002fe4:	bf18      	it	ne
 8002fe6:	461a      	movne	r2, r3
 8002fe8:	68a3      	ldr	r3, [r4, #8]
 8002fea:	9201      	str	r2, [sp, #4]
 8002fec:	1e5a      	subs	r2, r3, #1
 8002fee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002ff2:	bf81      	itttt	hi
 8002ff4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002ff8:	eb03 0905 	addhi.w	r9, r3, r5
 8002ffc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003000:	60a3      	strhi	r3, [r4, #8]
 8003002:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003006:	bf98      	it	ls
 8003008:	f04f 0900 	movls.w	r9, #0
 800300c:	463d      	mov	r5, r7
 800300e:	f04f 0b00 	mov.w	fp, #0
 8003012:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003016:	6023      	str	r3, [r4, #0]
 8003018:	6831      	ldr	r1, [r6, #0]
 800301a:	ab03      	add	r3, sp, #12
 800301c:	2202      	movs	r2, #2
 800301e:	7809      	ldrb	r1, [r1, #0]
 8003020:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003024:	f000 fbfe 	bl	8003824 <memchr>
 8003028:	b328      	cbz	r0, 8003076 <_scanf_i+0xb6>
 800302a:	f1bb 0f01 	cmp.w	fp, #1
 800302e:	d159      	bne.n	80030e4 <_scanf_i+0x124>
 8003030:	6862      	ldr	r2, [r4, #4]
 8003032:	b92a      	cbnz	r2, 8003040 <_scanf_i+0x80>
 8003034:	2308      	movs	r3, #8
 8003036:	6822      	ldr	r2, [r4, #0]
 8003038:	6063      	str	r3, [r4, #4]
 800303a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303e:	6022      	str	r2, [r4, #0]
 8003040:	6822      	ldr	r2, [r4, #0]
 8003042:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003046:	6022      	str	r2, [r4, #0]
 8003048:	68a2      	ldr	r2, [r4, #8]
 800304a:	1e51      	subs	r1, r2, #1
 800304c:	60a1      	str	r1, [r4, #8]
 800304e:	b192      	cbz	r2, 8003076 <_scanf_i+0xb6>
 8003050:	6832      	ldr	r2, [r6, #0]
 8003052:	1c51      	adds	r1, r2, #1
 8003054:	6031      	str	r1, [r6, #0]
 8003056:	7812      	ldrb	r2, [r2, #0]
 8003058:	f805 2b01 	strb.w	r2, [r5], #1
 800305c:	6872      	ldr	r2, [r6, #4]
 800305e:	3a01      	subs	r2, #1
 8003060:	2a00      	cmp	r2, #0
 8003062:	6072      	str	r2, [r6, #4]
 8003064:	dc07      	bgt.n	8003076 <_scanf_i+0xb6>
 8003066:	4631      	mov	r1, r6
 8003068:	4650      	mov	r0, sl
 800306a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800306e:	4790      	blx	r2
 8003070:	2800      	cmp	r0, #0
 8003072:	f040 8085 	bne.w	8003180 <_scanf_i+0x1c0>
 8003076:	f10b 0b01 	add.w	fp, fp, #1
 800307a:	f1bb 0f03 	cmp.w	fp, #3
 800307e:	d1cb      	bne.n	8003018 <_scanf_i+0x58>
 8003080:	6863      	ldr	r3, [r4, #4]
 8003082:	b90b      	cbnz	r3, 8003088 <_scanf_i+0xc8>
 8003084:	230a      	movs	r3, #10
 8003086:	6063      	str	r3, [r4, #4]
 8003088:	6863      	ldr	r3, [r4, #4]
 800308a:	4948      	ldr	r1, [pc, #288]	; (80031ac <_scanf_i+0x1ec>)
 800308c:	6960      	ldr	r0, [r4, #20]
 800308e:	1ac9      	subs	r1, r1, r3
 8003090:	f000 f934 	bl	80032fc <__sccl>
 8003094:	f04f 0b00 	mov.w	fp, #0
 8003098:	68a3      	ldr	r3, [r4, #8]
 800309a:	6822      	ldr	r2, [r4, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d03d      	beq.n	800311c <_scanf_i+0x15c>
 80030a0:	6831      	ldr	r1, [r6, #0]
 80030a2:	6960      	ldr	r0, [r4, #20]
 80030a4:	f891 c000 	ldrb.w	ip, [r1]
 80030a8:	f810 000c 	ldrb.w	r0, [r0, ip]
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d035      	beq.n	800311c <_scanf_i+0x15c>
 80030b0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80030b4:	d124      	bne.n	8003100 <_scanf_i+0x140>
 80030b6:	0510      	lsls	r0, r2, #20
 80030b8:	d522      	bpl.n	8003100 <_scanf_i+0x140>
 80030ba:	f10b 0b01 	add.w	fp, fp, #1
 80030be:	f1b9 0f00 	cmp.w	r9, #0
 80030c2:	d003      	beq.n	80030cc <_scanf_i+0x10c>
 80030c4:	3301      	adds	r3, #1
 80030c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80030ca:	60a3      	str	r3, [r4, #8]
 80030cc:	6873      	ldr	r3, [r6, #4]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	6073      	str	r3, [r6, #4]
 80030d4:	dd1b      	ble.n	800310e <_scanf_i+0x14e>
 80030d6:	6833      	ldr	r3, [r6, #0]
 80030d8:	3301      	adds	r3, #1
 80030da:	6033      	str	r3, [r6, #0]
 80030dc:	68a3      	ldr	r3, [r4, #8]
 80030de:	3b01      	subs	r3, #1
 80030e0:	60a3      	str	r3, [r4, #8]
 80030e2:	e7d9      	b.n	8003098 <_scanf_i+0xd8>
 80030e4:	f1bb 0f02 	cmp.w	fp, #2
 80030e8:	d1ae      	bne.n	8003048 <_scanf_i+0x88>
 80030ea:	6822      	ldr	r2, [r4, #0]
 80030ec:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80030f0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80030f4:	d1bf      	bne.n	8003076 <_scanf_i+0xb6>
 80030f6:	2310      	movs	r3, #16
 80030f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030fc:	6063      	str	r3, [r4, #4]
 80030fe:	e7a2      	b.n	8003046 <_scanf_i+0x86>
 8003100:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003104:	6022      	str	r2, [r4, #0]
 8003106:	780b      	ldrb	r3, [r1, #0]
 8003108:	f805 3b01 	strb.w	r3, [r5], #1
 800310c:	e7de      	b.n	80030cc <_scanf_i+0x10c>
 800310e:	4631      	mov	r1, r6
 8003110:	4650      	mov	r0, sl
 8003112:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003116:	4798      	blx	r3
 8003118:	2800      	cmp	r0, #0
 800311a:	d0df      	beq.n	80030dc <_scanf_i+0x11c>
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	05db      	lsls	r3, r3, #23
 8003120:	d50d      	bpl.n	800313e <_scanf_i+0x17e>
 8003122:	42bd      	cmp	r5, r7
 8003124:	d909      	bls.n	800313a <_scanf_i+0x17a>
 8003126:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800312a:	4632      	mov	r2, r6
 800312c:	4650      	mov	r0, sl
 800312e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003132:	f105 39ff 	add.w	r9, r5, #4294967295
 8003136:	4798      	blx	r3
 8003138:	464d      	mov	r5, r9
 800313a:	42bd      	cmp	r5, r7
 800313c:	d02d      	beq.n	800319a <_scanf_i+0x1da>
 800313e:	6822      	ldr	r2, [r4, #0]
 8003140:	f012 0210 	ands.w	r2, r2, #16
 8003144:	d113      	bne.n	800316e <_scanf_i+0x1ae>
 8003146:	702a      	strb	r2, [r5, #0]
 8003148:	4639      	mov	r1, r7
 800314a:	6863      	ldr	r3, [r4, #4]
 800314c:	4650      	mov	r0, sl
 800314e:	9e01      	ldr	r6, [sp, #4]
 8003150:	47b0      	blx	r6
 8003152:	6821      	ldr	r1, [r4, #0]
 8003154:	f8d8 3000 	ldr.w	r3, [r8]
 8003158:	f011 0f20 	tst.w	r1, #32
 800315c:	d013      	beq.n	8003186 <_scanf_i+0x1c6>
 800315e:	1d1a      	adds	r2, r3, #4
 8003160:	f8c8 2000 	str.w	r2, [r8]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6018      	str	r0, [r3, #0]
 8003168:	68e3      	ldr	r3, [r4, #12]
 800316a:	3301      	adds	r3, #1
 800316c:	60e3      	str	r3, [r4, #12]
 800316e:	2000      	movs	r0, #0
 8003170:	1bed      	subs	r5, r5, r7
 8003172:	44ab      	add	fp, r5
 8003174:	6925      	ldr	r5, [r4, #16]
 8003176:	445d      	add	r5, fp
 8003178:	6125      	str	r5, [r4, #16]
 800317a:	b007      	add	sp, #28
 800317c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003180:	f04f 0b00 	mov.w	fp, #0
 8003184:	e7ca      	b.n	800311c <_scanf_i+0x15c>
 8003186:	1d1a      	adds	r2, r3, #4
 8003188:	f8c8 2000 	str.w	r2, [r8]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f011 0f01 	tst.w	r1, #1
 8003192:	bf14      	ite	ne
 8003194:	8018      	strhne	r0, [r3, #0]
 8003196:	6018      	streq	r0, [r3, #0]
 8003198:	e7e6      	b.n	8003168 <_scanf_i+0x1a8>
 800319a:	2001      	movs	r0, #1
 800319c:	e7ed      	b.n	800317a <_scanf_i+0x1ba>
 800319e:	bf00      	nop
 80031a0:	0800398c 	.word	0x0800398c
 80031a4:	080035d5 	.word	0x080035d5
 80031a8:	080034ed 	.word	0x080034ed
 80031ac:	08003a60 	.word	0x08003a60

080031b0 <lflush>:
 80031b0:	8983      	ldrh	r3, [r0, #12]
 80031b2:	f003 0309 	and.w	r3, r3, #9
 80031b6:	2b09      	cmp	r3, #9
 80031b8:	d101      	bne.n	80031be <lflush+0xe>
 80031ba:	f7fe bf7b 	b.w	80020b4 <fflush>
 80031be:	2000      	movs	r0, #0
 80031c0:	4770      	bx	lr
	...

080031c4 <__srefill_r>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	460c      	mov	r4, r1
 80031c8:	4605      	mov	r5, r0
 80031ca:	b118      	cbz	r0, 80031d4 <__srefill_r+0x10>
 80031cc:	6983      	ldr	r3, [r0, #24]
 80031ce:	b90b      	cbnz	r3, 80031d4 <__srefill_r+0x10>
 80031d0:	f7fe ffda 	bl	8002188 <__sinit>
 80031d4:	4b3c      	ldr	r3, [pc, #240]	; (80032c8 <__srefill_r+0x104>)
 80031d6:	429c      	cmp	r4, r3
 80031d8:	d10a      	bne.n	80031f0 <__srefill_r+0x2c>
 80031da:	686c      	ldr	r4, [r5, #4]
 80031dc:	2300      	movs	r3, #0
 80031de:	6063      	str	r3, [r4, #4]
 80031e0:	89a3      	ldrh	r3, [r4, #12]
 80031e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031e6:	069e      	lsls	r6, r3, #26
 80031e8:	d50c      	bpl.n	8003204 <__srefill_r+0x40>
 80031ea:	f04f 30ff 	mov.w	r0, #4294967295
 80031ee:	e067      	b.n	80032c0 <__srefill_r+0xfc>
 80031f0:	4b36      	ldr	r3, [pc, #216]	; (80032cc <__srefill_r+0x108>)
 80031f2:	429c      	cmp	r4, r3
 80031f4:	d101      	bne.n	80031fa <__srefill_r+0x36>
 80031f6:	68ac      	ldr	r4, [r5, #8]
 80031f8:	e7f0      	b.n	80031dc <__srefill_r+0x18>
 80031fa:	4b35      	ldr	r3, [pc, #212]	; (80032d0 <__srefill_r+0x10c>)
 80031fc:	429c      	cmp	r4, r3
 80031fe:	bf08      	it	eq
 8003200:	68ec      	ldreq	r4, [r5, #12]
 8003202:	e7eb      	b.n	80031dc <__srefill_r+0x18>
 8003204:	0758      	lsls	r0, r3, #29
 8003206:	d449      	bmi.n	800329c <__srefill_r+0xd8>
 8003208:	06d9      	lsls	r1, r3, #27
 800320a:	d405      	bmi.n	8003218 <__srefill_r+0x54>
 800320c:	2309      	movs	r3, #9
 800320e:	602b      	str	r3, [r5, #0]
 8003210:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003214:	81a3      	strh	r3, [r4, #12]
 8003216:	e7e8      	b.n	80031ea <__srefill_r+0x26>
 8003218:	071a      	lsls	r2, r3, #28
 800321a:	d50b      	bpl.n	8003234 <__srefill_r+0x70>
 800321c:	4621      	mov	r1, r4
 800321e:	4628      	mov	r0, r5
 8003220:	f7fe ff0c 	bl	800203c <_fflush_r>
 8003224:	2800      	cmp	r0, #0
 8003226:	d1e0      	bne.n	80031ea <__srefill_r+0x26>
 8003228:	89a3      	ldrh	r3, [r4, #12]
 800322a:	60a0      	str	r0, [r4, #8]
 800322c:	f023 0308 	bic.w	r3, r3, #8
 8003230:	81a3      	strh	r3, [r4, #12]
 8003232:	61a0      	str	r0, [r4, #24]
 8003234:	89a3      	ldrh	r3, [r4, #12]
 8003236:	f043 0304 	orr.w	r3, r3, #4
 800323a:	81a3      	strh	r3, [r4, #12]
 800323c:	6923      	ldr	r3, [r4, #16]
 800323e:	b91b      	cbnz	r3, 8003248 <__srefill_r+0x84>
 8003240:	4621      	mov	r1, r4
 8003242:	4628      	mov	r0, r5
 8003244:	f7ff f882 	bl	800234c <__smakebuf_r>
 8003248:	89a6      	ldrh	r6, [r4, #12]
 800324a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800324e:	07b3      	lsls	r3, r6, #30
 8003250:	d00f      	beq.n	8003272 <__srefill_r+0xae>
 8003252:	2301      	movs	r3, #1
 8003254:	81a3      	strh	r3, [r4, #12]
 8003256:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <__srefill_r+0x110>)
 8003258:	491f      	ldr	r1, [pc, #124]	; (80032d8 <__srefill_r+0x114>)
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	f006 0609 	and.w	r6, r6, #9
 8003260:	f7ff f810 	bl	8002284 <_fwalk>
 8003264:	2e09      	cmp	r6, #9
 8003266:	81a7      	strh	r7, [r4, #12]
 8003268:	d103      	bne.n	8003272 <__srefill_r+0xae>
 800326a:	4621      	mov	r1, r4
 800326c:	4628      	mov	r0, r5
 800326e:	f7fe fe63 	bl	8001f38 <__sflush_r>
 8003272:	6922      	ldr	r2, [r4, #16]
 8003274:	4628      	mov	r0, r5
 8003276:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003278:	6963      	ldr	r3, [r4, #20]
 800327a:	6a21      	ldr	r1, [r4, #32]
 800327c:	6022      	str	r2, [r4, #0]
 800327e:	47b0      	blx	r6
 8003280:	2800      	cmp	r0, #0
 8003282:	6060      	str	r0, [r4, #4]
 8003284:	dc1d      	bgt.n	80032c2 <__srefill_r+0xfe>
 8003286:	bf18      	it	ne
 8003288:	2200      	movne	r2, #0
 800328a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800328e:	bf16      	itet	ne
 8003290:	6062      	strne	r2, [r4, #4]
 8003292:	f043 0320 	orreq.w	r3, r3, #32
 8003296:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800329a:	e7bb      	b.n	8003214 <__srefill_r+0x50>
 800329c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800329e:	2900      	cmp	r1, #0
 80032a0:	d0cc      	beq.n	800323c <__srefill_r+0x78>
 80032a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032a6:	4299      	cmp	r1, r3
 80032a8:	d002      	beq.n	80032b0 <__srefill_r+0xec>
 80032aa:	4628      	mov	r0, r5
 80032ac:	f7ff f896 	bl	80023dc <_free_r>
 80032b0:	2000      	movs	r0, #0
 80032b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032b4:	6360      	str	r0, [r4, #52]	; 0x34
 80032b6:	6063      	str	r3, [r4, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0bf      	beq.n	800323c <__srefill_r+0x78>
 80032bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032be:	6023      	str	r3, [r4, #0]
 80032c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032c2:	2000      	movs	r0, #0
 80032c4:	e7fc      	b.n	80032c0 <__srefill_r+0xfc>
 80032c6:	bf00      	nop
 80032c8:	080039d4 	.word	0x080039d4
 80032cc:	080039f4 	.word	0x080039f4
 80032d0:	080039b4 	.word	0x080039b4
 80032d4:	080039b0 	.word	0x080039b0
 80032d8:	080031b1 	.word	0x080031b1

080032dc <_sbrk_r>:
 80032dc:	b538      	push	{r3, r4, r5, lr}
 80032de:	2300      	movs	r3, #0
 80032e0:	4d05      	ldr	r5, [pc, #20]	; (80032f8 <_sbrk_r+0x1c>)
 80032e2:	4604      	mov	r4, r0
 80032e4:	4608      	mov	r0, r1
 80032e6:	602b      	str	r3, [r5, #0]
 80032e8:	f7fd f9a0 	bl	800062c <_sbrk>
 80032ec:	1c43      	adds	r3, r0, #1
 80032ee:	d102      	bne.n	80032f6 <_sbrk_r+0x1a>
 80032f0:	682b      	ldr	r3, [r5, #0]
 80032f2:	b103      	cbz	r3, 80032f6 <_sbrk_r+0x1a>
 80032f4:	6023      	str	r3, [r4, #0]
 80032f6:	bd38      	pop	{r3, r4, r5, pc}
 80032f8:	200000e8 	.word	0x200000e8

080032fc <__sccl>:
 80032fc:	b570      	push	{r4, r5, r6, lr}
 80032fe:	780b      	ldrb	r3, [r1, #0]
 8003300:	4604      	mov	r4, r0
 8003302:	2b5e      	cmp	r3, #94	; 0x5e
 8003304:	bf13      	iteet	ne
 8003306:	2200      	movne	r2, #0
 8003308:	2201      	moveq	r2, #1
 800330a:	784b      	ldrbeq	r3, [r1, #1]
 800330c:	1c48      	addne	r0, r1, #1
 800330e:	bf08      	it	eq
 8003310:	1c88      	addeq	r0, r1, #2
 8003312:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003316:	1e61      	subs	r1, r4, #1
 8003318:	f801 2f01 	strb.w	r2, [r1, #1]!
 800331c:	42a9      	cmp	r1, r5
 800331e:	d1fb      	bne.n	8003318 <__sccl+0x1c>
 8003320:	b90b      	cbnz	r3, 8003326 <__sccl+0x2a>
 8003322:	3801      	subs	r0, #1
 8003324:	bd70      	pop	{r4, r5, r6, pc}
 8003326:	f082 0201 	eor.w	r2, r2, #1
 800332a:	4605      	mov	r5, r0
 800332c:	54e2      	strb	r2, [r4, r3]
 800332e:	4628      	mov	r0, r5
 8003330:	f810 1b01 	ldrb.w	r1, [r0], #1
 8003334:	292d      	cmp	r1, #45	; 0x2d
 8003336:	d006      	beq.n	8003346 <__sccl+0x4a>
 8003338:	295d      	cmp	r1, #93	; 0x5d
 800333a:	d0f3      	beq.n	8003324 <__sccl+0x28>
 800333c:	b909      	cbnz	r1, 8003342 <__sccl+0x46>
 800333e:	4628      	mov	r0, r5
 8003340:	e7f0      	b.n	8003324 <__sccl+0x28>
 8003342:	460b      	mov	r3, r1
 8003344:	e7f1      	b.n	800332a <__sccl+0x2e>
 8003346:	786e      	ldrb	r6, [r5, #1]
 8003348:	2e5d      	cmp	r6, #93	; 0x5d
 800334a:	d0fa      	beq.n	8003342 <__sccl+0x46>
 800334c:	42b3      	cmp	r3, r6
 800334e:	dcf8      	bgt.n	8003342 <__sccl+0x46>
 8003350:	4619      	mov	r1, r3
 8003352:	3502      	adds	r5, #2
 8003354:	3101      	adds	r1, #1
 8003356:	428e      	cmp	r6, r1
 8003358:	5462      	strb	r2, [r4, r1]
 800335a:	dcfb      	bgt.n	8003354 <__sccl+0x58>
 800335c:	1af1      	subs	r1, r6, r3
 800335e:	3901      	subs	r1, #1
 8003360:	42b3      	cmp	r3, r6
 8003362:	bfa8      	it	ge
 8003364:	2100      	movge	r1, #0
 8003366:	1c58      	adds	r0, r3, #1
 8003368:	1843      	adds	r3, r0, r1
 800336a:	e7e0      	b.n	800332e <__sccl+0x32>

0800336c <__sread>:
 800336c:	b510      	push	{r4, lr}
 800336e:	460c      	mov	r4, r1
 8003370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003374:	f000 faae 	bl	80038d4 <_read_r>
 8003378:	2800      	cmp	r0, #0
 800337a:	bfab      	itete	ge
 800337c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800337e:	89a3      	ldrhlt	r3, [r4, #12]
 8003380:	181b      	addge	r3, r3, r0
 8003382:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003386:	bfac      	ite	ge
 8003388:	6563      	strge	r3, [r4, #84]	; 0x54
 800338a:	81a3      	strhlt	r3, [r4, #12]
 800338c:	bd10      	pop	{r4, pc}

0800338e <__swrite>:
 800338e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003392:	461f      	mov	r7, r3
 8003394:	898b      	ldrh	r3, [r1, #12]
 8003396:	4605      	mov	r5, r0
 8003398:	05db      	lsls	r3, r3, #23
 800339a:	460c      	mov	r4, r1
 800339c:	4616      	mov	r6, r2
 800339e:	d505      	bpl.n	80033ac <__swrite+0x1e>
 80033a0:	2302      	movs	r3, #2
 80033a2:	2200      	movs	r2, #0
 80033a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033a8:	f000 fa2a 	bl	8003800 <_lseek_r>
 80033ac:	89a3      	ldrh	r3, [r4, #12]
 80033ae:	4632      	mov	r2, r6
 80033b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033b4:	81a3      	strh	r3, [r4, #12]
 80033b6:	4628      	mov	r0, r5
 80033b8:	463b      	mov	r3, r7
 80033ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033c2:	f000 b9d9 	b.w	8003778 <_write_r>

080033c6 <__sseek>:
 80033c6:	b510      	push	{r4, lr}
 80033c8:	460c      	mov	r4, r1
 80033ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ce:	f000 fa17 	bl	8003800 <_lseek_r>
 80033d2:	1c43      	adds	r3, r0, #1
 80033d4:	89a3      	ldrh	r3, [r4, #12]
 80033d6:	bf15      	itete	ne
 80033d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80033da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80033de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80033e2:	81a3      	strheq	r3, [r4, #12]
 80033e4:	bf18      	it	ne
 80033e6:	81a3      	strhne	r3, [r4, #12]
 80033e8:	bd10      	pop	{r4, pc}

080033ea <__sclose>:
 80033ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ee:	f000 b9d5 	b.w	800379c <_close_r>
	...

080033f4 <_strtol_l.constprop.0>:
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033fa:	4680      	mov	r8, r0
 80033fc:	d001      	beq.n	8003402 <_strtol_l.constprop.0+0xe>
 80033fe:	2b24      	cmp	r3, #36	; 0x24
 8003400:	d906      	bls.n	8003410 <_strtol_l.constprop.0+0x1c>
 8003402:	f7fe fb3b 	bl	8001a7c <__errno>
 8003406:	2316      	movs	r3, #22
 8003408:	6003      	str	r3, [r0, #0]
 800340a:	2000      	movs	r0, #0
 800340c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003410:	460d      	mov	r5, r1
 8003412:	4f35      	ldr	r7, [pc, #212]	; (80034e8 <_strtol_l.constprop.0+0xf4>)
 8003414:	4628      	mov	r0, r5
 8003416:	f815 4b01 	ldrb.w	r4, [r5], #1
 800341a:	5de6      	ldrb	r6, [r4, r7]
 800341c:	f016 0608 	ands.w	r6, r6, #8
 8003420:	d1f8      	bne.n	8003414 <_strtol_l.constprop.0+0x20>
 8003422:	2c2d      	cmp	r4, #45	; 0x2d
 8003424:	d12f      	bne.n	8003486 <_strtol_l.constprop.0+0x92>
 8003426:	2601      	movs	r6, #1
 8003428:	782c      	ldrb	r4, [r5, #0]
 800342a:	1c85      	adds	r5, r0, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d057      	beq.n	80034e0 <_strtol_l.constprop.0+0xec>
 8003430:	2b10      	cmp	r3, #16
 8003432:	d109      	bne.n	8003448 <_strtol_l.constprop.0+0x54>
 8003434:	2c30      	cmp	r4, #48	; 0x30
 8003436:	d107      	bne.n	8003448 <_strtol_l.constprop.0+0x54>
 8003438:	7828      	ldrb	r0, [r5, #0]
 800343a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800343e:	2858      	cmp	r0, #88	; 0x58
 8003440:	d149      	bne.n	80034d6 <_strtol_l.constprop.0+0xe2>
 8003442:	2310      	movs	r3, #16
 8003444:	786c      	ldrb	r4, [r5, #1]
 8003446:	3502      	adds	r5, #2
 8003448:	2700      	movs	r7, #0
 800344a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800344e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8003452:	fbbe f9f3 	udiv	r9, lr, r3
 8003456:	4638      	mov	r0, r7
 8003458:	fb03 ea19 	mls	sl, r3, r9, lr
 800345c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003460:	f1bc 0f09 	cmp.w	ip, #9
 8003464:	d814      	bhi.n	8003490 <_strtol_l.constprop.0+0x9c>
 8003466:	4664      	mov	r4, ip
 8003468:	42a3      	cmp	r3, r4
 800346a:	dd22      	ble.n	80034b2 <_strtol_l.constprop.0+0xbe>
 800346c:	2f00      	cmp	r7, #0
 800346e:	db1d      	blt.n	80034ac <_strtol_l.constprop.0+0xb8>
 8003470:	4581      	cmp	r9, r0
 8003472:	d31b      	bcc.n	80034ac <_strtol_l.constprop.0+0xb8>
 8003474:	d101      	bne.n	800347a <_strtol_l.constprop.0+0x86>
 8003476:	45a2      	cmp	sl, r4
 8003478:	db18      	blt.n	80034ac <_strtol_l.constprop.0+0xb8>
 800347a:	2701      	movs	r7, #1
 800347c:	fb00 4003 	mla	r0, r0, r3, r4
 8003480:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003484:	e7ea      	b.n	800345c <_strtol_l.constprop.0+0x68>
 8003486:	2c2b      	cmp	r4, #43	; 0x2b
 8003488:	bf04      	itt	eq
 800348a:	782c      	ldrbeq	r4, [r5, #0]
 800348c:	1c85      	addeq	r5, r0, #2
 800348e:	e7cd      	b.n	800342c <_strtol_l.constprop.0+0x38>
 8003490:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003494:	f1bc 0f19 	cmp.w	ip, #25
 8003498:	d801      	bhi.n	800349e <_strtol_l.constprop.0+0xaa>
 800349a:	3c37      	subs	r4, #55	; 0x37
 800349c:	e7e4      	b.n	8003468 <_strtol_l.constprop.0+0x74>
 800349e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80034a2:	f1bc 0f19 	cmp.w	ip, #25
 80034a6:	d804      	bhi.n	80034b2 <_strtol_l.constprop.0+0xbe>
 80034a8:	3c57      	subs	r4, #87	; 0x57
 80034aa:	e7dd      	b.n	8003468 <_strtol_l.constprop.0+0x74>
 80034ac:	f04f 37ff 	mov.w	r7, #4294967295
 80034b0:	e7e6      	b.n	8003480 <_strtol_l.constprop.0+0x8c>
 80034b2:	2f00      	cmp	r7, #0
 80034b4:	da07      	bge.n	80034c6 <_strtol_l.constprop.0+0xd2>
 80034b6:	2322      	movs	r3, #34	; 0x22
 80034b8:	4670      	mov	r0, lr
 80034ba:	f8c8 3000 	str.w	r3, [r8]
 80034be:	2a00      	cmp	r2, #0
 80034c0:	d0a4      	beq.n	800340c <_strtol_l.constprop.0+0x18>
 80034c2:	1e69      	subs	r1, r5, #1
 80034c4:	e005      	b.n	80034d2 <_strtol_l.constprop.0+0xde>
 80034c6:	b106      	cbz	r6, 80034ca <_strtol_l.constprop.0+0xd6>
 80034c8:	4240      	negs	r0, r0
 80034ca:	2a00      	cmp	r2, #0
 80034cc:	d09e      	beq.n	800340c <_strtol_l.constprop.0+0x18>
 80034ce:	2f00      	cmp	r7, #0
 80034d0:	d1f7      	bne.n	80034c2 <_strtol_l.constprop.0+0xce>
 80034d2:	6011      	str	r1, [r2, #0]
 80034d4:	e79a      	b.n	800340c <_strtol_l.constprop.0+0x18>
 80034d6:	2430      	movs	r4, #48	; 0x30
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1b5      	bne.n	8003448 <_strtol_l.constprop.0+0x54>
 80034dc:	2308      	movs	r3, #8
 80034de:	e7b3      	b.n	8003448 <_strtol_l.constprop.0+0x54>
 80034e0:	2c30      	cmp	r4, #48	; 0x30
 80034e2:	d0a9      	beq.n	8003438 <_strtol_l.constprop.0+0x44>
 80034e4:	230a      	movs	r3, #10
 80034e6:	e7af      	b.n	8003448 <_strtol_l.constprop.0+0x54>
 80034e8:	08003a63 	.word	0x08003a63

080034ec <_strtol_r>:
 80034ec:	f7ff bf82 	b.w	80033f4 <_strtol_l.constprop.0>

080034f0 <_strtoul_l.constprop.0>:
 80034f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034f4:	4686      	mov	lr, r0
 80034f6:	460d      	mov	r5, r1
 80034f8:	4f35      	ldr	r7, [pc, #212]	; (80035d0 <_strtoul_l.constprop.0+0xe0>)
 80034fa:	4628      	mov	r0, r5
 80034fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003500:	5de6      	ldrb	r6, [r4, r7]
 8003502:	f016 0608 	ands.w	r6, r6, #8
 8003506:	d1f8      	bne.n	80034fa <_strtoul_l.constprop.0+0xa>
 8003508:	2c2d      	cmp	r4, #45	; 0x2d
 800350a:	d12f      	bne.n	800356c <_strtoul_l.constprop.0+0x7c>
 800350c:	2601      	movs	r6, #1
 800350e:	782c      	ldrb	r4, [r5, #0]
 8003510:	1c85      	adds	r5, r0, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d057      	beq.n	80035c6 <_strtoul_l.constprop.0+0xd6>
 8003516:	2b10      	cmp	r3, #16
 8003518:	d109      	bne.n	800352e <_strtoul_l.constprop.0+0x3e>
 800351a:	2c30      	cmp	r4, #48	; 0x30
 800351c:	d107      	bne.n	800352e <_strtoul_l.constprop.0+0x3e>
 800351e:	7828      	ldrb	r0, [r5, #0]
 8003520:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003524:	2858      	cmp	r0, #88	; 0x58
 8003526:	d149      	bne.n	80035bc <_strtoul_l.constprop.0+0xcc>
 8003528:	2310      	movs	r3, #16
 800352a:	786c      	ldrb	r4, [r5, #1]
 800352c:	3502      	adds	r5, #2
 800352e:	f04f 38ff 	mov.w	r8, #4294967295
 8003532:	fbb8 f8f3 	udiv	r8, r8, r3
 8003536:	2700      	movs	r7, #0
 8003538:	fb03 f908 	mul.w	r9, r3, r8
 800353c:	4638      	mov	r0, r7
 800353e:	ea6f 0909 	mvn.w	r9, r9
 8003542:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003546:	f1bc 0f09 	cmp.w	ip, #9
 800354a:	d814      	bhi.n	8003576 <_strtoul_l.constprop.0+0x86>
 800354c:	4664      	mov	r4, ip
 800354e:	42a3      	cmp	r3, r4
 8003550:	dd22      	ble.n	8003598 <_strtoul_l.constprop.0+0xa8>
 8003552:	2f00      	cmp	r7, #0
 8003554:	db1d      	blt.n	8003592 <_strtoul_l.constprop.0+0xa2>
 8003556:	4580      	cmp	r8, r0
 8003558:	d31b      	bcc.n	8003592 <_strtoul_l.constprop.0+0xa2>
 800355a:	d101      	bne.n	8003560 <_strtoul_l.constprop.0+0x70>
 800355c:	45a1      	cmp	r9, r4
 800355e:	db18      	blt.n	8003592 <_strtoul_l.constprop.0+0xa2>
 8003560:	2701      	movs	r7, #1
 8003562:	fb00 4003 	mla	r0, r0, r3, r4
 8003566:	f815 4b01 	ldrb.w	r4, [r5], #1
 800356a:	e7ea      	b.n	8003542 <_strtoul_l.constprop.0+0x52>
 800356c:	2c2b      	cmp	r4, #43	; 0x2b
 800356e:	bf04      	itt	eq
 8003570:	782c      	ldrbeq	r4, [r5, #0]
 8003572:	1c85      	addeq	r5, r0, #2
 8003574:	e7cd      	b.n	8003512 <_strtoul_l.constprop.0+0x22>
 8003576:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800357a:	f1bc 0f19 	cmp.w	ip, #25
 800357e:	d801      	bhi.n	8003584 <_strtoul_l.constprop.0+0x94>
 8003580:	3c37      	subs	r4, #55	; 0x37
 8003582:	e7e4      	b.n	800354e <_strtoul_l.constprop.0+0x5e>
 8003584:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003588:	f1bc 0f19 	cmp.w	ip, #25
 800358c:	d804      	bhi.n	8003598 <_strtoul_l.constprop.0+0xa8>
 800358e:	3c57      	subs	r4, #87	; 0x57
 8003590:	e7dd      	b.n	800354e <_strtoul_l.constprop.0+0x5e>
 8003592:	f04f 37ff 	mov.w	r7, #4294967295
 8003596:	e7e6      	b.n	8003566 <_strtoul_l.constprop.0+0x76>
 8003598:	2f00      	cmp	r7, #0
 800359a:	da07      	bge.n	80035ac <_strtoul_l.constprop.0+0xbc>
 800359c:	2322      	movs	r3, #34	; 0x22
 800359e:	f04f 30ff 	mov.w	r0, #4294967295
 80035a2:	f8ce 3000 	str.w	r3, [lr]
 80035a6:	b932      	cbnz	r2, 80035b6 <_strtoul_l.constprop.0+0xc6>
 80035a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035ac:	b106      	cbz	r6, 80035b0 <_strtoul_l.constprop.0+0xc0>
 80035ae:	4240      	negs	r0, r0
 80035b0:	2a00      	cmp	r2, #0
 80035b2:	d0f9      	beq.n	80035a8 <_strtoul_l.constprop.0+0xb8>
 80035b4:	b107      	cbz	r7, 80035b8 <_strtoul_l.constprop.0+0xc8>
 80035b6:	1e69      	subs	r1, r5, #1
 80035b8:	6011      	str	r1, [r2, #0]
 80035ba:	e7f5      	b.n	80035a8 <_strtoul_l.constprop.0+0xb8>
 80035bc:	2430      	movs	r4, #48	; 0x30
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1b5      	bne.n	800352e <_strtoul_l.constprop.0+0x3e>
 80035c2:	2308      	movs	r3, #8
 80035c4:	e7b3      	b.n	800352e <_strtoul_l.constprop.0+0x3e>
 80035c6:	2c30      	cmp	r4, #48	; 0x30
 80035c8:	d0a9      	beq.n	800351e <_strtoul_l.constprop.0+0x2e>
 80035ca:	230a      	movs	r3, #10
 80035cc:	e7af      	b.n	800352e <_strtoul_l.constprop.0+0x3e>
 80035ce:	bf00      	nop
 80035d0:	08003a63 	.word	0x08003a63

080035d4 <_strtoul_r>:
 80035d4:	f7ff bf8c 	b.w	80034f0 <_strtoul_l.constprop.0>

080035d8 <__submore>:
 80035d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035dc:	460c      	mov	r4, r1
 80035de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80035e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035e4:	4299      	cmp	r1, r3
 80035e6:	d11b      	bne.n	8003620 <__submore+0x48>
 80035e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035ec:	f7fe ff5e 	bl	80024ac <_malloc_r>
 80035f0:	b918      	cbnz	r0, 80035fa <__submore+0x22>
 80035f2:	f04f 30ff 	mov.w	r0, #4294967295
 80035f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8003600:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003604:	6360      	str	r0, [r4, #52]	; 0x34
 8003606:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800360a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800360e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003612:	7043      	strb	r3, [r0, #1]
 8003614:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003618:	7003      	strb	r3, [r0, #0]
 800361a:	6020      	str	r0, [r4, #0]
 800361c:	2000      	movs	r0, #0
 800361e:	e7ea      	b.n	80035f6 <__submore+0x1e>
 8003620:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003622:	0077      	lsls	r7, r6, #1
 8003624:	463a      	mov	r2, r7
 8003626:	f000 f925 	bl	8003874 <_realloc_r>
 800362a:	4605      	mov	r5, r0
 800362c:	2800      	cmp	r0, #0
 800362e:	d0e0      	beq.n	80035f2 <__submore+0x1a>
 8003630:	eb00 0806 	add.w	r8, r0, r6
 8003634:	4601      	mov	r1, r0
 8003636:	4632      	mov	r2, r6
 8003638:	4640      	mov	r0, r8
 800363a:	f000 f901 	bl	8003840 <memcpy>
 800363e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003642:	f8c4 8000 	str.w	r8, [r4]
 8003646:	e7e9      	b.n	800361c <__submore+0x44>

08003648 <_ungetc_r>:
 8003648:	b570      	push	{r4, r5, r6, lr}
 800364a:	4614      	mov	r4, r2
 800364c:	1c4a      	adds	r2, r1, #1
 800364e:	4606      	mov	r6, r0
 8003650:	460d      	mov	r5, r1
 8003652:	d103      	bne.n	800365c <_ungetc_r+0x14>
 8003654:	f04f 35ff 	mov.w	r5, #4294967295
 8003658:	4628      	mov	r0, r5
 800365a:	bd70      	pop	{r4, r5, r6, pc}
 800365c:	b118      	cbz	r0, 8003666 <_ungetc_r+0x1e>
 800365e:	6983      	ldr	r3, [r0, #24]
 8003660:	b90b      	cbnz	r3, 8003666 <_ungetc_r+0x1e>
 8003662:	f7fe fd91 	bl	8002188 <__sinit>
 8003666:	4b41      	ldr	r3, [pc, #260]	; (800376c <_ungetc_r+0x124>)
 8003668:	429c      	cmp	r4, r3
 800366a:	d11d      	bne.n	80036a8 <_ungetc_r+0x60>
 800366c:	6874      	ldr	r4, [r6, #4]
 800366e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003670:	07db      	lsls	r3, r3, #31
 8003672:	d405      	bmi.n	8003680 <_ungetc_r+0x38>
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	0598      	lsls	r0, r3, #22
 8003678:	d402      	bmi.n	8003680 <_ungetc_r+0x38>
 800367a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800367c:	f7fe fe3f 	bl	80022fe <__retarget_lock_acquire_recursive>
 8003680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003684:	f023 0320 	bic.w	r3, r3, #32
 8003688:	0759      	lsls	r1, r3, #29
 800368a:	81a3      	strh	r3, [r4, #12]
 800368c:	b29a      	uxth	r2, r3
 800368e:	d42d      	bmi.n	80036ec <_ungetc_r+0xa4>
 8003690:	06d3      	lsls	r3, r2, #27
 8003692:	d413      	bmi.n	80036bc <_ungetc_r+0x74>
 8003694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003696:	07dd      	lsls	r5, r3, #31
 8003698:	d4dc      	bmi.n	8003654 <_ungetc_r+0xc>
 800369a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800369e:	d1d9      	bne.n	8003654 <_ungetc_r+0xc>
 80036a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036a2:	f7fe fe2d 	bl	8002300 <__retarget_lock_release_recursive>
 80036a6:	e7d5      	b.n	8003654 <_ungetc_r+0xc>
 80036a8:	4b31      	ldr	r3, [pc, #196]	; (8003770 <_ungetc_r+0x128>)
 80036aa:	429c      	cmp	r4, r3
 80036ac:	d101      	bne.n	80036b2 <_ungetc_r+0x6a>
 80036ae:	68b4      	ldr	r4, [r6, #8]
 80036b0:	e7dd      	b.n	800366e <_ungetc_r+0x26>
 80036b2:	4b30      	ldr	r3, [pc, #192]	; (8003774 <_ungetc_r+0x12c>)
 80036b4:	429c      	cmp	r4, r3
 80036b6:	bf08      	it	eq
 80036b8:	68f4      	ldreq	r4, [r6, #12]
 80036ba:	e7d8      	b.n	800366e <_ungetc_r+0x26>
 80036bc:	0710      	lsls	r0, r2, #28
 80036be:	d511      	bpl.n	80036e4 <_ungetc_r+0x9c>
 80036c0:	4621      	mov	r1, r4
 80036c2:	4630      	mov	r0, r6
 80036c4:	f7fe fcba 	bl	800203c <_fflush_r>
 80036c8:	b130      	cbz	r0, 80036d8 <_ungetc_r+0x90>
 80036ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036cc:	07d9      	lsls	r1, r3, #31
 80036ce:	d4c1      	bmi.n	8003654 <_ungetc_r+0xc>
 80036d0:	89a3      	ldrh	r3, [r4, #12]
 80036d2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80036d6:	e7e2      	b.n	800369e <_ungetc_r+0x56>
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	60a0      	str	r0, [r4, #8]
 80036dc:	f023 0308 	bic.w	r3, r3, #8
 80036e0:	81a3      	strh	r3, [r4, #12]
 80036e2:	61a0      	str	r0, [r4, #24]
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	f043 0304 	orr.w	r3, r3, #4
 80036ea:	81a3      	strh	r3, [r4, #12]
 80036ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036ee:	6862      	ldr	r2, [r4, #4]
 80036f0:	b2ed      	uxtb	r5, r5
 80036f2:	b1d3      	cbz	r3, 800372a <_ungetc_r+0xe2>
 80036f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036f6:	4293      	cmp	r3, r2
 80036f8:	dc05      	bgt.n	8003706 <_ungetc_r+0xbe>
 80036fa:	4621      	mov	r1, r4
 80036fc:	4630      	mov	r0, r6
 80036fe:	f7ff ff6b 	bl	80035d8 <__submore>
 8003702:	2800      	cmp	r0, #0
 8003704:	d1e1      	bne.n	80036ca <_ungetc_r+0x82>
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	1e5a      	subs	r2, r3, #1
 800370a:	6022      	str	r2, [r4, #0]
 800370c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003710:	6863      	ldr	r3, [r4, #4]
 8003712:	3301      	adds	r3, #1
 8003714:	6063      	str	r3, [r4, #4]
 8003716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003718:	07da      	lsls	r2, r3, #31
 800371a:	d49d      	bmi.n	8003658 <_ungetc_r+0x10>
 800371c:	89a3      	ldrh	r3, [r4, #12]
 800371e:	059b      	lsls	r3, r3, #22
 8003720:	d49a      	bmi.n	8003658 <_ungetc_r+0x10>
 8003722:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003724:	f7fe fdec 	bl	8002300 <__retarget_lock_release_recursive>
 8003728:	e796      	b.n	8003658 <_ungetc_r+0x10>
 800372a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800372c:	6920      	ldr	r0, [r4, #16]
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	f001 0101 	and.w	r1, r1, #1
 8003734:	b160      	cbz	r0, 8003750 <_ungetc_r+0x108>
 8003736:	4298      	cmp	r0, r3
 8003738:	d20a      	bcs.n	8003750 <_ungetc_r+0x108>
 800373a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800373e:	42a8      	cmp	r0, r5
 8003740:	d106      	bne.n	8003750 <_ungetc_r+0x108>
 8003742:	3b01      	subs	r3, #1
 8003744:	3201      	adds	r2, #1
 8003746:	6023      	str	r3, [r4, #0]
 8003748:	6062      	str	r2, [r4, #4]
 800374a:	2900      	cmp	r1, #0
 800374c:	d184      	bne.n	8003658 <_ungetc_r+0x10>
 800374e:	e7e5      	b.n	800371c <_ungetc_r+0xd4>
 8003750:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003758:	6363      	str	r3, [r4, #52]	; 0x34
 800375a:	2303      	movs	r3, #3
 800375c:	63a3      	str	r3, [r4, #56]	; 0x38
 800375e:	4623      	mov	r3, r4
 8003760:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	2301      	movs	r3, #1
 8003768:	6063      	str	r3, [r4, #4]
 800376a:	e7ee      	b.n	800374a <_ungetc_r+0x102>
 800376c:	080039d4 	.word	0x080039d4
 8003770:	080039f4 	.word	0x080039f4
 8003774:	080039b4 	.word	0x080039b4

08003778 <_write_r>:
 8003778:	b538      	push	{r3, r4, r5, lr}
 800377a:	4604      	mov	r4, r0
 800377c:	4608      	mov	r0, r1
 800377e:	4611      	mov	r1, r2
 8003780:	2200      	movs	r2, #0
 8003782:	4d05      	ldr	r5, [pc, #20]	; (8003798 <_write_r+0x20>)
 8003784:	602a      	str	r2, [r5, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	f7fc fe28 	bl	80003dc <_write>
 800378c:	1c43      	adds	r3, r0, #1
 800378e:	d102      	bne.n	8003796 <_write_r+0x1e>
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	b103      	cbz	r3, 8003796 <_write_r+0x1e>
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	bd38      	pop	{r3, r4, r5, pc}
 8003798:	200000e8 	.word	0x200000e8

0800379c <_close_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	2300      	movs	r3, #0
 80037a0:	4d05      	ldr	r5, [pc, #20]	; (80037b8 <_close_r+0x1c>)
 80037a2:	4604      	mov	r4, r0
 80037a4:	4608      	mov	r0, r1
 80037a6:	602b      	str	r3, [r5, #0]
 80037a8:	f7fc fe44 	bl	8000434 <_close>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	d102      	bne.n	80037b6 <_close_r+0x1a>
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	b103      	cbz	r3, 80037b6 <_close_r+0x1a>
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	200000e8 	.word	0x200000e8

080037bc <_fstat_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	2300      	movs	r3, #0
 80037c0:	4d06      	ldr	r5, [pc, #24]	; (80037dc <_fstat_r+0x20>)
 80037c2:	4604      	mov	r4, r0
 80037c4:	4608      	mov	r0, r1
 80037c6:	4611      	mov	r1, r2
 80037c8:	602b      	str	r3, [r5, #0]
 80037ca:	f7fc fe73 	bl	80004b4 <_fstat>
 80037ce:	1c43      	adds	r3, r0, #1
 80037d0:	d102      	bne.n	80037d8 <_fstat_r+0x1c>
 80037d2:	682b      	ldr	r3, [r5, #0]
 80037d4:	b103      	cbz	r3, 80037d8 <_fstat_r+0x1c>
 80037d6:	6023      	str	r3, [r4, #0]
 80037d8:	bd38      	pop	{r3, r4, r5, pc}
 80037da:	bf00      	nop
 80037dc:	200000e8 	.word	0x200000e8

080037e0 <_isatty_r>:
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	2300      	movs	r3, #0
 80037e4:	4d05      	ldr	r5, [pc, #20]	; (80037fc <_isatty_r+0x1c>)
 80037e6:	4604      	mov	r4, r0
 80037e8:	4608      	mov	r0, r1
 80037ea:	602b      	str	r3, [r5, #0]
 80037ec:	f7fc fde0 	bl	80003b0 <_isatty>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d102      	bne.n	80037fa <_isatty_r+0x1a>
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	b103      	cbz	r3, 80037fa <_isatty_r+0x1a>
 80037f8:	6023      	str	r3, [r4, #0]
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
 80037fc:	200000e8 	.word	0x200000e8

08003800 <_lseek_r>:
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	4604      	mov	r4, r0
 8003804:	4608      	mov	r0, r1
 8003806:	4611      	mov	r1, r2
 8003808:	2200      	movs	r2, #0
 800380a:	4d05      	ldr	r5, [pc, #20]	; (8003820 <_lseek_r+0x20>)
 800380c:	602a      	str	r2, [r5, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	f000 f87a 	bl	8003908 <_lseek>
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	d102      	bne.n	800381e <_lseek_r+0x1e>
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	b103      	cbz	r3, 800381e <_lseek_r+0x1e>
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	bd38      	pop	{r3, r4, r5, pc}
 8003820:	200000e8 	.word	0x200000e8

08003824 <memchr>:
 8003824:	4603      	mov	r3, r0
 8003826:	b510      	push	{r4, lr}
 8003828:	b2c9      	uxtb	r1, r1
 800382a:	4402      	add	r2, r0
 800382c:	4293      	cmp	r3, r2
 800382e:	4618      	mov	r0, r3
 8003830:	d101      	bne.n	8003836 <memchr+0x12>
 8003832:	2000      	movs	r0, #0
 8003834:	e003      	b.n	800383e <memchr+0x1a>
 8003836:	7804      	ldrb	r4, [r0, #0]
 8003838:	3301      	adds	r3, #1
 800383a:	428c      	cmp	r4, r1
 800383c:	d1f6      	bne.n	800382c <memchr+0x8>
 800383e:	bd10      	pop	{r4, pc}

08003840 <memcpy>:
 8003840:	440a      	add	r2, r1
 8003842:	4291      	cmp	r1, r2
 8003844:	f100 33ff 	add.w	r3, r0, #4294967295
 8003848:	d100      	bne.n	800384c <memcpy+0xc>
 800384a:	4770      	bx	lr
 800384c:	b510      	push	{r4, lr}
 800384e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003852:	4291      	cmp	r1, r2
 8003854:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003858:	d1f9      	bne.n	800384e <memcpy+0xe>
 800385a:	bd10      	pop	{r4, pc}

0800385c <__malloc_lock>:
 800385c:	4801      	ldr	r0, [pc, #4]	; (8003864 <__malloc_lock+0x8>)
 800385e:	f7fe bd4e 	b.w	80022fe <__retarget_lock_acquire_recursive>
 8003862:	bf00      	nop
 8003864:	200000dc 	.word	0x200000dc

08003868 <__malloc_unlock>:
 8003868:	4801      	ldr	r0, [pc, #4]	; (8003870 <__malloc_unlock+0x8>)
 800386a:	f7fe bd49 	b.w	8002300 <__retarget_lock_release_recursive>
 800386e:	bf00      	nop
 8003870:	200000dc 	.word	0x200000dc

08003874 <_realloc_r>:
 8003874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003878:	4680      	mov	r8, r0
 800387a:	4614      	mov	r4, r2
 800387c:	460e      	mov	r6, r1
 800387e:	b921      	cbnz	r1, 800388a <_realloc_r+0x16>
 8003880:	4611      	mov	r1, r2
 8003882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003886:	f7fe be11 	b.w	80024ac <_malloc_r>
 800388a:	b92a      	cbnz	r2, 8003898 <_realloc_r+0x24>
 800388c:	f7fe fda6 	bl	80023dc <_free_r>
 8003890:	4625      	mov	r5, r4
 8003892:	4628      	mov	r0, r5
 8003894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003898:	f000 f82e 	bl	80038f8 <_malloc_usable_size_r>
 800389c:	4284      	cmp	r4, r0
 800389e:	4607      	mov	r7, r0
 80038a0:	d802      	bhi.n	80038a8 <_realloc_r+0x34>
 80038a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80038a6:	d812      	bhi.n	80038ce <_realloc_r+0x5a>
 80038a8:	4621      	mov	r1, r4
 80038aa:	4640      	mov	r0, r8
 80038ac:	f7fe fdfe 	bl	80024ac <_malloc_r>
 80038b0:	4605      	mov	r5, r0
 80038b2:	2800      	cmp	r0, #0
 80038b4:	d0ed      	beq.n	8003892 <_realloc_r+0x1e>
 80038b6:	42bc      	cmp	r4, r7
 80038b8:	4622      	mov	r2, r4
 80038ba:	4631      	mov	r1, r6
 80038bc:	bf28      	it	cs
 80038be:	463a      	movcs	r2, r7
 80038c0:	f7ff ffbe 	bl	8003840 <memcpy>
 80038c4:	4631      	mov	r1, r6
 80038c6:	4640      	mov	r0, r8
 80038c8:	f7fe fd88 	bl	80023dc <_free_r>
 80038cc:	e7e1      	b.n	8003892 <_realloc_r+0x1e>
 80038ce:	4635      	mov	r5, r6
 80038d0:	e7df      	b.n	8003892 <_realloc_r+0x1e>
	...

080038d4 <_read_r>:
 80038d4:	b538      	push	{r3, r4, r5, lr}
 80038d6:	4604      	mov	r4, r0
 80038d8:	4608      	mov	r0, r1
 80038da:	4611      	mov	r1, r2
 80038dc:	2200      	movs	r2, #0
 80038de:	4d05      	ldr	r5, [pc, #20]	; (80038f4 <_read_r+0x20>)
 80038e0:	602a      	str	r2, [r5, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	f7fc fdbe 	bl	8000464 <_read>
 80038e8:	1c43      	adds	r3, r0, #1
 80038ea:	d102      	bne.n	80038f2 <_read_r+0x1e>
 80038ec:	682b      	ldr	r3, [r5, #0]
 80038ee:	b103      	cbz	r3, 80038f2 <_read_r+0x1e>
 80038f0:	6023      	str	r3, [r4, #0]
 80038f2:	bd38      	pop	{r3, r4, r5, pc}
 80038f4:	200000e8 	.word	0x200000e8

080038f8 <_malloc_usable_size_r>:
 80038f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038fc:	1f18      	subs	r0, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bfbc      	itt	lt
 8003902:	580b      	ldrlt	r3, [r1, r0]
 8003904:	18c0      	addlt	r0, r0, r3
 8003906:	4770      	bx	lr

08003908 <_lseek>:
 8003908:	2258      	movs	r2, #88	; 0x58
 800390a:	4b02      	ldr	r3, [pc, #8]	; (8003914 <_lseek+0xc>)
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	4770      	bx	lr
 8003914:	200000e8 	.word	0x200000e8

08003918 <_init>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr

08003924 <_fini>:
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003926:	bf00      	nop
 8003928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392a:	bc08      	pop	{r3}
 800392c:	469e      	mov	lr, r3
 800392e:	4770      	bx	lr

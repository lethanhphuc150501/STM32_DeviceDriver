
20_uart_tx_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000388  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080004b8  080004b8  000104b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004d8  080004d8  000104e0  2**0
                  CONTENTS
  4 .ARM          00000000  080004d8  080004d8  000104e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d8  080004e0  000104e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d8  080004d8  000104d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004dc  080004dc  000104dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004e0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004e0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000104e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a1a  00000000  00000000  00010509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000352  00000000  00000000  00010f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00011278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00011338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010dc0  00000000  00000000  000113d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d39  00000000  00000000  00022190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000584ff  00000000  00000000  00022ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007b3c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000204  00000000  00000000  0007b418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004a0 	.word	0x080004a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004a0 	.word	0x080004a0

08000170 <main>:
#define LED_PIN		PIN5

char key;

int main(void)
{
 8000170:	b5b0      	push	{r4, r5, r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
	char message[31] = "Hello from Stm32 DMA transfer\n\r";
 8000176:	4b19      	ldr	r3, [pc, #100]	; (80001dc <main+0x6c>)
 8000178:	463c      	mov	r4, r7
 800017a:	461d      	mov	r5, r3
 800017c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800017e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000180:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000184:	c407      	stmia	r4!, {r0, r1, r2}
 8000186:	8023      	strh	r3, [r4, #0]
 8000188:	3402      	adds	r4, #2
 800018a:	0c1b      	lsrs	r3, r3, #16
 800018c:	7023      	strb	r3, [r4, #0]

	/* Enable clock access to GPIOA */
	RCC->APB2ENR |= IOPAEN;
 800018e:	4b14      	ldr	r3, [pc, #80]	; (80001e0 <main+0x70>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	4a13      	ldr	r2, [pc, #76]	; (80001e0 <main+0x70>)
 8000194:	f043 0304 	orr.w	r3, r3, #4
 8000198:	6193      	str	r3, [r2, #24]

	/* Set PA5 as output pin */
	GPIOA->CRL |= (1U<<21);
 800019a:	4b12      	ldr	r3, [pc, #72]	; (80001e4 <main+0x74>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a11      	ldr	r2, [pc, #68]	; (80001e4 <main+0x74>)
 80001a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001a4:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<20);
 80001a6:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <main+0x74>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a0e      	ldr	r2, [pc, #56]	; (80001e4 <main+0x74>)
 80001ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80001b0:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<22);
 80001b2:	4b0c      	ldr	r3, [pc, #48]	; (80001e4 <main+0x74>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a0b      	ldr	r2, [pc, #44]	; (80001e4 <main+0x74>)
 80001b8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80001bc:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<23);
 80001be:	4b09      	ldr	r3, [pc, #36]	; (80001e4 <main+0x74>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a08      	ldr	r2, [pc, #32]	; (80001e4 <main+0x74>)
 80001c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80001c8:	6013      	str	r3, [r2, #0]

	UART2_TX_init();
 80001ca:	f000 f84d 	bl	8000268 <UART2_TX_init>
	DMA1_CH7_init((uint32_t) message, (uint32_t) &USART2->DR, 31);
 80001ce:	463b      	mov	r3, r7
 80001d0:	221f      	movs	r2, #31
 80001d2:	4905      	ldr	r1, [pc, #20]	; (80001e8 <main+0x78>)
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 f889 	bl	80002ec <DMA1_CH7_init>

	while(1)
 80001da:	e7fe      	b.n	80001da <main+0x6a>
 80001dc:	080004b8 	.word	0x080004b8
 80001e0:	40021000 	.word	0x40021000
 80001e4:	40010800 	.word	0x40010800
 80001e8:	40004404 	.word	0x40004404

080001ec <dma_callback>:

	}
}

static void dma_callback(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	GPIOA->ODR |= LED_PIN;
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <dma_callback+0x18>)
 80001f2:	68db      	ldr	r3, [r3, #12]
 80001f4:	4a03      	ldr	r2, [pc, #12]	; (8000204 <dma_callback+0x18>)
 80001f6:	f043 0320 	orr.w	r3, r3, #32
 80001fa:	60d3      	str	r3, [r2, #12]

}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	40010800 	.word	0x40010800

08000208 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	/* Check for transfer complete interrupt */
	if(DMA1->IFCR & ISR_TCIF7)
 800020c:	4b07      	ldr	r3, [pc, #28]	; (800022c <DMA1_Channel7_IRQHandler+0x24>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000214:	2b00      	cmp	r3, #0
 8000216:	d007      	beq.n	8000228 <DMA1_Channel7_IRQHandler+0x20>
	{
		/* Clear flag */
		DMA1->IFCR |= IFCR_TCIF7;
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <DMA1_Channel7_IRQHandler+0x24>)
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	4a03      	ldr	r2, [pc, #12]	; (800022c <DMA1_Channel7_IRQHandler+0x24>)
 800021e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000222:	6053      	str	r3, [r2, #4]
		// Do something
		dma_callback();
 8000224:	f7ff ffe2 	bl	80001ec <dma_callback>
	}
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	40020000 	.word	0x40020000

08000230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	2b00      	cmp	r3, #0
 8000240:	db0b      	blt.n	800025a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	f003 021f 	and.w	r2, r3, #31
 8000248:	4906      	ldr	r1, [pc, #24]	; (8000264 <__NVIC_EnableIRQ+0x34>)
 800024a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024e:	095b      	lsrs	r3, r3, #5
 8000250:	2001      	movs	r0, #1
 8000252:	fa00 f202 	lsl.w	r2, r0, r2
 8000256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	e000e100 	.word	0xe000e100

08000268 <UART2_TX_init>:
	uart2_write(ch);
	return ch;
}

void UART2_TX_init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	/*----------Configure UART GPIO pin----------*/
	/* Enable clock access to GPIOA */
	RCC->APB2ENR |= IOPAEN;
 800026c:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <UART2_TX_init+0x74>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a1a      	ldr	r2, [pc, #104]	; (80002dc <UART2_TX_init+0x74>)
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	6193      	str	r3, [r2, #24]

	/* Set PA2 mode to alternate function mode */
	GPIOA->CRL |= (1U<<8);
 8000278:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <UART2_TX_init+0x78>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a18      	ldr	r2, [pc, #96]	; (80002e0 <UART2_TX_init+0x78>)
 800027e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000282:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<9);
 8000284:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <UART2_TX_init+0x78>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a15      	ldr	r2, [pc, #84]	; (80002e0 <UART2_TX_init+0x78>)
 800028a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800028e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<10);
 8000290:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <UART2_TX_init+0x78>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <UART2_TX_init+0x78>)
 8000296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<11);
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <UART2_TX_init+0x78>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0f      	ldr	r2, [pc, #60]	; (80002e0 <UART2_TX_init+0x78>)
 80002a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002a6:	6013      	str	r3, [r2, #0]

	/*-----------Configure UART module-----------*/
	/* Enable clock access to UART2 */
	RCC->APB1ENR |= UART2EN;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <UART2_TX_init+0x74>)
 80002aa:	69db      	ldr	r3, [r3, #28]
 80002ac:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <UART2_TX_init+0x74>)
 80002ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002b2:	61d3      	str	r3, [r2, #28]

	/* Configure baud rate */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80002b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002b8:	490a      	ldr	r1, [pc, #40]	; (80002e4 <UART2_TX_init+0x7c>)
 80002ba:	480b      	ldr	r0, [pc, #44]	; (80002e8 <UART2_TX_init+0x80>)
 80002bc:	f000 f87e 	bl	80003bc <uart_set_baudrate>

	/* Configure the transfer direction */
	USART2->CR1 |= CR1_TE;
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <UART2_TX_init+0x80>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	4a08      	ldr	r2, [pc, #32]	; (80002e8 <UART2_TX_init+0x80>)
 80002c6:	f043 0308 	orr.w	r3, r3, #8
 80002ca:	60d3      	str	r3, [r2, #12]

	/* Enable UART module */
	USART2->CR1 |= CR1_UE;
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <UART2_TX_init+0x80>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <UART2_TX_init+0x80>)
 80002d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002d6:	60d3      	str	r3, [r2, #12]
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40010800 	.word	0x40010800
 80002e4:	007a1200 	.word	0x007a1200
 80002e8:	40004400 	.word	0x40004400

080002ec <DMA1_CH7_init>:
	/* Enable UART module */
	USART2->CR1 |= CR1_UE;
}

void DMA1_CH7_init(uint32_t src, uint32_t dst, uint32_t len)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	607a      	str	r2, [r7, #4]
	/* Enable clock access to DMA */
	RCC->AHBENR |= DMA1EN;
 80002f8:	4b2c      	ldr	r3, [pc, #176]	; (80003ac <DMA1_CH7_init+0xc0>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <DMA1_CH7_init+0xc0>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6153      	str	r3, [r2, #20]

	/* Disable DMA1 CH7 */
	DMA1_Channel7->CCR &=~CCR_EN;
 8000304:	4b2a      	ldr	r3, [pc, #168]	; (80003b0 <DMA1_CH7_init+0xc4>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a29      	ldr	r2, [pc, #164]	; (80003b0 <DMA1_CH7_init+0xc4>)
 800030a:	f023 0301 	bic.w	r3, r3, #1
 800030e:	6013      	str	r3, [r2, #0]

	while(DMA1_Channel7->CCR & CCR_EN);
 8000310:	bf00      	nop
 8000312:	4b27      	ldr	r3, [pc, #156]	; (80003b0 <DMA1_CH7_init+0xc4>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f003 0301 	and.w	r3, r3, #1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d1f9      	bne.n	8000312 <DMA1_CH7_init+0x26>

	/* Clear all interrupt flags of CH7 */
	DMA1->IFCR |= (1U<<24);
 800031e:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <DMA1_CH7_init+0xc8>)
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	4a24      	ldr	r2, [pc, #144]	; (80003b4 <DMA1_CH7_init+0xc8>)
 8000324:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000328:	6053      	str	r3, [r2, #4]
	DMA1->IFCR |= (1U<<25);
 800032a:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <DMA1_CH7_init+0xc8>)
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	4a21      	ldr	r2, [pc, #132]	; (80003b4 <DMA1_CH7_init+0xc8>)
 8000330:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000334:	6053      	str	r3, [r2, #4]
	DMA1->IFCR |= (1U<<26);
 8000336:	4b1f      	ldr	r3, [pc, #124]	; (80003b4 <DMA1_CH7_init+0xc8>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	4a1e      	ldr	r2, [pc, #120]	; (80003b4 <DMA1_CH7_init+0xc8>)
 800033c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000340:	6053      	str	r3, [r2, #4]
	DMA1->IFCR |= (1U<<27);
 8000342:	4b1c      	ldr	r3, [pc, #112]	; (80003b4 <DMA1_CH7_init+0xc8>)
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	4a1b      	ldr	r2, [pc, #108]	; (80003b4 <DMA1_CH7_init+0xc8>)
 8000348:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800034c:	6053      	str	r3, [r2, #4]

	/* Set the destination buffer */
	DMA1_Channel7->CPAR = dst;
 800034e:	4a18      	ldr	r2, [pc, #96]	; (80003b0 <DMA1_CH7_init+0xc4>)
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	6093      	str	r3, [r2, #8]

	/* Set the source buffer */
	DMA1_Channel7->CMAR = src;
 8000354:	4a16      	ldr	r2, [pc, #88]	; (80003b0 <DMA1_CH7_init+0xc4>)
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	60d3      	str	r3, [r2, #12]

	/* Set length */
	DMA1_Channel7->CNDTR = len;
 800035a:	4a15      	ldr	r2, [pc, #84]	; (80003b0 <DMA1_CH7_init+0xc4>)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	6053      	str	r3, [r2, #4]

	/* Enable memory increment */
	DMA1_Channel7->CCR |= CCR_MINC;
 8000360:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <DMA1_CH7_init+0xc4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a12      	ldr	r2, [pc, #72]	; (80003b0 <DMA1_CH7_init+0xc4>)
 8000366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800036a:	6013      	str	r3, [r2, #0]

	/* Configure transfer direction */
	DMA1_Channel7->CCR |= CCR_DIR_FR_MEM;
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <DMA1_CH7_init+0xc4>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a0f      	ldr	r2, [pc, #60]	; (80003b0 <DMA1_CH7_init+0xc4>)
 8000372:	f043 0310 	orr.w	r3, r3, #16
 8000376:	6013      	str	r3, [r2, #0]

	/* Enable DMA transfer complete interrupt */
	DMA1_Channel7->CCR |= CCR_TCIE;
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <DMA1_CH7_init+0xc4>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a0c      	ldr	r2, [pc, #48]	; (80003b0 <DMA1_CH7_init+0xc4>)
 800037e:	f043 0302 	orr.w	r3, r3, #2
 8000382:	6013      	str	r3, [r2, #0]

	/* Enable DMA1 CH7 */
	DMA1_Channel7->CCR |= CCR_EN;
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <DMA1_CH7_init+0xc4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a09      	ldr	r2, [pc, #36]	; (80003b0 <DMA1_CH7_init+0xc4>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	6013      	str	r3, [r2, #0]

	/* Enable UART2 Transmitter DMA */
	USART2->CR3 |= CR3_DMAT;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <DMA1_CH7_init+0xcc>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a08      	ldr	r2, [pc, #32]	; (80003b8 <DMA1_CH7_init+0xcc>)
 8000396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800039a:	6153      	str	r3, [r2, #20]

	/* DMA Interrupt enable in NVIC */
	NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800039c:	2011      	movs	r0, #17
 800039e:	f7ff ff47 	bl	8000230 <__NVIC_EnableIRQ>
}
 80003a2:	bf00      	nop
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40020080 	.word	0x40020080
 80003b4:	40020000 	.word	0x40020000
 80003b8:	40004400 	.word	0x40004400

080003bc <uart_set_baudrate>:
	USART2->DR = (ch & 0xFF);

}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80003c8:	6879      	ldr	r1, [r7, #4]
 80003ca:	68b8      	ldr	r0, [r7, #8]
 80003cc:	f000 f808 	bl	80003e0 <compute_uart_bd>
 80003d0:	4603      	mov	r3, r0
 80003d2:	461a      	mov	r2, r3
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	609a      	str	r2, [r3, #8]
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	085a      	lsrs	r2, r3, #1
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	441a      	add	r2, r3
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003f8:	b29b      	uxth	r3, r3
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000404:	480d      	ldr	r0, [pc, #52]	; (800043c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000406:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000408:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800040c:	480c      	ldr	r0, [pc, #48]	; (8000440 <LoopForever+0x6>)
  ldr r1, =_edata
 800040e:	490d      	ldr	r1, [pc, #52]	; (8000444 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000410:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <LoopForever+0xe>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000414:	e002      	b.n	800041c <LoopCopyDataInit>

08000416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041a:	3304      	adds	r3, #4

0800041c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800041c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000420:	d3f9      	bcc.n	8000416 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000422:	4a0a      	ldr	r2, [pc, #40]	; (800044c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000424:	4c0a      	ldr	r4, [pc, #40]	; (8000450 <LoopForever+0x16>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000428:	e001      	b.n	800042e <LoopFillZerobss>

0800042a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800042c:	3204      	adds	r2, #4

0800042e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000430:	d3fb      	bcc.n	800042a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000432:	f000 f811 	bl	8000458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000436:	f7ff fe9b 	bl	8000170 <main>

0800043a <LoopForever>:

LoopForever:
    b LoopForever
 800043a:	e7fe      	b.n	800043a <LoopForever>
  ldr   r0, =_estack
 800043c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000444:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000448:	080004e0 	.word	0x080004e0
  ldr r2, =_sbss
 800044c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000450:	2000001c 	.word	0x2000001c

08000454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000454:	e7fe      	b.n	8000454 <ADC1_2_IRQHandler>
	...

08000458 <__libc_init_array>:
 8000458:	b570      	push	{r4, r5, r6, lr}
 800045a:	2600      	movs	r6, #0
 800045c:	4d0c      	ldr	r5, [pc, #48]	; (8000490 <__libc_init_array+0x38>)
 800045e:	4c0d      	ldr	r4, [pc, #52]	; (8000494 <__libc_init_array+0x3c>)
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	10a4      	asrs	r4, r4, #2
 8000464:	42a6      	cmp	r6, r4
 8000466:	d109      	bne.n	800047c <__libc_init_array+0x24>
 8000468:	f000 f81a 	bl	80004a0 <_init>
 800046c:	2600      	movs	r6, #0
 800046e:	4d0a      	ldr	r5, [pc, #40]	; (8000498 <__libc_init_array+0x40>)
 8000470:	4c0a      	ldr	r4, [pc, #40]	; (800049c <__libc_init_array+0x44>)
 8000472:	1b64      	subs	r4, r4, r5
 8000474:	10a4      	asrs	r4, r4, #2
 8000476:	42a6      	cmp	r6, r4
 8000478:	d105      	bne.n	8000486 <__libc_init_array+0x2e>
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000480:	4798      	blx	r3
 8000482:	3601      	adds	r6, #1
 8000484:	e7ee      	b.n	8000464 <__libc_init_array+0xc>
 8000486:	f855 3b04 	ldr.w	r3, [r5], #4
 800048a:	4798      	blx	r3
 800048c:	3601      	adds	r6, #1
 800048e:	e7f2      	b.n	8000476 <__libc_init_array+0x1e>
 8000490:	080004d8 	.word	0x080004d8
 8000494:	080004d8 	.word	0x080004d8
 8000498:	080004d8 	.word	0x080004d8
 800049c:	080004dc 	.word	0x080004dc

080004a0 <_init>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	bf00      	nop
 80004a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a6:	bc08      	pop	{r3}
 80004a8:	469e      	mov	lr, r3
 80004aa:	4770      	bx	lr

080004ac <_fini>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	bf00      	nop
 80004b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b2:	bc08      	pop	{r3}
 80004b4:	469e      	mov	lr, r3
 80004b6:	4770      	bx	lr

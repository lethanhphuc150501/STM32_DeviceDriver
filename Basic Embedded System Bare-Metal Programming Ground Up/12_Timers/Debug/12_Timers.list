
12_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001388  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080014b8  080014b8  000114b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001564  08001564  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001564  08001564  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001564  08001564  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001564  08001564  00011564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001568  08001568  00011568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800156c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000064  080015d0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080015d0  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011a5  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000567  00000000  00000000  00021232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  000217a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000128  00000000  00000000  00021920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f7d  00000000  00000000  00021a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001db1  00000000  00000000  000239c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005995b  00000000  00000000  00025776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007f0d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c8c  00000000  00000000  0007f124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	080014a0 	.word	0x080014a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	080014a0 	.word	0x080014a0

08000170 <main>:
#define LED_PIN		PIN5

int a, b, c;

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= IOPAEN;
 8000174:	4b26      	ldr	r3, [pc, #152]	; (8000210 <main+0xa0>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a25      	ldr	r2, [pc, #148]	; (8000210 <main+0xa0>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	GPIOA->CRL |= (1U<<21);
 8000180:	4b24      	ldr	r3, [pc, #144]	; (8000214 <main+0xa4>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a23      	ldr	r2, [pc, #140]	; (8000214 <main+0xa4>)
 8000186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800018a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<20);
 800018c:	4b21      	ldr	r3, [pc, #132]	; (8000214 <main+0xa4>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a20      	ldr	r2, [pc, #128]	; (8000214 <main+0xa4>)
 8000192:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000196:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<22);
 8000198:	4b1e      	ldr	r3, [pc, #120]	; (8000214 <main+0xa4>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a1d      	ldr	r2, [pc, #116]	; (8000214 <main+0xa4>)
 800019e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80001a2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<23);
 80001a4:	4b1b      	ldr	r3, [pc, #108]	; (8000214 <main+0xa4>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a1a      	ldr	r2, [pc, #104]	; (8000214 <main+0xa4>)
 80001aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80001ae:	6013      	str	r3, [r2, #0]

	UART2_TX_init();
 80001b0:	f000 f90a 	bl	80003c8 <UART2_TX_init>
	TIM2_1Hz_init();
 80001b4:	f000 f8d8 	bl	8000368 <TIM2_1Hz_init>

	while(1)
	{
		a = TIM2->CNT;
 80001b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001be:	461a      	mov	r2, r3
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <main+0xa8>)
 80001c2:	601a      	str	r2, [r3, #0]

		/* Wait for UIF */
		while(!(TIM2->SR & SR_UIF));
 80001c4:	bf00      	nop
 80001c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ca:	691b      	ldr	r3, [r3, #16]
 80001cc:	f003 0301 	and.w	r3, r3, #1
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d0f8      	beq.n	80001c6 <main+0x56>

		b = TIM2->CNT;
 80001d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001da:	461a      	mov	r2, r3
 80001dc:	4b0f      	ldr	r3, [pc, #60]	; (800021c <main+0xac>)
 80001de:	601a      	str	r2, [r3, #0]

		/* Clear UIF */
		TIM2->SR &=~SR_UIF;
 80001e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001e4:	691b      	ldr	r3, [r3, #16]
 80001e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001ea:	f023 0301 	bic.w	r3, r3, #1
 80001ee:	6113      	str	r3, [r2, #16]

		c = TIM2->CNT;
 80001f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001f6:	461a      	mov	r2, r3
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <main+0xb0>)
 80001fa:	601a      	str	r2, [r3, #0]

		printf("A second passed! \n\r");
 80001fc:	4809      	ldr	r0, [pc, #36]	; (8000224 <main+0xb4>)
 80001fe:	f000 f9bb 	bl	8000578 <iprintf>
		GPIOA->ODR ^= LED_PIN;
 8000202:	4b04      	ldr	r3, [pc, #16]	; (8000214 <main+0xa4>)
 8000204:	68db      	ldr	r3, [r3, #12]
 8000206:	4a03      	ldr	r2, [pc, #12]	; (8000214 <main+0xa4>)
 8000208:	f083 0320 	eor.w	r3, r3, #32
 800020c:	60d3      	str	r3, [r2, #12]
		a = TIM2->CNT;
 800020e:	e7d3      	b.n	80001b8 <main+0x48>
 8000210:	40021000 	.word	0x40021000
 8000214:	40010800 	.word	0x40010800
 8000218:	20000080 	.word	0x20000080
 800021c:	20000084 	.word	0x20000084
 8000220:	20000088 	.word	0x20000088
 8000224:	080014b8 	.word	0x080014b8

08000228 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000234:	2300      	movs	r3, #0
 8000236:	617b      	str	r3, [r7, #20]
 8000238:	e00a      	b.n	8000250 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800023a:	f3af 8000 	nop.w
 800023e:	4601      	mov	r1, r0
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	1c5a      	adds	r2, r3, #1
 8000244:	60ba      	str	r2, [r7, #8]
 8000246:	b2ca      	uxtb	r2, r1
 8000248:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	3301      	adds	r3, #1
 800024e:	617b      	str	r3, [r7, #20]
 8000250:	697a      	ldr	r2, [r7, #20]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	429a      	cmp	r2, r3
 8000256:	dbf0      	blt.n	800023a <_read+0x12>
	}

return len;
 8000258:	687b      	ldr	r3, [r7, #4]
}
 800025a:	4618      	mov	r0, r3
 800025c:	3718      	adds	r7, #24
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}

08000262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000262:	b580      	push	{r7, lr}
 8000264:	b086      	sub	sp, #24
 8000266:	af00      	add	r7, sp, #0
 8000268:	60f8      	str	r0, [r7, #12]
 800026a:	60b9      	str	r1, [r7, #8]
 800026c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]
 8000272:	e009      	b.n	8000288 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	1c5a      	adds	r2, r3, #1
 8000278:	60ba      	str	r2, [r7, #8]
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f897 	bl	80003b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	3301      	adds	r3, #1
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	697a      	ldr	r2, [r7, #20]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	429a      	cmp	r2, r3
 800028e:	dbf1      	blt.n	8000274 <_write+0x12>
	}
	return len;
 8000290:	687b      	ldr	r3, [r7, #4]
}
 8000292:	4618      	mov	r0, r3
 8000294:	3718      	adds	r7, #24
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}

0800029a <_close>:

int _close(int file)
{
 800029a:	b480      	push	{r7}
 800029c:	b083      	sub	sp, #12
 800029e:	af00      	add	r7, sp, #0
 80002a0:	6078      	str	r0, [r7, #4]
	return -1;
 80002a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr

080002b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002c0:	605a      	str	r2, [r3, #4]
	return 0;
 80002c2:	2300      	movs	r3, #0
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr

080002ce <_isatty>:

int _isatty(int file)
{
 80002ce:	b480      	push	{r7}
 80002d0:	b083      	sub	sp, #12
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
	return 1;
 80002d6:	2301      	movs	r3, #1
}
 80002d8:	4618      	mov	r0, r3
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr

080002e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002e2:	b480      	push	{r7}
 80002e4:	b085      	sub	sp, #20
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	60f8      	str	r0, [r7, #12]
 80002ea:	60b9      	str	r1, [r7, #8]
 80002ec:	607a      	str	r2, [r7, #4]
	return 0;
 80002ee:	2300      	movs	r3, #0
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3714      	adds	r7, #20
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
	...

080002fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000304:	4a14      	ldr	r2, [pc, #80]	; (8000358 <_sbrk+0x5c>)
 8000306:	4b15      	ldr	r3, [pc, #84]	; (800035c <_sbrk+0x60>)
 8000308:	1ad3      	subs	r3, r2, r3
 800030a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000310:	4b13      	ldr	r3, [pc, #76]	; (8000360 <_sbrk+0x64>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d102      	bne.n	800031e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <_sbrk+0x64>)
 800031a:	4a12      	ldr	r2, [pc, #72]	; (8000364 <_sbrk+0x68>)
 800031c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <_sbrk+0x64>)
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4413      	add	r3, r2
 8000326:	693a      	ldr	r2, [r7, #16]
 8000328:	429a      	cmp	r2, r3
 800032a:	d207      	bcs.n	800033c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800032c:	f000 f8f2 	bl	8000514 <__errno>
 8000330:	4603      	mov	r3, r0
 8000332:	220c      	movs	r2, #12
 8000334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000336:	f04f 33ff 	mov.w	r3, #4294967295
 800033a:	e009      	b.n	8000350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800033c:	4b08      	ldr	r3, [pc, #32]	; (8000360 <_sbrk+0x64>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000342:	4b07      	ldr	r3, [pc, #28]	; (8000360 <_sbrk+0x64>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	4a05      	ldr	r2, [pc, #20]	; (8000360 <_sbrk+0x64>)
 800034c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800034e:	68fb      	ldr	r3, [r7, #12]
}
 8000350:	4618      	mov	r0, r3
 8000352:	3718      	adds	r7, #24
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20005000 	.word	0x20005000
 800035c:	00000400 	.word	0x00000400
 8000360:	2000008c 	.word	0x2000008c
 8000364:	200000a0 	.word	0x200000a0

08000368 <TIM2_1Hz_init>:

#define TIM2EN			(1U<<0)
#define CR1_CEN				(1U<<0)

void TIM2_1Hz_init(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	/* Enable clock access to TIM2 */
	RCC->APB1ENR |= TIM2EN;
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <TIM2_1Hz_init+0x44>)
 800036e:	69db      	ldr	r3, [r3, #28]
 8000370:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <TIM2_1Hz_init+0x44>)
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	61d3      	str	r3, [r2, #28]

	/* Set prescaler value */
	TIM2->PSC = 800 - 1; 				// 	8 000 000 / 800 = 10 000
 8000378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037c:	f240 321f 	movw	r2, #799	; 0x31f
 8000380:	629a      	str	r2, [r3, #40]	; 0x28

	/* Set auto-reload value */
	TIM2->ARR = 10000 - 1;				// 10 000 / 10 000 = 1
 8000382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000386:	f242 720f 	movw	r2, #9999	; 0x270f
 800038a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Clear counter */
	TIM2->CNT = 0;
 800038c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000390:	2200      	movs	r2, #0
 8000392:	625a      	str	r2, [r3, #36]	; 0x24

	/* Enable timer */
	TIM2->CR1 |= CR1_CEN;
 8000394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	6013      	str	r3, [r2, #0]
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000

080003b0 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void uart2_write(int ch);

int __io_putchar(int ch)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f000 f847 	bl	800044c <uart2_write>
	return ch;
 80003be:	687b      	ldr	r3, [r7, #4]
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <UART2_TX_init>:

void UART2_TX_init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	/*----------Configure UART GPIO pin----------*/
	/* Enable clock access to GPIOA */
	RCC->APB2ENR |= IOPAEN;
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <UART2_TX_init+0x74>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a1a      	ldr	r2, [pc, #104]	; (800043c <UART2_TX_init+0x74>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6193      	str	r3, [r2, #24]

	/* Set PA2 mode to alternate function mode */
	GPIOA->CRL |= (1U<<8);
 80003d8:	4b19      	ldr	r3, [pc, #100]	; (8000440 <UART2_TX_init+0x78>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a18      	ldr	r2, [pc, #96]	; (8000440 <UART2_TX_init+0x78>)
 80003de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<9);
 80003e4:	4b16      	ldr	r3, [pc, #88]	; (8000440 <UART2_TX_init+0x78>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a15      	ldr	r2, [pc, #84]	; (8000440 <UART2_TX_init+0x78>)
 80003ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ee:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<10);
 80003f0:	4b13      	ldr	r3, [pc, #76]	; (8000440 <UART2_TX_init+0x78>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a12      	ldr	r2, [pc, #72]	; (8000440 <UART2_TX_init+0x78>)
 80003f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80003fa:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<11);
 80003fc:	4b10      	ldr	r3, [pc, #64]	; (8000440 <UART2_TX_init+0x78>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a0f      	ldr	r2, [pc, #60]	; (8000440 <UART2_TX_init+0x78>)
 8000402:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000406:	6013      	str	r3, [r2, #0]

	/*-----------Configure UART module-----------*/
	/* Enable clock access to UART2 */
	RCC->APB1ENR |= UART2EN;
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <UART2_TX_init+0x74>)
 800040a:	69db      	ldr	r3, [r3, #28]
 800040c:	4a0b      	ldr	r2, [pc, #44]	; (800043c <UART2_TX_init+0x74>)
 800040e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000412:	61d3      	str	r3, [r2, #28]

	/* Configure baud rate */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000418:	490a      	ldr	r1, [pc, #40]	; (8000444 <UART2_TX_init+0x7c>)
 800041a:	480b      	ldr	r0, [pc, #44]	; (8000448 <UART2_TX_init+0x80>)
 800041c:	f000 f82c 	bl	8000478 <uart_set_baudrate>

	/* Configure the transfer direction */
	USART2->CR1 |= CR1_TE;
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <UART2_TX_init+0x80>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	4a08      	ldr	r2, [pc, #32]	; (8000448 <UART2_TX_init+0x80>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	60d3      	str	r3, [r2, #12]

	/* Enable UART module */
	USART2->CR1 |= CR1_UE;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <UART2_TX_init+0x80>)
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	4a05      	ldr	r2, [pc, #20]	; (8000448 <UART2_TX_init+0x80>)
 8000432:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000436:	60d3      	str	r3, [r2, #12]
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40021000 	.word	0x40021000
 8000440:	40010800 	.word	0x40010800
 8000444:	007a1200 	.word	0x007a1200
 8000448:	40004400 	.word	0x40004400

0800044c <uart2_write>:
	/* Read data */
	return USART2->DR;
}

void uart2_write(int ch)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	/* Make sure the transmit register is empty */
	while(!(USART2->SR & SR_TXE));
 8000454:	bf00      	nop
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <uart2_write+0x28>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800045e:	2b00      	cmp	r3, #0
 8000460:	d0f9      	beq.n	8000456 <uart2_write+0xa>

	/* Write to transmit data register */
	USART2->DR = (ch & 0xFF);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a03      	ldr	r2, [pc, #12]	; (8000474 <uart2_write+0x28>)
 8000466:	b2db      	uxtb	r3, r3
 8000468:	6053      	str	r3, [r2, #4]

}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40004400 	.word	0x40004400

08000478 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000484:	6879      	ldr	r1, [r7, #4]
 8000486:	68b8      	ldr	r0, [r7, #8]
 8000488:	f000 f808 	bl	800049c <compute_uart_bd>
 800048c:	4603      	mov	r3, r0
 800048e:	461a      	mov	r2, r3
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	609a      	str	r2, [r3, #8]
}
 8000494:	bf00      	nop
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	085a      	lsrs	r2, r3, #1
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	441a      	add	r2, r3
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80004b4:	b29b      	uxth	r3, r3
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c0:	480d      	ldr	r0, [pc, #52]	; (80004f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c8:	480c      	ldr	r0, [pc, #48]	; (80004fc <LoopForever+0x6>)
  ldr r1, =_edata
 80004ca:	490d      	ldr	r1, [pc, #52]	; (8000500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <LoopForever+0xe>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d0:	e002      	b.n	80004d8 <LoopCopyDataInit>

080004d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d6:	3304      	adds	r3, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004dc:	d3f9      	bcc.n	80004d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e0:	4c0a      	ldr	r4, [pc, #40]	; (800050c <LoopForever+0x16>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e4:	e001      	b.n	80004ea <LoopFillZerobss>

080004e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e8:	3204      	adds	r2, #4

080004ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ec:	d3fb      	bcc.n	80004e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ee:	f000 f817 	bl	8000520 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f2:	f7ff fe3d 	bl	8000170 <main>

080004f6 <LoopForever>:

LoopForever:
    b LoopForever
 80004f6:	e7fe      	b.n	80004f6 <LoopForever>
  ldr   r0, =_estack
 80004f8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80004fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000500:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000504:	0800156c 	.word	0x0800156c
  ldr r2, =_sbss
 8000508:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800050c:	200000a0 	.word	0x200000a0

08000510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC1_2_IRQHandler>
	...

08000514 <__errno>:
 8000514:	4b01      	ldr	r3, [pc, #4]	; (800051c <__errno+0x8>)
 8000516:	6818      	ldr	r0, [r3, #0]
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000000 	.word	0x20000000

08000520 <__libc_init_array>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2600      	movs	r6, #0
 8000524:	4d0c      	ldr	r5, [pc, #48]	; (8000558 <__libc_init_array+0x38>)
 8000526:	4c0d      	ldr	r4, [pc, #52]	; (800055c <__libc_init_array+0x3c>)
 8000528:	1b64      	subs	r4, r4, r5
 800052a:	10a4      	asrs	r4, r4, #2
 800052c:	42a6      	cmp	r6, r4
 800052e:	d109      	bne.n	8000544 <__libc_init_array+0x24>
 8000530:	f000 ffb6 	bl	80014a0 <_init>
 8000534:	2600      	movs	r6, #0
 8000536:	4d0a      	ldr	r5, [pc, #40]	; (8000560 <__libc_init_array+0x40>)
 8000538:	4c0a      	ldr	r4, [pc, #40]	; (8000564 <__libc_init_array+0x44>)
 800053a:	1b64      	subs	r4, r4, r5
 800053c:	10a4      	asrs	r4, r4, #2
 800053e:	42a6      	cmp	r6, r4
 8000540:	d105      	bne.n	800054e <__libc_init_array+0x2e>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	f855 3b04 	ldr.w	r3, [r5], #4
 8000548:	4798      	blx	r3
 800054a:	3601      	adds	r6, #1
 800054c:	e7ee      	b.n	800052c <__libc_init_array+0xc>
 800054e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000552:	4798      	blx	r3
 8000554:	3601      	adds	r6, #1
 8000556:	e7f2      	b.n	800053e <__libc_init_array+0x1e>
 8000558:	08001564 	.word	0x08001564
 800055c:	08001564 	.word	0x08001564
 8000560:	08001564 	.word	0x08001564
 8000564:	08001568 	.word	0x08001568

08000568 <memset>:
 8000568:	4603      	mov	r3, r0
 800056a:	4402      	add	r2, r0
 800056c:	4293      	cmp	r3, r2
 800056e:	d100      	bne.n	8000572 <memset+0xa>
 8000570:	4770      	bx	lr
 8000572:	f803 1b01 	strb.w	r1, [r3], #1
 8000576:	e7f9      	b.n	800056c <memset+0x4>

08000578 <iprintf>:
 8000578:	b40f      	push	{r0, r1, r2, r3}
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <iprintf+0x2c>)
 800057c:	b513      	push	{r0, r1, r4, lr}
 800057e:	681c      	ldr	r4, [r3, #0]
 8000580:	b124      	cbz	r4, 800058c <iprintf+0x14>
 8000582:	69a3      	ldr	r3, [r4, #24]
 8000584:	b913      	cbnz	r3, 800058c <iprintf+0x14>
 8000586:	4620      	mov	r0, r4
 8000588:	f000 f866 	bl	8000658 <__sinit>
 800058c:	ab05      	add	r3, sp, #20
 800058e:	4620      	mov	r0, r4
 8000590:	9a04      	ldr	r2, [sp, #16]
 8000592:	68a1      	ldr	r1, [r4, #8]
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	f000 f9bb 	bl	8000910 <_vfiprintf_r>
 800059a:	b002      	add	sp, #8
 800059c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005a0:	b004      	add	sp, #16
 80005a2:	4770      	bx	lr
 80005a4:	20000000 	.word	0x20000000

080005a8 <std>:
 80005a8:	2300      	movs	r3, #0
 80005aa:	b510      	push	{r4, lr}
 80005ac:	4604      	mov	r4, r0
 80005ae:	e9c0 3300 	strd	r3, r3, [r0]
 80005b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005b6:	6083      	str	r3, [r0, #8]
 80005b8:	8181      	strh	r1, [r0, #12]
 80005ba:	6643      	str	r3, [r0, #100]	; 0x64
 80005bc:	81c2      	strh	r2, [r0, #14]
 80005be:	6183      	str	r3, [r0, #24]
 80005c0:	4619      	mov	r1, r3
 80005c2:	2208      	movs	r2, #8
 80005c4:	305c      	adds	r0, #92	; 0x5c
 80005c6:	f7ff ffcf 	bl	8000568 <memset>
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <std+0x38>)
 80005cc:	6224      	str	r4, [r4, #32]
 80005ce:	6263      	str	r3, [r4, #36]	; 0x24
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <std+0x3c>)
 80005d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <std+0x40>)
 80005d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <std+0x44>)
 80005da:	6323      	str	r3, [r4, #48]	; 0x30
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	bf00      	nop
 80005e0:	08000ebd 	.word	0x08000ebd
 80005e4:	08000edf 	.word	0x08000edf
 80005e8:	08000f17 	.word	0x08000f17
 80005ec:	08000f3b 	.word	0x08000f3b

080005f0 <_cleanup_r>:
 80005f0:	4901      	ldr	r1, [pc, #4]	; (80005f8 <_cleanup_r+0x8>)
 80005f2:	f000 b8af 	b.w	8000754 <_fwalk_reent>
 80005f6:	bf00      	nop
 80005f8:	0800120d 	.word	0x0800120d

080005fc <__sfmoreglue>:
 80005fc:	2268      	movs	r2, #104	; 0x68
 80005fe:	b570      	push	{r4, r5, r6, lr}
 8000600:	1e4d      	subs	r5, r1, #1
 8000602:	4355      	muls	r5, r2
 8000604:	460e      	mov	r6, r1
 8000606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800060a:	f000 f8e5 	bl	80007d8 <_malloc_r>
 800060e:	4604      	mov	r4, r0
 8000610:	b140      	cbz	r0, 8000624 <__sfmoreglue+0x28>
 8000612:	2100      	movs	r1, #0
 8000614:	e9c0 1600 	strd	r1, r6, [r0]
 8000618:	300c      	adds	r0, #12
 800061a:	60a0      	str	r0, [r4, #8]
 800061c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000620:	f7ff ffa2 	bl	8000568 <memset>
 8000624:	4620      	mov	r0, r4
 8000626:	bd70      	pop	{r4, r5, r6, pc}

08000628 <__sfp_lock_acquire>:
 8000628:	4801      	ldr	r0, [pc, #4]	; (8000630 <__sfp_lock_acquire+0x8>)
 800062a:	f000 b8b3 	b.w	8000794 <__retarget_lock_acquire_recursive>
 800062e:	bf00      	nop
 8000630:	20000091 	.word	0x20000091

08000634 <__sfp_lock_release>:
 8000634:	4801      	ldr	r0, [pc, #4]	; (800063c <__sfp_lock_release+0x8>)
 8000636:	f000 b8ae 	b.w	8000796 <__retarget_lock_release_recursive>
 800063a:	bf00      	nop
 800063c:	20000091 	.word	0x20000091

08000640 <__sinit_lock_acquire>:
 8000640:	4801      	ldr	r0, [pc, #4]	; (8000648 <__sinit_lock_acquire+0x8>)
 8000642:	f000 b8a7 	b.w	8000794 <__retarget_lock_acquire_recursive>
 8000646:	bf00      	nop
 8000648:	20000092 	.word	0x20000092

0800064c <__sinit_lock_release>:
 800064c:	4801      	ldr	r0, [pc, #4]	; (8000654 <__sinit_lock_release+0x8>)
 800064e:	f000 b8a2 	b.w	8000796 <__retarget_lock_release_recursive>
 8000652:	bf00      	nop
 8000654:	20000092 	.word	0x20000092

08000658 <__sinit>:
 8000658:	b510      	push	{r4, lr}
 800065a:	4604      	mov	r4, r0
 800065c:	f7ff fff0 	bl	8000640 <__sinit_lock_acquire>
 8000660:	69a3      	ldr	r3, [r4, #24]
 8000662:	b11b      	cbz	r3, 800066c <__sinit+0x14>
 8000664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000668:	f7ff bff0 	b.w	800064c <__sinit_lock_release>
 800066c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000670:	6523      	str	r3, [r4, #80]	; 0x50
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <__sinit+0x68>)
 8000674:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <__sinit+0x6c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	62a2      	str	r2, [r4, #40]	; 0x28
 800067a:	42a3      	cmp	r3, r4
 800067c:	bf08      	it	eq
 800067e:	2301      	moveq	r3, #1
 8000680:	4620      	mov	r0, r4
 8000682:	bf08      	it	eq
 8000684:	61a3      	streq	r3, [r4, #24]
 8000686:	f000 f81f 	bl	80006c8 <__sfp>
 800068a:	6060      	str	r0, [r4, #4]
 800068c:	4620      	mov	r0, r4
 800068e:	f000 f81b 	bl	80006c8 <__sfp>
 8000692:	60a0      	str	r0, [r4, #8]
 8000694:	4620      	mov	r0, r4
 8000696:	f000 f817 	bl	80006c8 <__sfp>
 800069a:	2200      	movs	r2, #0
 800069c:	2104      	movs	r1, #4
 800069e:	60e0      	str	r0, [r4, #12]
 80006a0:	6860      	ldr	r0, [r4, #4]
 80006a2:	f7ff ff81 	bl	80005a8 <std>
 80006a6:	2201      	movs	r2, #1
 80006a8:	2109      	movs	r1, #9
 80006aa:	68a0      	ldr	r0, [r4, #8]
 80006ac:	f7ff ff7c 	bl	80005a8 <std>
 80006b0:	2202      	movs	r2, #2
 80006b2:	2112      	movs	r1, #18
 80006b4:	68e0      	ldr	r0, [r4, #12]
 80006b6:	f7ff ff77 	bl	80005a8 <std>
 80006ba:	2301      	movs	r3, #1
 80006bc:	61a3      	str	r3, [r4, #24]
 80006be:	e7d1      	b.n	8000664 <__sinit+0xc>
 80006c0:	080014cc 	.word	0x080014cc
 80006c4:	080005f1 	.word	0x080005f1

080006c8 <__sfp>:
 80006c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ca:	4607      	mov	r7, r0
 80006cc:	f7ff ffac 	bl	8000628 <__sfp_lock_acquire>
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <__sfp+0x84>)
 80006d2:	681e      	ldr	r6, [r3, #0]
 80006d4:	69b3      	ldr	r3, [r6, #24]
 80006d6:	b913      	cbnz	r3, 80006de <__sfp+0x16>
 80006d8:	4630      	mov	r0, r6
 80006da:	f7ff ffbd 	bl	8000658 <__sinit>
 80006de:	3648      	adds	r6, #72	; 0x48
 80006e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	d503      	bpl.n	80006f0 <__sfp+0x28>
 80006e8:	6833      	ldr	r3, [r6, #0]
 80006ea:	b30b      	cbz	r3, 8000730 <__sfp+0x68>
 80006ec:	6836      	ldr	r6, [r6, #0]
 80006ee:	e7f7      	b.n	80006e0 <__sfp+0x18>
 80006f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80006f4:	b9d5      	cbnz	r5, 800072c <__sfp+0x64>
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <__sfp+0x88>)
 80006f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80006fc:	60e3      	str	r3, [r4, #12]
 80006fe:	6665      	str	r5, [r4, #100]	; 0x64
 8000700:	f000 f847 	bl	8000792 <__retarget_lock_init_recursive>
 8000704:	f7ff ff96 	bl	8000634 <__sfp_lock_release>
 8000708:	2208      	movs	r2, #8
 800070a:	4629      	mov	r1, r5
 800070c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000714:	6025      	str	r5, [r4, #0]
 8000716:	61a5      	str	r5, [r4, #24]
 8000718:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800071c:	f7ff ff24 	bl	8000568 <memset>
 8000720:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000724:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000728:	4620      	mov	r0, r4
 800072a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800072c:	3468      	adds	r4, #104	; 0x68
 800072e:	e7d9      	b.n	80006e4 <__sfp+0x1c>
 8000730:	2104      	movs	r1, #4
 8000732:	4638      	mov	r0, r7
 8000734:	f7ff ff62 	bl	80005fc <__sfmoreglue>
 8000738:	4604      	mov	r4, r0
 800073a:	6030      	str	r0, [r6, #0]
 800073c:	2800      	cmp	r0, #0
 800073e:	d1d5      	bne.n	80006ec <__sfp+0x24>
 8000740:	f7ff ff78 	bl	8000634 <__sfp_lock_release>
 8000744:	230c      	movs	r3, #12
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	e7ee      	b.n	8000728 <__sfp+0x60>
 800074a:	bf00      	nop
 800074c:	080014cc 	.word	0x080014cc
 8000750:	ffff0001 	.word	0xffff0001

08000754 <_fwalk_reent>:
 8000754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000758:	4606      	mov	r6, r0
 800075a:	4688      	mov	r8, r1
 800075c:	2700      	movs	r7, #0
 800075e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000762:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000766:	f1b9 0901 	subs.w	r9, r9, #1
 800076a:	d505      	bpl.n	8000778 <_fwalk_reent+0x24>
 800076c:	6824      	ldr	r4, [r4, #0]
 800076e:	2c00      	cmp	r4, #0
 8000770:	d1f7      	bne.n	8000762 <_fwalk_reent+0xe>
 8000772:	4638      	mov	r0, r7
 8000774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000778:	89ab      	ldrh	r3, [r5, #12]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d907      	bls.n	800078e <_fwalk_reent+0x3a>
 800077e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000782:	3301      	adds	r3, #1
 8000784:	d003      	beq.n	800078e <_fwalk_reent+0x3a>
 8000786:	4629      	mov	r1, r5
 8000788:	4630      	mov	r0, r6
 800078a:	47c0      	blx	r8
 800078c:	4307      	orrs	r7, r0
 800078e:	3568      	adds	r5, #104	; 0x68
 8000790:	e7e9      	b.n	8000766 <_fwalk_reent+0x12>

08000792 <__retarget_lock_init_recursive>:
 8000792:	4770      	bx	lr

08000794 <__retarget_lock_acquire_recursive>:
 8000794:	4770      	bx	lr

08000796 <__retarget_lock_release_recursive>:
 8000796:	4770      	bx	lr

08000798 <sbrk_aligned>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	4e0e      	ldr	r6, [pc, #56]	; (80007d4 <sbrk_aligned+0x3c>)
 800079c:	460c      	mov	r4, r1
 800079e:	6831      	ldr	r1, [r6, #0]
 80007a0:	4605      	mov	r5, r0
 80007a2:	b911      	cbnz	r1, 80007aa <sbrk_aligned+0x12>
 80007a4:	f000 fb7a 	bl	8000e9c <_sbrk_r>
 80007a8:	6030      	str	r0, [r6, #0]
 80007aa:	4621      	mov	r1, r4
 80007ac:	4628      	mov	r0, r5
 80007ae:	f000 fb75 	bl	8000e9c <_sbrk_r>
 80007b2:	1c43      	adds	r3, r0, #1
 80007b4:	d00a      	beq.n	80007cc <sbrk_aligned+0x34>
 80007b6:	1cc4      	adds	r4, r0, #3
 80007b8:	f024 0403 	bic.w	r4, r4, #3
 80007bc:	42a0      	cmp	r0, r4
 80007be:	d007      	beq.n	80007d0 <sbrk_aligned+0x38>
 80007c0:	1a21      	subs	r1, r4, r0
 80007c2:	4628      	mov	r0, r5
 80007c4:	f000 fb6a 	bl	8000e9c <_sbrk_r>
 80007c8:	3001      	adds	r0, #1
 80007ca:	d101      	bne.n	80007d0 <sbrk_aligned+0x38>
 80007cc:	f04f 34ff 	mov.w	r4, #4294967295
 80007d0:	4620      	mov	r0, r4
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	20000098 	.word	0x20000098

080007d8 <_malloc_r>:
 80007d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007dc:	1ccd      	adds	r5, r1, #3
 80007de:	f025 0503 	bic.w	r5, r5, #3
 80007e2:	3508      	adds	r5, #8
 80007e4:	2d0c      	cmp	r5, #12
 80007e6:	bf38      	it	cc
 80007e8:	250c      	movcc	r5, #12
 80007ea:	2d00      	cmp	r5, #0
 80007ec:	4607      	mov	r7, r0
 80007ee:	db01      	blt.n	80007f4 <_malloc_r+0x1c>
 80007f0:	42a9      	cmp	r1, r5
 80007f2:	d905      	bls.n	8000800 <_malloc_r+0x28>
 80007f4:	230c      	movs	r3, #12
 80007f6:	2600      	movs	r6, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4630      	mov	r0, r6
 80007fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000800:	4e2e      	ldr	r6, [pc, #184]	; (80008bc <_malloc_r+0xe4>)
 8000802:	f000 fdc5 	bl	8001390 <__malloc_lock>
 8000806:	6833      	ldr	r3, [r6, #0]
 8000808:	461c      	mov	r4, r3
 800080a:	bb34      	cbnz	r4, 800085a <_malloc_r+0x82>
 800080c:	4629      	mov	r1, r5
 800080e:	4638      	mov	r0, r7
 8000810:	f7ff ffc2 	bl	8000798 <sbrk_aligned>
 8000814:	1c43      	adds	r3, r0, #1
 8000816:	4604      	mov	r4, r0
 8000818:	d14d      	bne.n	80008b6 <_malloc_r+0xde>
 800081a:	6834      	ldr	r4, [r6, #0]
 800081c:	4626      	mov	r6, r4
 800081e:	2e00      	cmp	r6, #0
 8000820:	d140      	bne.n	80008a4 <_malloc_r+0xcc>
 8000822:	6823      	ldr	r3, [r4, #0]
 8000824:	4631      	mov	r1, r6
 8000826:	4638      	mov	r0, r7
 8000828:	eb04 0803 	add.w	r8, r4, r3
 800082c:	f000 fb36 	bl	8000e9c <_sbrk_r>
 8000830:	4580      	cmp	r8, r0
 8000832:	d13a      	bne.n	80008aa <_malloc_r+0xd2>
 8000834:	6821      	ldr	r1, [r4, #0]
 8000836:	3503      	adds	r5, #3
 8000838:	1a6d      	subs	r5, r5, r1
 800083a:	f025 0503 	bic.w	r5, r5, #3
 800083e:	3508      	adds	r5, #8
 8000840:	2d0c      	cmp	r5, #12
 8000842:	bf38      	it	cc
 8000844:	250c      	movcc	r5, #12
 8000846:	4638      	mov	r0, r7
 8000848:	4629      	mov	r1, r5
 800084a:	f7ff ffa5 	bl	8000798 <sbrk_aligned>
 800084e:	3001      	adds	r0, #1
 8000850:	d02b      	beq.n	80008aa <_malloc_r+0xd2>
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	442b      	add	r3, r5
 8000856:	6023      	str	r3, [r4, #0]
 8000858:	e00e      	b.n	8000878 <_malloc_r+0xa0>
 800085a:	6822      	ldr	r2, [r4, #0]
 800085c:	1b52      	subs	r2, r2, r5
 800085e:	d41e      	bmi.n	800089e <_malloc_r+0xc6>
 8000860:	2a0b      	cmp	r2, #11
 8000862:	d916      	bls.n	8000892 <_malloc_r+0xba>
 8000864:	1961      	adds	r1, r4, r5
 8000866:	42a3      	cmp	r3, r4
 8000868:	6025      	str	r5, [r4, #0]
 800086a:	bf18      	it	ne
 800086c:	6059      	strne	r1, [r3, #4]
 800086e:	6863      	ldr	r3, [r4, #4]
 8000870:	bf08      	it	eq
 8000872:	6031      	streq	r1, [r6, #0]
 8000874:	5162      	str	r2, [r4, r5]
 8000876:	604b      	str	r3, [r1, #4]
 8000878:	4638      	mov	r0, r7
 800087a:	f104 060b 	add.w	r6, r4, #11
 800087e:	f000 fd8d 	bl	800139c <__malloc_unlock>
 8000882:	f026 0607 	bic.w	r6, r6, #7
 8000886:	1d23      	adds	r3, r4, #4
 8000888:	1af2      	subs	r2, r6, r3
 800088a:	d0b6      	beq.n	80007fa <_malloc_r+0x22>
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	50a3      	str	r3, [r4, r2]
 8000890:	e7b3      	b.n	80007fa <_malloc_r+0x22>
 8000892:	6862      	ldr	r2, [r4, #4]
 8000894:	42a3      	cmp	r3, r4
 8000896:	bf0c      	ite	eq
 8000898:	6032      	streq	r2, [r6, #0]
 800089a:	605a      	strne	r2, [r3, #4]
 800089c:	e7ec      	b.n	8000878 <_malloc_r+0xa0>
 800089e:	4623      	mov	r3, r4
 80008a0:	6864      	ldr	r4, [r4, #4]
 80008a2:	e7b2      	b.n	800080a <_malloc_r+0x32>
 80008a4:	4634      	mov	r4, r6
 80008a6:	6876      	ldr	r6, [r6, #4]
 80008a8:	e7b9      	b.n	800081e <_malloc_r+0x46>
 80008aa:	230c      	movs	r3, #12
 80008ac:	4638      	mov	r0, r7
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	f000 fd74 	bl	800139c <__malloc_unlock>
 80008b4:	e7a1      	b.n	80007fa <_malloc_r+0x22>
 80008b6:	6025      	str	r5, [r4, #0]
 80008b8:	e7de      	b.n	8000878 <_malloc_r+0xa0>
 80008ba:	bf00      	nop
 80008bc:	20000094 	.word	0x20000094

080008c0 <__sfputc_r>:
 80008c0:	6893      	ldr	r3, [r2, #8]
 80008c2:	b410      	push	{r4}
 80008c4:	3b01      	subs	r3, #1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	6093      	str	r3, [r2, #8]
 80008ca:	da07      	bge.n	80008dc <__sfputc_r+0x1c>
 80008cc:	6994      	ldr	r4, [r2, #24]
 80008ce:	42a3      	cmp	r3, r4
 80008d0:	db01      	blt.n	80008d6 <__sfputc_r+0x16>
 80008d2:	290a      	cmp	r1, #10
 80008d4:	d102      	bne.n	80008dc <__sfputc_r+0x1c>
 80008d6:	bc10      	pop	{r4}
 80008d8:	f000 bb34 	b.w	8000f44 <__swbuf_r>
 80008dc:	6813      	ldr	r3, [r2, #0]
 80008de:	1c58      	adds	r0, r3, #1
 80008e0:	6010      	str	r0, [r2, #0]
 80008e2:	7019      	strb	r1, [r3, #0]
 80008e4:	4608      	mov	r0, r1
 80008e6:	bc10      	pop	{r4}
 80008e8:	4770      	bx	lr

080008ea <__sfputs_r>:
 80008ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ec:	4606      	mov	r6, r0
 80008ee:	460f      	mov	r7, r1
 80008f0:	4614      	mov	r4, r2
 80008f2:	18d5      	adds	r5, r2, r3
 80008f4:	42ac      	cmp	r4, r5
 80008f6:	d101      	bne.n	80008fc <__sfputs_r+0x12>
 80008f8:	2000      	movs	r0, #0
 80008fa:	e007      	b.n	800090c <__sfputs_r+0x22>
 80008fc:	463a      	mov	r2, r7
 80008fe:	4630      	mov	r0, r6
 8000900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000904:	f7ff ffdc 	bl	80008c0 <__sfputc_r>
 8000908:	1c43      	adds	r3, r0, #1
 800090a:	d1f3      	bne.n	80008f4 <__sfputs_r+0xa>
 800090c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000910 <_vfiprintf_r>:
 8000910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000914:	460d      	mov	r5, r1
 8000916:	4614      	mov	r4, r2
 8000918:	4698      	mov	r8, r3
 800091a:	4606      	mov	r6, r0
 800091c:	b09d      	sub	sp, #116	; 0x74
 800091e:	b118      	cbz	r0, 8000928 <_vfiprintf_r+0x18>
 8000920:	6983      	ldr	r3, [r0, #24]
 8000922:	b90b      	cbnz	r3, 8000928 <_vfiprintf_r+0x18>
 8000924:	f7ff fe98 	bl	8000658 <__sinit>
 8000928:	4b89      	ldr	r3, [pc, #548]	; (8000b50 <_vfiprintf_r+0x240>)
 800092a:	429d      	cmp	r5, r3
 800092c:	d11b      	bne.n	8000966 <_vfiprintf_r+0x56>
 800092e:	6875      	ldr	r5, [r6, #4]
 8000930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000932:	07d9      	lsls	r1, r3, #31
 8000934:	d405      	bmi.n	8000942 <_vfiprintf_r+0x32>
 8000936:	89ab      	ldrh	r3, [r5, #12]
 8000938:	059a      	lsls	r2, r3, #22
 800093a:	d402      	bmi.n	8000942 <_vfiprintf_r+0x32>
 800093c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800093e:	f7ff ff29 	bl	8000794 <__retarget_lock_acquire_recursive>
 8000942:	89ab      	ldrh	r3, [r5, #12]
 8000944:	071b      	lsls	r3, r3, #28
 8000946:	d501      	bpl.n	800094c <_vfiprintf_r+0x3c>
 8000948:	692b      	ldr	r3, [r5, #16]
 800094a:	b9eb      	cbnz	r3, 8000988 <_vfiprintf_r+0x78>
 800094c:	4629      	mov	r1, r5
 800094e:	4630      	mov	r0, r6
 8000950:	f000 fb5c 	bl	800100c <__swsetup_r>
 8000954:	b1c0      	cbz	r0, 8000988 <_vfiprintf_r+0x78>
 8000956:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000958:	07dc      	lsls	r4, r3, #31
 800095a:	d50e      	bpl.n	800097a <_vfiprintf_r+0x6a>
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	b01d      	add	sp, #116	; 0x74
 8000962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000966:	4b7b      	ldr	r3, [pc, #492]	; (8000b54 <_vfiprintf_r+0x244>)
 8000968:	429d      	cmp	r5, r3
 800096a:	d101      	bne.n	8000970 <_vfiprintf_r+0x60>
 800096c:	68b5      	ldr	r5, [r6, #8]
 800096e:	e7df      	b.n	8000930 <_vfiprintf_r+0x20>
 8000970:	4b79      	ldr	r3, [pc, #484]	; (8000b58 <_vfiprintf_r+0x248>)
 8000972:	429d      	cmp	r5, r3
 8000974:	bf08      	it	eq
 8000976:	68f5      	ldreq	r5, [r6, #12]
 8000978:	e7da      	b.n	8000930 <_vfiprintf_r+0x20>
 800097a:	89ab      	ldrh	r3, [r5, #12]
 800097c:	0598      	lsls	r0, r3, #22
 800097e:	d4ed      	bmi.n	800095c <_vfiprintf_r+0x4c>
 8000980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000982:	f7ff ff08 	bl	8000796 <__retarget_lock_release_recursive>
 8000986:	e7e9      	b.n	800095c <_vfiprintf_r+0x4c>
 8000988:	2300      	movs	r3, #0
 800098a:	9309      	str	r3, [sp, #36]	; 0x24
 800098c:	2320      	movs	r3, #32
 800098e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000992:	2330      	movs	r3, #48	; 0x30
 8000994:	f04f 0901 	mov.w	r9, #1
 8000998:	f8cd 800c 	str.w	r8, [sp, #12]
 800099c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000b5c <_vfiprintf_r+0x24c>
 80009a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80009a4:	4623      	mov	r3, r4
 80009a6:	469a      	mov	sl, r3
 80009a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009ac:	b10a      	cbz	r2, 80009b2 <_vfiprintf_r+0xa2>
 80009ae:	2a25      	cmp	r2, #37	; 0x25
 80009b0:	d1f9      	bne.n	80009a6 <_vfiprintf_r+0x96>
 80009b2:	ebba 0b04 	subs.w	fp, sl, r4
 80009b6:	d00b      	beq.n	80009d0 <_vfiprintf_r+0xc0>
 80009b8:	465b      	mov	r3, fp
 80009ba:	4622      	mov	r2, r4
 80009bc:	4629      	mov	r1, r5
 80009be:	4630      	mov	r0, r6
 80009c0:	f7ff ff93 	bl	80008ea <__sfputs_r>
 80009c4:	3001      	adds	r0, #1
 80009c6:	f000 80aa 	beq.w	8000b1e <_vfiprintf_r+0x20e>
 80009ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80009cc:	445a      	add	r2, fp
 80009ce:	9209      	str	r2, [sp, #36]	; 0x24
 80009d0:	f89a 3000 	ldrb.w	r3, [sl]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	f000 80a2 	beq.w	8000b1e <_vfiprintf_r+0x20e>
 80009da:	2300      	movs	r3, #0
 80009dc:	f04f 32ff 	mov.w	r2, #4294967295
 80009e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80009e4:	f10a 0a01 	add.w	sl, sl, #1
 80009e8:	9304      	str	r3, [sp, #16]
 80009ea:	9307      	str	r3, [sp, #28]
 80009ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80009f0:	931a      	str	r3, [sp, #104]	; 0x68
 80009f2:	4654      	mov	r4, sl
 80009f4:	2205      	movs	r2, #5
 80009f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009fa:	4858      	ldr	r0, [pc, #352]	; (8000b5c <_vfiprintf_r+0x24c>)
 80009fc:	f000 fcba 	bl	8001374 <memchr>
 8000a00:	9a04      	ldr	r2, [sp, #16]
 8000a02:	b9d8      	cbnz	r0, 8000a3c <_vfiprintf_r+0x12c>
 8000a04:	06d1      	lsls	r1, r2, #27
 8000a06:	bf44      	itt	mi
 8000a08:	2320      	movmi	r3, #32
 8000a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a0e:	0713      	lsls	r3, r2, #28
 8000a10:	bf44      	itt	mi
 8000a12:	232b      	movmi	r3, #43	; 0x2b
 8000a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a18:	f89a 3000 	ldrb.w	r3, [sl]
 8000a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8000a1e:	d015      	beq.n	8000a4c <_vfiprintf_r+0x13c>
 8000a20:	4654      	mov	r4, sl
 8000a22:	2000      	movs	r0, #0
 8000a24:	f04f 0c0a 	mov.w	ip, #10
 8000a28:	9a07      	ldr	r2, [sp, #28]
 8000a2a:	4621      	mov	r1, r4
 8000a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a30:	3b30      	subs	r3, #48	; 0x30
 8000a32:	2b09      	cmp	r3, #9
 8000a34:	d94e      	bls.n	8000ad4 <_vfiprintf_r+0x1c4>
 8000a36:	b1b0      	cbz	r0, 8000a66 <_vfiprintf_r+0x156>
 8000a38:	9207      	str	r2, [sp, #28]
 8000a3a:	e014      	b.n	8000a66 <_vfiprintf_r+0x156>
 8000a3c:	eba0 0308 	sub.w	r3, r0, r8
 8000a40:	fa09 f303 	lsl.w	r3, r9, r3
 8000a44:	4313      	orrs	r3, r2
 8000a46:	46a2      	mov	sl, r4
 8000a48:	9304      	str	r3, [sp, #16]
 8000a4a:	e7d2      	b.n	80009f2 <_vfiprintf_r+0xe2>
 8000a4c:	9b03      	ldr	r3, [sp, #12]
 8000a4e:	1d19      	adds	r1, r3, #4
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	9103      	str	r1, [sp, #12]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	bfbb      	ittet	lt
 8000a58:	425b      	neglt	r3, r3
 8000a5a:	f042 0202 	orrlt.w	r2, r2, #2
 8000a5e:	9307      	strge	r3, [sp, #28]
 8000a60:	9307      	strlt	r3, [sp, #28]
 8000a62:	bfb8      	it	lt
 8000a64:	9204      	strlt	r2, [sp, #16]
 8000a66:	7823      	ldrb	r3, [r4, #0]
 8000a68:	2b2e      	cmp	r3, #46	; 0x2e
 8000a6a:	d10c      	bne.n	8000a86 <_vfiprintf_r+0x176>
 8000a6c:	7863      	ldrb	r3, [r4, #1]
 8000a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8000a70:	d135      	bne.n	8000ade <_vfiprintf_r+0x1ce>
 8000a72:	9b03      	ldr	r3, [sp, #12]
 8000a74:	3402      	adds	r4, #2
 8000a76:	1d1a      	adds	r2, r3, #4
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	9203      	str	r2, [sp, #12]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	bfb8      	it	lt
 8000a80:	f04f 33ff 	movlt.w	r3, #4294967295
 8000a84:	9305      	str	r3, [sp, #20]
 8000a86:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8000b60 <_vfiprintf_r+0x250>
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	4650      	mov	r0, sl
 8000a8e:	7821      	ldrb	r1, [r4, #0]
 8000a90:	f000 fc70 	bl	8001374 <memchr>
 8000a94:	b140      	cbz	r0, 8000aa8 <_vfiprintf_r+0x198>
 8000a96:	2340      	movs	r3, #64	; 0x40
 8000a98:	eba0 000a 	sub.w	r0, r0, sl
 8000a9c:	fa03 f000 	lsl.w	r0, r3, r0
 8000aa0:	9b04      	ldr	r3, [sp, #16]
 8000aa2:	3401      	adds	r4, #1
 8000aa4:	4303      	orrs	r3, r0
 8000aa6:	9304      	str	r3, [sp, #16]
 8000aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000aac:	2206      	movs	r2, #6
 8000aae:	482d      	ldr	r0, [pc, #180]	; (8000b64 <_vfiprintf_r+0x254>)
 8000ab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ab4:	f000 fc5e 	bl	8001374 <memchr>
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d03f      	beq.n	8000b3c <_vfiprintf_r+0x22c>
 8000abc:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <_vfiprintf_r+0x258>)
 8000abe:	bb1b      	cbnz	r3, 8000b08 <_vfiprintf_r+0x1f8>
 8000ac0:	9b03      	ldr	r3, [sp, #12]
 8000ac2:	3307      	adds	r3, #7
 8000ac4:	f023 0307 	bic.w	r3, r3, #7
 8000ac8:	3308      	adds	r3, #8
 8000aca:	9303      	str	r3, [sp, #12]
 8000acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ace:	443b      	add	r3, r7
 8000ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8000ad2:	e767      	b.n	80009a4 <_vfiprintf_r+0x94>
 8000ad4:	460c      	mov	r4, r1
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000adc:	e7a5      	b.n	8000a2a <_vfiprintf_r+0x11a>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f04f 0c0a 	mov.w	ip, #10
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	3401      	adds	r4, #1
 8000ae8:	9305      	str	r3, [sp, #20]
 8000aea:	4620      	mov	r0, r4
 8000aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000af0:	3a30      	subs	r2, #48	; 0x30
 8000af2:	2a09      	cmp	r2, #9
 8000af4:	d903      	bls.n	8000afe <_vfiprintf_r+0x1ee>
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0c5      	beq.n	8000a86 <_vfiprintf_r+0x176>
 8000afa:	9105      	str	r1, [sp, #20]
 8000afc:	e7c3      	b.n	8000a86 <_vfiprintf_r+0x176>
 8000afe:	4604      	mov	r4, r0
 8000b00:	2301      	movs	r3, #1
 8000b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b06:	e7f0      	b.n	8000aea <_vfiprintf_r+0x1da>
 8000b08:	ab03      	add	r3, sp, #12
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	462a      	mov	r2, r5
 8000b0e:	4630      	mov	r0, r6
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <_vfiprintf_r+0x25c>)
 8000b12:	a904      	add	r1, sp, #16
 8000b14:	f3af 8000 	nop.w
 8000b18:	4607      	mov	r7, r0
 8000b1a:	1c78      	adds	r0, r7, #1
 8000b1c:	d1d6      	bne.n	8000acc <_vfiprintf_r+0x1bc>
 8000b1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b20:	07d9      	lsls	r1, r3, #31
 8000b22:	d405      	bmi.n	8000b30 <_vfiprintf_r+0x220>
 8000b24:	89ab      	ldrh	r3, [r5, #12]
 8000b26:	059a      	lsls	r2, r3, #22
 8000b28:	d402      	bmi.n	8000b30 <_vfiprintf_r+0x220>
 8000b2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b2c:	f7ff fe33 	bl	8000796 <__retarget_lock_release_recursive>
 8000b30:	89ab      	ldrh	r3, [r5, #12]
 8000b32:	065b      	lsls	r3, r3, #25
 8000b34:	f53f af12 	bmi.w	800095c <_vfiprintf_r+0x4c>
 8000b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000b3a:	e711      	b.n	8000960 <_vfiprintf_r+0x50>
 8000b3c:	ab03      	add	r3, sp, #12
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	462a      	mov	r2, r5
 8000b42:	4630      	mov	r0, r6
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <_vfiprintf_r+0x25c>)
 8000b46:	a904      	add	r1, sp, #16
 8000b48:	f000 f882 	bl	8000c50 <_printf_i>
 8000b4c:	e7e4      	b.n	8000b18 <_vfiprintf_r+0x208>
 8000b4e:	bf00      	nop
 8000b50:	080014f0 	.word	0x080014f0
 8000b54:	08001510 	.word	0x08001510
 8000b58:	080014d0 	.word	0x080014d0
 8000b5c:	08001530 	.word	0x08001530
 8000b60:	08001536 	.word	0x08001536
 8000b64:	0800153a 	.word	0x0800153a
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	080008eb 	.word	0x080008eb

08000b70 <_printf_common>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	4616      	mov	r6, r2
 8000b76:	4699      	mov	r9, r3
 8000b78:	688a      	ldr	r2, [r1, #8]
 8000b7a:	690b      	ldr	r3, [r1, #16]
 8000b7c:	4607      	mov	r7, r0
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	bfb8      	it	lt
 8000b82:	4613      	movlt	r3, r2
 8000b84:	6033      	str	r3, [r6, #0]
 8000b86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000b8a:	460c      	mov	r4, r1
 8000b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000b90:	b10a      	cbz	r2, 8000b96 <_printf_common+0x26>
 8000b92:	3301      	adds	r3, #1
 8000b94:	6033      	str	r3, [r6, #0]
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	0699      	lsls	r1, r3, #26
 8000b9a:	bf42      	ittt	mi
 8000b9c:	6833      	ldrmi	r3, [r6, #0]
 8000b9e:	3302      	addmi	r3, #2
 8000ba0:	6033      	strmi	r3, [r6, #0]
 8000ba2:	6825      	ldr	r5, [r4, #0]
 8000ba4:	f015 0506 	ands.w	r5, r5, #6
 8000ba8:	d106      	bne.n	8000bb8 <_printf_common+0x48>
 8000baa:	f104 0a19 	add.w	sl, r4, #25
 8000bae:	68e3      	ldr	r3, [r4, #12]
 8000bb0:	6832      	ldr	r2, [r6, #0]
 8000bb2:	1a9b      	subs	r3, r3, r2
 8000bb4:	42ab      	cmp	r3, r5
 8000bb6:	dc28      	bgt.n	8000c0a <_printf_common+0x9a>
 8000bb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000bbc:	1e13      	subs	r3, r2, #0
 8000bbe:	6822      	ldr	r2, [r4, #0]
 8000bc0:	bf18      	it	ne
 8000bc2:	2301      	movne	r3, #1
 8000bc4:	0692      	lsls	r2, r2, #26
 8000bc6:	d42d      	bmi.n	8000c24 <_printf_common+0xb4>
 8000bc8:	4649      	mov	r1, r9
 8000bca:	4638      	mov	r0, r7
 8000bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000bd0:	47c0      	blx	r8
 8000bd2:	3001      	adds	r0, #1
 8000bd4:	d020      	beq.n	8000c18 <_printf_common+0xa8>
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	68e5      	ldr	r5, [r4, #12]
 8000bda:	f003 0306 	and.w	r3, r3, #6
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf18      	it	ne
 8000be2:	2500      	movne	r5, #0
 8000be4:	6832      	ldr	r2, [r6, #0]
 8000be6:	f04f 0600 	mov.w	r6, #0
 8000bea:	68a3      	ldr	r3, [r4, #8]
 8000bec:	bf08      	it	eq
 8000bee:	1aad      	subeq	r5, r5, r2
 8000bf0:	6922      	ldr	r2, [r4, #16]
 8000bf2:	bf08      	it	eq
 8000bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	bfc4      	itt	gt
 8000bfc:	1a9b      	subgt	r3, r3, r2
 8000bfe:	18ed      	addgt	r5, r5, r3
 8000c00:	341a      	adds	r4, #26
 8000c02:	42b5      	cmp	r5, r6
 8000c04:	d11a      	bne.n	8000c3c <_printf_common+0xcc>
 8000c06:	2000      	movs	r0, #0
 8000c08:	e008      	b.n	8000c1c <_printf_common+0xac>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	4652      	mov	r2, sl
 8000c0e:	4649      	mov	r1, r9
 8000c10:	4638      	mov	r0, r7
 8000c12:	47c0      	blx	r8
 8000c14:	3001      	adds	r0, #1
 8000c16:	d103      	bne.n	8000c20 <_printf_common+0xb0>
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c20:	3501      	adds	r5, #1
 8000c22:	e7c4      	b.n	8000bae <_printf_common+0x3e>
 8000c24:	2030      	movs	r0, #48	; 0x30
 8000c26:	18e1      	adds	r1, r4, r3
 8000c28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000c2c:	1c5a      	adds	r2, r3, #1
 8000c2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000c32:	4422      	add	r2, r4
 8000c34:	3302      	adds	r3, #2
 8000c36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000c3a:	e7c5      	b.n	8000bc8 <_printf_common+0x58>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	4622      	mov	r2, r4
 8000c40:	4649      	mov	r1, r9
 8000c42:	4638      	mov	r0, r7
 8000c44:	47c0      	blx	r8
 8000c46:	3001      	adds	r0, #1
 8000c48:	d0e6      	beq.n	8000c18 <_printf_common+0xa8>
 8000c4a:	3601      	adds	r6, #1
 8000c4c:	e7d9      	b.n	8000c02 <_printf_common+0x92>
	...

08000c50 <_printf_i>:
 8000c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	7e0f      	ldrb	r7, [r1, #24]
 8000c56:	4691      	mov	r9, r2
 8000c58:	2f78      	cmp	r7, #120	; 0x78
 8000c5a:	4680      	mov	r8, r0
 8000c5c:	460c      	mov	r4, r1
 8000c5e:	469a      	mov	sl, r3
 8000c60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000c66:	d807      	bhi.n	8000c78 <_printf_i+0x28>
 8000c68:	2f62      	cmp	r7, #98	; 0x62
 8000c6a:	d80a      	bhi.n	8000c82 <_printf_i+0x32>
 8000c6c:	2f00      	cmp	r7, #0
 8000c6e:	f000 80d9 	beq.w	8000e24 <_printf_i+0x1d4>
 8000c72:	2f58      	cmp	r7, #88	; 0x58
 8000c74:	f000 80a4 	beq.w	8000dc0 <_printf_i+0x170>
 8000c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000c80:	e03a      	b.n	8000cf8 <_printf_i+0xa8>
 8000c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000c86:	2b15      	cmp	r3, #21
 8000c88:	d8f6      	bhi.n	8000c78 <_printf_i+0x28>
 8000c8a:	a101      	add	r1, pc, #4	; (adr r1, 8000c90 <_printf_i+0x40>)
 8000c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c90:	08000ce9 	.word	0x08000ce9
 8000c94:	08000cfd 	.word	0x08000cfd
 8000c98:	08000c79 	.word	0x08000c79
 8000c9c:	08000c79 	.word	0x08000c79
 8000ca0:	08000c79 	.word	0x08000c79
 8000ca4:	08000c79 	.word	0x08000c79
 8000ca8:	08000cfd 	.word	0x08000cfd
 8000cac:	08000c79 	.word	0x08000c79
 8000cb0:	08000c79 	.word	0x08000c79
 8000cb4:	08000c79 	.word	0x08000c79
 8000cb8:	08000c79 	.word	0x08000c79
 8000cbc:	08000e0b 	.word	0x08000e0b
 8000cc0:	08000d2d 	.word	0x08000d2d
 8000cc4:	08000ded 	.word	0x08000ded
 8000cc8:	08000c79 	.word	0x08000c79
 8000ccc:	08000c79 	.word	0x08000c79
 8000cd0:	08000e2d 	.word	0x08000e2d
 8000cd4:	08000c79 	.word	0x08000c79
 8000cd8:	08000d2d 	.word	0x08000d2d
 8000cdc:	08000c79 	.word	0x08000c79
 8000ce0:	08000c79 	.word	0x08000c79
 8000ce4:	08000df5 	.word	0x08000df5
 8000ce8:	682b      	ldr	r3, [r5, #0]
 8000cea:	1d1a      	adds	r2, r3, #4
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	602a      	str	r2, [r5, #0]
 8000cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e0a4      	b.n	8000e46 <_printf_i+0x1f6>
 8000cfc:	6820      	ldr	r0, [r4, #0]
 8000cfe:	6829      	ldr	r1, [r5, #0]
 8000d00:	0606      	lsls	r6, r0, #24
 8000d02:	f101 0304 	add.w	r3, r1, #4
 8000d06:	d50a      	bpl.n	8000d1e <_printf_i+0xce>
 8000d08:	680e      	ldr	r6, [r1, #0]
 8000d0a:	602b      	str	r3, [r5, #0]
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	da03      	bge.n	8000d18 <_printf_i+0xc8>
 8000d10:	232d      	movs	r3, #45	; 0x2d
 8000d12:	4276      	negs	r6, r6
 8000d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d18:	230a      	movs	r3, #10
 8000d1a:	485e      	ldr	r0, [pc, #376]	; (8000e94 <_printf_i+0x244>)
 8000d1c:	e019      	b.n	8000d52 <_printf_i+0x102>
 8000d1e:	680e      	ldr	r6, [r1, #0]
 8000d20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000d24:	602b      	str	r3, [r5, #0]
 8000d26:	bf18      	it	ne
 8000d28:	b236      	sxthne	r6, r6
 8000d2a:	e7ef      	b.n	8000d0c <_printf_i+0xbc>
 8000d2c:	682b      	ldr	r3, [r5, #0]
 8000d2e:	6820      	ldr	r0, [r4, #0]
 8000d30:	1d19      	adds	r1, r3, #4
 8000d32:	6029      	str	r1, [r5, #0]
 8000d34:	0601      	lsls	r1, r0, #24
 8000d36:	d501      	bpl.n	8000d3c <_printf_i+0xec>
 8000d38:	681e      	ldr	r6, [r3, #0]
 8000d3a:	e002      	b.n	8000d42 <_printf_i+0xf2>
 8000d3c:	0646      	lsls	r6, r0, #25
 8000d3e:	d5fb      	bpl.n	8000d38 <_printf_i+0xe8>
 8000d40:	881e      	ldrh	r6, [r3, #0]
 8000d42:	2f6f      	cmp	r7, #111	; 0x6f
 8000d44:	bf0c      	ite	eq
 8000d46:	2308      	moveq	r3, #8
 8000d48:	230a      	movne	r3, #10
 8000d4a:	4852      	ldr	r0, [pc, #328]	; (8000e94 <_printf_i+0x244>)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000d52:	6865      	ldr	r5, [r4, #4]
 8000d54:	2d00      	cmp	r5, #0
 8000d56:	bfa8      	it	ge
 8000d58:	6821      	ldrge	r1, [r4, #0]
 8000d5a:	60a5      	str	r5, [r4, #8]
 8000d5c:	bfa4      	itt	ge
 8000d5e:	f021 0104 	bicge.w	r1, r1, #4
 8000d62:	6021      	strge	r1, [r4, #0]
 8000d64:	b90e      	cbnz	r6, 8000d6a <_printf_i+0x11a>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d04d      	beq.n	8000e06 <_printf_i+0x1b6>
 8000d6a:	4615      	mov	r5, r2
 8000d6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8000d70:	fb03 6711 	mls	r7, r3, r1, r6
 8000d74:	5dc7      	ldrb	r7, [r0, r7]
 8000d76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000d7a:	4637      	mov	r7, r6
 8000d7c:	42bb      	cmp	r3, r7
 8000d7e:	460e      	mov	r6, r1
 8000d80:	d9f4      	bls.n	8000d6c <_printf_i+0x11c>
 8000d82:	2b08      	cmp	r3, #8
 8000d84:	d10b      	bne.n	8000d9e <_printf_i+0x14e>
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	07de      	lsls	r6, r3, #31
 8000d8a:	d508      	bpl.n	8000d9e <_printf_i+0x14e>
 8000d8c:	6923      	ldr	r3, [r4, #16]
 8000d8e:	6861      	ldr	r1, [r4, #4]
 8000d90:	4299      	cmp	r1, r3
 8000d92:	bfde      	ittt	le
 8000d94:	2330      	movle	r3, #48	; 0x30
 8000d96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000d9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000d9e:	1b52      	subs	r2, r2, r5
 8000da0:	6122      	str	r2, [r4, #16]
 8000da2:	464b      	mov	r3, r9
 8000da4:	4621      	mov	r1, r4
 8000da6:	4640      	mov	r0, r8
 8000da8:	f8cd a000 	str.w	sl, [sp]
 8000dac:	aa03      	add	r2, sp, #12
 8000dae:	f7ff fedf 	bl	8000b70 <_printf_common>
 8000db2:	3001      	adds	r0, #1
 8000db4:	d14c      	bne.n	8000e50 <_printf_i+0x200>
 8000db6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dba:	b004      	add	sp, #16
 8000dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc0:	4834      	ldr	r0, [pc, #208]	; (8000e94 <_printf_i+0x244>)
 8000dc2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000dc6:	6829      	ldr	r1, [r5, #0]
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	f851 6b04 	ldr.w	r6, [r1], #4
 8000dce:	6029      	str	r1, [r5, #0]
 8000dd0:	061d      	lsls	r5, r3, #24
 8000dd2:	d514      	bpl.n	8000dfe <_printf_i+0x1ae>
 8000dd4:	07df      	lsls	r7, r3, #31
 8000dd6:	bf44      	itt	mi
 8000dd8:	f043 0320 	orrmi.w	r3, r3, #32
 8000ddc:	6023      	strmi	r3, [r4, #0]
 8000dde:	b91e      	cbnz	r6, 8000de8 <_printf_i+0x198>
 8000de0:	6823      	ldr	r3, [r4, #0]
 8000de2:	f023 0320 	bic.w	r3, r3, #32
 8000de6:	6023      	str	r3, [r4, #0]
 8000de8:	2310      	movs	r3, #16
 8000dea:	e7af      	b.n	8000d4c <_printf_i+0xfc>
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	f043 0320 	orr.w	r3, r3, #32
 8000df2:	6023      	str	r3, [r4, #0]
 8000df4:	2378      	movs	r3, #120	; 0x78
 8000df6:	4828      	ldr	r0, [pc, #160]	; (8000e98 <_printf_i+0x248>)
 8000df8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000dfc:	e7e3      	b.n	8000dc6 <_printf_i+0x176>
 8000dfe:	0659      	lsls	r1, r3, #25
 8000e00:	bf48      	it	mi
 8000e02:	b2b6      	uxthmi	r6, r6
 8000e04:	e7e6      	b.n	8000dd4 <_printf_i+0x184>
 8000e06:	4615      	mov	r5, r2
 8000e08:	e7bb      	b.n	8000d82 <_printf_i+0x132>
 8000e0a:	682b      	ldr	r3, [r5, #0]
 8000e0c:	6826      	ldr	r6, [r4, #0]
 8000e0e:	1d18      	adds	r0, r3, #4
 8000e10:	6961      	ldr	r1, [r4, #20]
 8000e12:	6028      	str	r0, [r5, #0]
 8000e14:	0635      	lsls	r5, r6, #24
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	d501      	bpl.n	8000e1e <_printf_i+0x1ce>
 8000e1a:	6019      	str	r1, [r3, #0]
 8000e1c:	e002      	b.n	8000e24 <_printf_i+0x1d4>
 8000e1e:	0670      	lsls	r0, r6, #25
 8000e20:	d5fb      	bpl.n	8000e1a <_printf_i+0x1ca>
 8000e22:	8019      	strh	r1, [r3, #0]
 8000e24:	2300      	movs	r3, #0
 8000e26:	4615      	mov	r5, r2
 8000e28:	6123      	str	r3, [r4, #16]
 8000e2a:	e7ba      	b.n	8000da2 <_printf_i+0x152>
 8000e2c:	682b      	ldr	r3, [r5, #0]
 8000e2e:	2100      	movs	r1, #0
 8000e30:	1d1a      	adds	r2, r3, #4
 8000e32:	602a      	str	r2, [r5, #0]
 8000e34:	681d      	ldr	r5, [r3, #0]
 8000e36:	6862      	ldr	r2, [r4, #4]
 8000e38:	4628      	mov	r0, r5
 8000e3a:	f000 fa9b 	bl	8001374 <memchr>
 8000e3e:	b108      	cbz	r0, 8000e44 <_printf_i+0x1f4>
 8000e40:	1b40      	subs	r0, r0, r5
 8000e42:	6060      	str	r0, [r4, #4]
 8000e44:	6863      	ldr	r3, [r4, #4]
 8000e46:	6123      	str	r3, [r4, #16]
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e4e:	e7a8      	b.n	8000da2 <_printf_i+0x152>
 8000e50:	462a      	mov	r2, r5
 8000e52:	4649      	mov	r1, r9
 8000e54:	4640      	mov	r0, r8
 8000e56:	6923      	ldr	r3, [r4, #16]
 8000e58:	47d0      	blx	sl
 8000e5a:	3001      	adds	r0, #1
 8000e5c:	d0ab      	beq.n	8000db6 <_printf_i+0x166>
 8000e5e:	6823      	ldr	r3, [r4, #0]
 8000e60:	079b      	lsls	r3, r3, #30
 8000e62:	d413      	bmi.n	8000e8c <_printf_i+0x23c>
 8000e64:	68e0      	ldr	r0, [r4, #12]
 8000e66:	9b03      	ldr	r3, [sp, #12]
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	bfb8      	it	lt
 8000e6c:	4618      	movlt	r0, r3
 8000e6e:	e7a4      	b.n	8000dba <_printf_i+0x16a>
 8000e70:	2301      	movs	r3, #1
 8000e72:	4632      	mov	r2, r6
 8000e74:	4649      	mov	r1, r9
 8000e76:	4640      	mov	r0, r8
 8000e78:	47d0      	blx	sl
 8000e7a:	3001      	adds	r0, #1
 8000e7c:	d09b      	beq.n	8000db6 <_printf_i+0x166>
 8000e7e:	3501      	adds	r5, #1
 8000e80:	68e3      	ldr	r3, [r4, #12]
 8000e82:	9903      	ldr	r1, [sp, #12]
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	42ab      	cmp	r3, r5
 8000e88:	dcf2      	bgt.n	8000e70 <_printf_i+0x220>
 8000e8a:	e7eb      	b.n	8000e64 <_printf_i+0x214>
 8000e8c:	2500      	movs	r5, #0
 8000e8e:	f104 0619 	add.w	r6, r4, #25
 8000e92:	e7f5      	b.n	8000e80 <_printf_i+0x230>
 8000e94:	08001541 	.word	0x08001541
 8000e98:	08001552 	.word	0x08001552

08000e9c <_sbrk_r>:
 8000e9c:	b538      	push	{r3, r4, r5, lr}
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	4d05      	ldr	r5, [pc, #20]	; (8000eb8 <_sbrk_r+0x1c>)
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	602b      	str	r3, [r5, #0]
 8000ea8:	f7ff fa28 	bl	80002fc <_sbrk>
 8000eac:	1c43      	adds	r3, r0, #1
 8000eae:	d102      	bne.n	8000eb6 <_sbrk_r+0x1a>
 8000eb0:	682b      	ldr	r3, [r5, #0]
 8000eb2:	b103      	cbz	r3, 8000eb6 <_sbrk_r+0x1a>
 8000eb4:	6023      	str	r3, [r4, #0]
 8000eb6:	bd38      	pop	{r3, r4, r5, pc}
 8000eb8:	2000009c 	.word	0x2000009c

08000ebc <__sread>:
 8000ebc:	b510      	push	{r4, lr}
 8000ebe:	460c      	mov	r4, r1
 8000ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ec4:	f000 fab8 	bl	8001438 <_read_r>
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	bfab      	itete	ge
 8000ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000ece:	89a3      	ldrhlt	r3, [r4, #12]
 8000ed0:	181b      	addge	r3, r3, r0
 8000ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000ed6:	bfac      	ite	ge
 8000ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8000eda:	81a3      	strhlt	r3, [r4, #12]
 8000edc:	bd10      	pop	{r4, pc}

08000ede <__swrite>:
 8000ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ee2:	461f      	mov	r7, r3
 8000ee4:	898b      	ldrh	r3, [r1, #12]
 8000ee6:	4605      	mov	r5, r0
 8000ee8:	05db      	lsls	r3, r3, #23
 8000eea:	460c      	mov	r4, r1
 8000eec:	4616      	mov	r6, r2
 8000eee:	d505      	bpl.n	8000efc <__swrite+0x1e>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ef8:	f000 f9c4 	bl	8001284 <_lseek_r>
 8000efc:	89a3      	ldrh	r3, [r4, #12]
 8000efe:	4632      	mov	r2, r6
 8000f00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f04:	81a3      	strh	r3, [r4, #12]
 8000f06:	4628      	mov	r0, r5
 8000f08:	463b      	mov	r3, r7
 8000f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f12:	f000 b869 	b.w	8000fe8 <_write_r>

08000f16 <__sseek>:
 8000f16:	b510      	push	{r4, lr}
 8000f18:	460c      	mov	r4, r1
 8000f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f1e:	f000 f9b1 	bl	8001284 <_lseek_r>
 8000f22:	1c43      	adds	r3, r0, #1
 8000f24:	89a3      	ldrh	r3, [r4, #12]
 8000f26:	bf15      	itete	ne
 8000f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f32:	81a3      	strheq	r3, [r4, #12]
 8000f34:	bf18      	it	ne
 8000f36:	81a3      	strhne	r3, [r4, #12]
 8000f38:	bd10      	pop	{r4, pc}

08000f3a <__sclose>:
 8000f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f3e:	f000 b8d3 	b.w	80010e8 <_close_r>
	...

08000f44 <__swbuf_r>:
 8000f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f46:	460e      	mov	r6, r1
 8000f48:	4614      	mov	r4, r2
 8000f4a:	4605      	mov	r5, r0
 8000f4c:	b118      	cbz	r0, 8000f56 <__swbuf_r+0x12>
 8000f4e:	6983      	ldr	r3, [r0, #24]
 8000f50:	b90b      	cbnz	r3, 8000f56 <__swbuf_r+0x12>
 8000f52:	f7ff fb81 	bl	8000658 <__sinit>
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <__swbuf_r+0x98>)
 8000f58:	429c      	cmp	r4, r3
 8000f5a:	d12b      	bne.n	8000fb4 <__swbuf_r+0x70>
 8000f5c:	686c      	ldr	r4, [r5, #4]
 8000f5e:	69a3      	ldr	r3, [r4, #24]
 8000f60:	60a3      	str	r3, [r4, #8]
 8000f62:	89a3      	ldrh	r3, [r4, #12]
 8000f64:	071a      	lsls	r2, r3, #28
 8000f66:	d52f      	bpl.n	8000fc8 <__swbuf_r+0x84>
 8000f68:	6923      	ldr	r3, [r4, #16]
 8000f6a:	b36b      	cbz	r3, 8000fc8 <__swbuf_r+0x84>
 8000f6c:	6923      	ldr	r3, [r4, #16]
 8000f6e:	6820      	ldr	r0, [r4, #0]
 8000f70:	b2f6      	uxtb	r6, r6
 8000f72:	1ac0      	subs	r0, r0, r3
 8000f74:	6963      	ldr	r3, [r4, #20]
 8000f76:	4637      	mov	r7, r6
 8000f78:	4283      	cmp	r3, r0
 8000f7a:	dc04      	bgt.n	8000f86 <__swbuf_r+0x42>
 8000f7c:	4621      	mov	r1, r4
 8000f7e:	4628      	mov	r0, r5
 8000f80:	f000 f944 	bl	800120c <_fflush_r>
 8000f84:	bb30      	cbnz	r0, 8000fd4 <__swbuf_r+0x90>
 8000f86:	68a3      	ldr	r3, [r4, #8]
 8000f88:	3001      	adds	r0, #1
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	60a3      	str	r3, [r4, #8]
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	6022      	str	r2, [r4, #0]
 8000f94:	701e      	strb	r6, [r3, #0]
 8000f96:	6963      	ldr	r3, [r4, #20]
 8000f98:	4283      	cmp	r3, r0
 8000f9a:	d004      	beq.n	8000fa6 <__swbuf_r+0x62>
 8000f9c:	89a3      	ldrh	r3, [r4, #12]
 8000f9e:	07db      	lsls	r3, r3, #31
 8000fa0:	d506      	bpl.n	8000fb0 <__swbuf_r+0x6c>
 8000fa2:	2e0a      	cmp	r6, #10
 8000fa4:	d104      	bne.n	8000fb0 <__swbuf_r+0x6c>
 8000fa6:	4621      	mov	r1, r4
 8000fa8:	4628      	mov	r0, r5
 8000faa:	f000 f92f 	bl	800120c <_fflush_r>
 8000fae:	b988      	cbnz	r0, 8000fd4 <__swbuf_r+0x90>
 8000fb0:	4638      	mov	r0, r7
 8000fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <__swbuf_r+0x9c>)
 8000fb6:	429c      	cmp	r4, r3
 8000fb8:	d101      	bne.n	8000fbe <__swbuf_r+0x7a>
 8000fba:	68ac      	ldr	r4, [r5, #8]
 8000fbc:	e7cf      	b.n	8000f5e <__swbuf_r+0x1a>
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <__swbuf_r+0xa0>)
 8000fc0:	429c      	cmp	r4, r3
 8000fc2:	bf08      	it	eq
 8000fc4:	68ec      	ldreq	r4, [r5, #12]
 8000fc6:	e7ca      	b.n	8000f5e <__swbuf_r+0x1a>
 8000fc8:	4621      	mov	r1, r4
 8000fca:	4628      	mov	r0, r5
 8000fcc:	f000 f81e 	bl	800100c <__swsetup_r>
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d0cb      	beq.n	8000f6c <__swbuf_r+0x28>
 8000fd4:	f04f 37ff 	mov.w	r7, #4294967295
 8000fd8:	e7ea      	b.n	8000fb0 <__swbuf_r+0x6c>
 8000fda:	bf00      	nop
 8000fdc:	080014f0 	.word	0x080014f0
 8000fe0:	08001510 	.word	0x08001510
 8000fe4:	080014d0 	.word	0x080014d0

08000fe8 <_write_r>:
 8000fe8:	b538      	push	{r3, r4, r5, lr}
 8000fea:	4604      	mov	r4, r0
 8000fec:	4608      	mov	r0, r1
 8000fee:	4611      	mov	r1, r2
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4d05      	ldr	r5, [pc, #20]	; (8001008 <_write_r+0x20>)
 8000ff4:	602a      	str	r2, [r5, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	f7ff f933 	bl	8000262 <_write>
 8000ffc:	1c43      	adds	r3, r0, #1
 8000ffe:	d102      	bne.n	8001006 <_write_r+0x1e>
 8001000:	682b      	ldr	r3, [r5, #0]
 8001002:	b103      	cbz	r3, 8001006 <_write_r+0x1e>
 8001004:	6023      	str	r3, [r4, #0]
 8001006:	bd38      	pop	{r3, r4, r5, pc}
 8001008:	2000009c 	.word	0x2000009c

0800100c <__swsetup_r>:
 800100c:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <__swsetup_r+0xcc>)
 800100e:	b570      	push	{r4, r5, r6, lr}
 8001010:	681d      	ldr	r5, [r3, #0]
 8001012:	4606      	mov	r6, r0
 8001014:	460c      	mov	r4, r1
 8001016:	b125      	cbz	r5, 8001022 <__swsetup_r+0x16>
 8001018:	69ab      	ldr	r3, [r5, #24]
 800101a:	b913      	cbnz	r3, 8001022 <__swsetup_r+0x16>
 800101c:	4628      	mov	r0, r5
 800101e:	f7ff fb1b 	bl	8000658 <__sinit>
 8001022:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <__swsetup_r+0xd0>)
 8001024:	429c      	cmp	r4, r3
 8001026:	d10f      	bne.n	8001048 <__swsetup_r+0x3c>
 8001028:	686c      	ldr	r4, [r5, #4]
 800102a:	89a3      	ldrh	r3, [r4, #12]
 800102c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001030:	0719      	lsls	r1, r3, #28
 8001032:	d42c      	bmi.n	800108e <__swsetup_r+0x82>
 8001034:	06dd      	lsls	r5, r3, #27
 8001036:	d411      	bmi.n	800105c <__swsetup_r+0x50>
 8001038:	2309      	movs	r3, #9
 800103a:	6033      	str	r3, [r6, #0]
 800103c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	81a3      	strh	r3, [r4, #12]
 8001046:	e03e      	b.n	80010c6 <__swsetup_r+0xba>
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <__swsetup_r+0xd4>)
 800104a:	429c      	cmp	r4, r3
 800104c:	d101      	bne.n	8001052 <__swsetup_r+0x46>
 800104e:	68ac      	ldr	r4, [r5, #8]
 8001050:	e7eb      	b.n	800102a <__swsetup_r+0x1e>
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <__swsetup_r+0xd8>)
 8001054:	429c      	cmp	r4, r3
 8001056:	bf08      	it	eq
 8001058:	68ec      	ldreq	r4, [r5, #12]
 800105a:	e7e6      	b.n	800102a <__swsetup_r+0x1e>
 800105c:	0758      	lsls	r0, r3, #29
 800105e:	d512      	bpl.n	8001086 <__swsetup_r+0x7a>
 8001060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001062:	b141      	cbz	r1, 8001076 <__swsetup_r+0x6a>
 8001064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001068:	4299      	cmp	r1, r3
 800106a:	d002      	beq.n	8001072 <__swsetup_r+0x66>
 800106c:	4630      	mov	r0, r6
 800106e:	f000 f99b 	bl	80013a8 <_free_r>
 8001072:	2300      	movs	r3, #0
 8001074:	6363      	str	r3, [r4, #52]	; 0x34
 8001076:	89a3      	ldrh	r3, [r4, #12]
 8001078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800107c:	81a3      	strh	r3, [r4, #12]
 800107e:	2300      	movs	r3, #0
 8001080:	6063      	str	r3, [r4, #4]
 8001082:	6923      	ldr	r3, [r4, #16]
 8001084:	6023      	str	r3, [r4, #0]
 8001086:	89a3      	ldrh	r3, [r4, #12]
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	81a3      	strh	r3, [r4, #12]
 800108e:	6923      	ldr	r3, [r4, #16]
 8001090:	b94b      	cbnz	r3, 80010a6 <__swsetup_r+0x9a>
 8001092:	89a3      	ldrh	r3, [r4, #12]
 8001094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800109c:	d003      	beq.n	80010a6 <__swsetup_r+0x9a>
 800109e:	4621      	mov	r1, r4
 80010a0:	4630      	mov	r0, r6
 80010a2:	f000 f927 	bl	80012f4 <__smakebuf_r>
 80010a6:	89a0      	ldrh	r0, [r4, #12]
 80010a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80010ac:	f010 0301 	ands.w	r3, r0, #1
 80010b0:	d00a      	beq.n	80010c8 <__swsetup_r+0xbc>
 80010b2:	2300      	movs	r3, #0
 80010b4:	60a3      	str	r3, [r4, #8]
 80010b6:	6963      	ldr	r3, [r4, #20]
 80010b8:	425b      	negs	r3, r3
 80010ba:	61a3      	str	r3, [r4, #24]
 80010bc:	6923      	ldr	r3, [r4, #16]
 80010be:	b943      	cbnz	r3, 80010d2 <__swsetup_r+0xc6>
 80010c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80010c4:	d1ba      	bne.n	800103c <__swsetup_r+0x30>
 80010c6:	bd70      	pop	{r4, r5, r6, pc}
 80010c8:	0781      	lsls	r1, r0, #30
 80010ca:	bf58      	it	pl
 80010cc:	6963      	ldrpl	r3, [r4, #20]
 80010ce:	60a3      	str	r3, [r4, #8]
 80010d0:	e7f4      	b.n	80010bc <__swsetup_r+0xb0>
 80010d2:	2000      	movs	r0, #0
 80010d4:	e7f7      	b.n	80010c6 <__swsetup_r+0xba>
 80010d6:	bf00      	nop
 80010d8:	20000000 	.word	0x20000000
 80010dc:	080014f0 	.word	0x080014f0
 80010e0:	08001510 	.word	0x08001510
 80010e4:	080014d0 	.word	0x080014d0

080010e8 <_close_r>:
 80010e8:	b538      	push	{r3, r4, r5, lr}
 80010ea:	2300      	movs	r3, #0
 80010ec:	4d05      	ldr	r5, [pc, #20]	; (8001104 <_close_r+0x1c>)
 80010ee:	4604      	mov	r4, r0
 80010f0:	4608      	mov	r0, r1
 80010f2:	602b      	str	r3, [r5, #0]
 80010f4:	f7ff f8d1 	bl	800029a <_close>
 80010f8:	1c43      	adds	r3, r0, #1
 80010fa:	d102      	bne.n	8001102 <_close_r+0x1a>
 80010fc:	682b      	ldr	r3, [r5, #0]
 80010fe:	b103      	cbz	r3, 8001102 <_close_r+0x1a>
 8001100:	6023      	str	r3, [r4, #0]
 8001102:	bd38      	pop	{r3, r4, r5, pc}
 8001104:	2000009c 	.word	0x2000009c

08001108 <__sflush_r>:
 8001108:	898a      	ldrh	r2, [r1, #12]
 800110a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110c:	4605      	mov	r5, r0
 800110e:	0710      	lsls	r0, r2, #28
 8001110:	460c      	mov	r4, r1
 8001112:	d457      	bmi.n	80011c4 <__sflush_r+0xbc>
 8001114:	684b      	ldr	r3, [r1, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	dc04      	bgt.n	8001124 <__sflush_r+0x1c>
 800111a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800111c:	2b00      	cmp	r3, #0
 800111e:	dc01      	bgt.n	8001124 <__sflush_r+0x1c>
 8001120:	2000      	movs	r0, #0
 8001122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001126:	2e00      	cmp	r6, #0
 8001128:	d0fa      	beq.n	8001120 <__sflush_r+0x18>
 800112a:	2300      	movs	r3, #0
 800112c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001130:	682f      	ldr	r7, [r5, #0]
 8001132:	602b      	str	r3, [r5, #0]
 8001134:	d032      	beq.n	800119c <__sflush_r+0x94>
 8001136:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001138:	89a3      	ldrh	r3, [r4, #12]
 800113a:	075a      	lsls	r2, r3, #29
 800113c:	d505      	bpl.n	800114a <__sflush_r+0x42>
 800113e:	6863      	ldr	r3, [r4, #4]
 8001140:	1ac0      	subs	r0, r0, r3
 8001142:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001144:	b10b      	cbz	r3, 800114a <__sflush_r+0x42>
 8001146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001148:	1ac0      	subs	r0, r0, r3
 800114a:	2300      	movs	r3, #0
 800114c:	4602      	mov	r2, r0
 800114e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001150:	4628      	mov	r0, r5
 8001152:	6a21      	ldr	r1, [r4, #32]
 8001154:	47b0      	blx	r6
 8001156:	1c43      	adds	r3, r0, #1
 8001158:	89a3      	ldrh	r3, [r4, #12]
 800115a:	d106      	bne.n	800116a <__sflush_r+0x62>
 800115c:	6829      	ldr	r1, [r5, #0]
 800115e:	291d      	cmp	r1, #29
 8001160:	d82c      	bhi.n	80011bc <__sflush_r+0xb4>
 8001162:	4a29      	ldr	r2, [pc, #164]	; (8001208 <__sflush_r+0x100>)
 8001164:	40ca      	lsrs	r2, r1
 8001166:	07d6      	lsls	r6, r2, #31
 8001168:	d528      	bpl.n	80011bc <__sflush_r+0xb4>
 800116a:	2200      	movs	r2, #0
 800116c:	6062      	str	r2, [r4, #4]
 800116e:	6922      	ldr	r2, [r4, #16]
 8001170:	04d9      	lsls	r1, r3, #19
 8001172:	6022      	str	r2, [r4, #0]
 8001174:	d504      	bpl.n	8001180 <__sflush_r+0x78>
 8001176:	1c42      	adds	r2, r0, #1
 8001178:	d101      	bne.n	800117e <__sflush_r+0x76>
 800117a:	682b      	ldr	r3, [r5, #0]
 800117c:	b903      	cbnz	r3, 8001180 <__sflush_r+0x78>
 800117e:	6560      	str	r0, [r4, #84]	; 0x54
 8001180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001182:	602f      	str	r7, [r5, #0]
 8001184:	2900      	cmp	r1, #0
 8001186:	d0cb      	beq.n	8001120 <__sflush_r+0x18>
 8001188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800118c:	4299      	cmp	r1, r3
 800118e:	d002      	beq.n	8001196 <__sflush_r+0x8e>
 8001190:	4628      	mov	r0, r5
 8001192:	f000 f909 	bl	80013a8 <_free_r>
 8001196:	2000      	movs	r0, #0
 8001198:	6360      	str	r0, [r4, #52]	; 0x34
 800119a:	e7c2      	b.n	8001122 <__sflush_r+0x1a>
 800119c:	6a21      	ldr	r1, [r4, #32]
 800119e:	2301      	movs	r3, #1
 80011a0:	4628      	mov	r0, r5
 80011a2:	47b0      	blx	r6
 80011a4:	1c41      	adds	r1, r0, #1
 80011a6:	d1c7      	bne.n	8001138 <__sflush_r+0x30>
 80011a8:	682b      	ldr	r3, [r5, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0c4      	beq.n	8001138 <__sflush_r+0x30>
 80011ae:	2b1d      	cmp	r3, #29
 80011b0:	d001      	beq.n	80011b6 <__sflush_r+0xae>
 80011b2:	2b16      	cmp	r3, #22
 80011b4:	d101      	bne.n	80011ba <__sflush_r+0xb2>
 80011b6:	602f      	str	r7, [r5, #0]
 80011b8:	e7b2      	b.n	8001120 <__sflush_r+0x18>
 80011ba:	89a3      	ldrh	r3, [r4, #12]
 80011bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c0:	81a3      	strh	r3, [r4, #12]
 80011c2:	e7ae      	b.n	8001122 <__sflush_r+0x1a>
 80011c4:	690f      	ldr	r7, [r1, #16]
 80011c6:	2f00      	cmp	r7, #0
 80011c8:	d0aa      	beq.n	8001120 <__sflush_r+0x18>
 80011ca:	0793      	lsls	r3, r2, #30
 80011cc:	bf18      	it	ne
 80011ce:	2300      	movne	r3, #0
 80011d0:	680e      	ldr	r6, [r1, #0]
 80011d2:	bf08      	it	eq
 80011d4:	694b      	ldreq	r3, [r1, #20]
 80011d6:	1bf6      	subs	r6, r6, r7
 80011d8:	600f      	str	r7, [r1, #0]
 80011da:	608b      	str	r3, [r1, #8]
 80011dc:	2e00      	cmp	r6, #0
 80011de:	dd9f      	ble.n	8001120 <__sflush_r+0x18>
 80011e0:	4633      	mov	r3, r6
 80011e2:	463a      	mov	r2, r7
 80011e4:	4628      	mov	r0, r5
 80011e6:	6a21      	ldr	r1, [r4, #32]
 80011e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80011ec:	47e0      	blx	ip
 80011ee:	2800      	cmp	r0, #0
 80011f0:	dc06      	bgt.n	8001200 <__sflush_r+0xf8>
 80011f2:	89a3      	ldrh	r3, [r4, #12]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fc:	81a3      	strh	r3, [r4, #12]
 80011fe:	e790      	b.n	8001122 <__sflush_r+0x1a>
 8001200:	4407      	add	r7, r0
 8001202:	1a36      	subs	r6, r6, r0
 8001204:	e7ea      	b.n	80011dc <__sflush_r+0xd4>
 8001206:	bf00      	nop
 8001208:	20400001 	.word	0x20400001

0800120c <_fflush_r>:
 800120c:	b538      	push	{r3, r4, r5, lr}
 800120e:	690b      	ldr	r3, [r1, #16]
 8001210:	4605      	mov	r5, r0
 8001212:	460c      	mov	r4, r1
 8001214:	b913      	cbnz	r3, 800121c <_fflush_r+0x10>
 8001216:	2500      	movs	r5, #0
 8001218:	4628      	mov	r0, r5
 800121a:	bd38      	pop	{r3, r4, r5, pc}
 800121c:	b118      	cbz	r0, 8001226 <_fflush_r+0x1a>
 800121e:	6983      	ldr	r3, [r0, #24]
 8001220:	b90b      	cbnz	r3, 8001226 <_fflush_r+0x1a>
 8001222:	f7ff fa19 	bl	8000658 <__sinit>
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <_fflush_r+0x6c>)
 8001228:	429c      	cmp	r4, r3
 800122a:	d11b      	bne.n	8001264 <_fflush_r+0x58>
 800122c:	686c      	ldr	r4, [r5, #4]
 800122e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0ef      	beq.n	8001216 <_fflush_r+0xa>
 8001236:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001238:	07d0      	lsls	r0, r2, #31
 800123a:	d404      	bmi.n	8001246 <_fflush_r+0x3a>
 800123c:	0599      	lsls	r1, r3, #22
 800123e:	d402      	bmi.n	8001246 <_fflush_r+0x3a>
 8001240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001242:	f7ff faa7 	bl	8000794 <__retarget_lock_acquire_recursive>
 8001246:	4628      	mov	r0, r5
 8001248:	4621      	mov	r1, r4
 800124a:	f7ff ff5d 	bl	8001108 <__sflush_r>
 800124e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001250:	4605      	mov	r5, r0
 8001252:	07da      	lsls	r2, r3, #31
 8001254:	d4e0      	bmi.n	8001218 <_fflush_r+0xc>
 8001256:	89a3      	ldrh	r3, [r4, #12]
 8001258:	059b      	lsls	r3, r3, #22
 800125a:	d4dd      	bmi.n	8001218 <_fflush_r+0xc>
 800125c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800125e:	f7ff fa9a 	bl	8000796 <__retarget_lock_release_recursive>
 8001262:	e7d9      	b.n	8001218 <_fflush_r+0xc>
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <_fflush_r+0x70>)
 8001266:	429c      	cmp	r4, r3
 8001268:	d101      	bne.n	800126e <_fflush_r+0x62>
 800126a:	68ac      	ldr	r4, [r5, #8]
 800126c:	e7df      	b.n	800122e <_fflush_r+0x22>
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <_fflush_r+0x74>)
 8001270:	429c      	cmp	r4, r3
 8001272:	bf08      	it	eq
 8001274:	68ec      	ldreq	r4, [r5, #12]
 8001276:	e7da      	b.n	800122e <_fflush_r+0x22>
 8001278:	080014f0 	.word	0x080014f0
 800127c:	08001510 	.word	0x08001510
 8001280:	080014d0 	.word	0x080014d0

08001284 <_lseek_r>:
 8001284:	b538      	push	{r3, r4, r5, lr}
 8001286:	4604      	mov	r4, r0
 8001288:	4608      	mov	r0, r1
 800128a:	4611      	mov	r1, r2
 800128c:	2200      	movs	r2, #0
 800128e:	4d05      	ldr	r5, [pc, #20]	; (80012a4 <_lseek_r+0x20>)
 8001290:	602a      	str	r2, [r5, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	f7ff f825 	bl	80002e2 <_lseek>
 8001298:	1c43      	adds	r3, r0, #1
 800129a:	d102      	bne.n	80012a2 <_lseek_r+0x1e>
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	b103      	cbz	r3, 80012a2 <_lseek_r+0x1e>
 80012a0:	6023      	str	r3, [r4, #0]
 80012a2:	bd38      	pop	{r3, r4, r5, pc}
 80012a4:	2000009c 	.word	0x2000009c

080012a8 <__swhatbuf_r>:
 80012a8:	b570      	push	{r4, r5, r6, lr}
 80012aa:	460e      	mov	r6, r1
 80012ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012b0:	4614      	mov	r4, r2
 80012b2:	2900      	cmp	r1, #0
 80012b4:	461d      	mov	r5, r3
 80012b6:	b096      	sub	sp, #88	; 0x58
 80012b8:	da08      	bge.n	80012cc <__swhatbuf_r+0x24>
 80012ba:	2200      	movs	r2, #0
 80012bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80012c0:	602a      	str	r2, [r5, #0]
 80012c2:	061a      	lsls	r2, r3, #24
 80012c4:	d410      	bmi.n	80012e8 <__swhatbuf_r+0x40>
 80012c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ca:	e00e      	b.n	80012ea <__swhatbuf_r+0x42>
 80012cc:	466a      	mov	r2, sp
 80012ce:	f000 f8c5 	bl	800145c <_fstat_r>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	dbf1      	blt.n	80012ba <__swhatbuf_r+0x12>
 80012d6:	9a01      	ldr	r2, [sp, #4]
 80012d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80012dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80012e0:	425a      	negs	r2, r3
 80012e2:	415a      	adcs	r2, r3
 80012e4:	602a      	str	r2, [r5, #0]
 80012e6:	e7ee      	b.n	80012c6 <__swhatbuf_r+0x1e>
 80012e8:	2340      	movs	r3, #64	; 0x40
 80012ea:	2000      	movs	r0, #0
 80012ec:	6023      	str	r3, [r4, #0]
 80012ee:	b016      	add	sp, #88	; 0x58
 80012f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080012f4 <__smakebuf_r>:
 80012f4:	898b      	ldrh	r3, [r1, #12]
 80012f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012f8:	079d      	lsls	r5, r3, #30
 80012fa:	4606      	mov	r6, r0
 80012fc:	460c      	mov	r4, r1
 80012fe:	d507      	bpl.n	8001310 <__smakebuf_r+0x1c>
 8001300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001304:	6023      	str	r3, [r4, #0]
 8001306:	6123      	str	r3, [r4, #16]
 8001308:	2301      	movs	r3, #1
 800130a:	6163      	str	r3, [r4, #20]
 800130c:	b002      	add	sp, #8
 800130e:	bd70      	pop	{r4, r5, r6, pc}
 8001310:	466a      	mov	r2, sp
 8001312:	ab01      	add	r3, sp, #4
 8001314:	f7ff ffc8 	bl	80012a8 <__swhatbuf_r>
 8001318:	9900      	ldr	r1, [sp, #0]
 800131a:	4605      	mov	r5, r0
 800131c:	4630      	mov	r0, r6
 800131e:	f7ff fa5b 	bl	80007d8 <_malloc_r>
 8001322:	b948      	cbnz	r0, 8001338 <__smakebuf_r+0x44>
 8001324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001328:	059a      	lsls	r2, r3, #22
 800132a:	d4ef      	bmi.n	800130c <__smakebuf_r+0x18>
 800132c:	f023 0303 	bic.w	r3, r3, #3
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	81a3      	strh	r3, [r4, #12]
 8001336:	e7e3      	b.n	8001300 <__smakebuf_r+0xc>
 8001338:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <__smakebuf_r+0x7c>)
 800133a:	62b3      	str	r3, [r6, #40]	; 0x28
 800133c:	89a3      	ldrh	r3, [r4, #12]
 800133e:	6020      	str	r0, [r4, #0]
 8001340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001344:	81a3      	strh	r3, [r4, #12]
 8001346:	9b00      	ldr	r3, [sp, #0]
 8001348:	6120      	str	r0, [r4, #16]
 800134a:	6163      	str	r3, [r4, #20]
 800134c:	9b01      	ldr	r3, [sp, #4]
 800134e:	b15b      	cbz	r3, 8001368 <__smakebuf_r+0x74>
 8001350:	4630      	mov	r0, r6
 8001352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001356:	f000 f893 	bl	8001480 <_isatty_r>
 800135a:	b128      	cbz	r0, 8001368 <__smakebuf_r+0x74>
 800135c:	89a3      	ldrh	r3, [r4, #12]
 800135e:	f023 0303 	bic.w	r3, r3, #3
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	81a3      	strh	r3, [r4, #12]
 8001368:	89a0      	ldrh	r0, [r4, #12]
 800136a:	4305      	orrs	r5, r0
 800136c:	81a5      	strh	r5, [r4, #12]
 800136e:	e7cd      	b.n	800130c <__smakebuf_r+0x18>
 8001370:	080005f1 	.word	0x080005f1

08001374 <memchr>:
 8001374:	4603      	mov	r3, r0
 8001376:	b510      	push	{r4, lr}
 8001378:	b2c9      	uxtb	r1, r1
 800137a:	4402      	add	r2, r0
 800137c:	4293      	cmp	r3, r2
 800137e:	4618      	mov	r0, r3
 8001380:	d101      	bne.n	8001386 <memchr+0x12>
 8001382:	2000      	movs	r0, #0
 8001384:	e003      	b.n	800138e <memchr+0x1a>
 8001386:	7804      	ldrb	r4, [r0, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	428c      	cmp	r4, r1
 800138c:	d1f6      	bne.n	800137c <memchr+0x8>
 800138e:	bd10      	pop	{r4, pc}

08001390 <__malloc_lock>:
 8001390:	4801      	ldr	r0, [pc, #4]	; (8001398 <__malloc_lock+0x8>)
 8001392:	f7ff b9ff 	b.w	8000794 <__retarget_lock_acquire_recursive>
 8001396:	bf00      	nop
 8001398:	20000090 	.word	0x20000090

0800139c <__malloc_unlock>:
 800139c:	4801      	ldr	r0, [pc, #4]	; (80013a4 <__malloc_unlock+0x8>)
 800139e:	f7ff b9fa 	b.w	8000796 <__retarget_lock_release_recursive>
 80013a2:	bf00      	nop
 80013a4:	20000090 	.word	0x20000090

080013a8 <_free_r>:
 80013a8:	b538      	push	{r3, r4, r5, lr}
 80013aa:	4605      	mov	r5, r0
 80013ac:	2900      	cmp	r1, #0
 80013ae:	d040      	beq.n	8001432 <_free_r+0x8a>
 80013b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013b4:	1f0c      	subs	r4, r1, #4
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	bfb8      	it	lt
 80013ba:	18e4      	addlt	r4, r4, r3
 80013bc:	f7ff ffe8 	bl	8001390 <__malloc_lock>
 80013c0:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <_free_r+0x8c>)
 80013c2:	6813      	ldr	r3, [r2, #0]
 80013c4:	b933      	cbnz	r3, 80013d4 <_free_r+0x2c>
 80013c6:	6063      	str	r3, [r4, #4]
 80013c8:	6014      	str	r4, [r2, #0]
 80013ca:	4628      	mov	r0, r5
 80013cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80013d0:	f7ff bfe4 	b.w	800139c <__malloc_unlock>
 80013d4:	42a3      	cmp	r3, r4
 80013d6:	d908      	bls.n	80013ea <_free_r+0x42>
 80013d8:	6820      	ldr	r0, [r4, #0]
 80013da:	1821      	adds	r1, r4, r0
 80013dc:	428b      	cmp	r3, r1
 80013de:	bf01      	itttt	eq
 80013e0:	6819      	ldreq	r1, [r3, #0]
 80013e2:	685b      	ldreq	r3, [r3, #4]
 80013e4:	1809      	addeq	r1, r1, r0
 80013e6:	6021      	streq	r1, [r4, #0]
 80013e8:	e7ed      	b.n	80013c6 <_free_r+0x1e>
 80013ea:	461a      	mov	r2, r3
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	b10b      	cbz	r3, 80013f4 <_free_r+0x4c>
 80013f0:	42a3      	cmp	r3, r4
 80013f2:	d9fa      	bls.n	80013ea <_free_r+0x42>
 80013f4:	6811      	ldr	r1, [r2, #0]
 80013f6:	1850      	adds	r0, r2, r1
 80013f8:	42a0      	cmp	r0, r4
 80013fa:	d10b      	bne.n	8001414 <_free_r+0x6c>
 80013fc:	6820      	ldr	r0, [r4, #0]
 80013fe:	4401      	add	r1, r0
 8001400:	1850      	adds	r0, r2, r1
 8001402:	4283      	cmp	r3, r0
 8001404:	6011      	str	r1, [r2, #0]
 8001406:	d1e0      	bne.n	80013ca <_free_r+0x22>
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	4401      	add	r1, r0
 800140e:	6011      	str	r1, [r2, #0]
 8001410:	6053      	str	r3, [r2, #4]
 8001412:	e7da      	b.n	80013ca <_free_r+0x22>
 8001414:	d902      	bls.n	800141c <_free_r+0x74>
 8001416:	230c      	movs	r3, #12
 8001418:	602b      	str	r3, [r5, #0]
 800141a:	e7d6      	b.n	80013ca <_free_r+0x22>
 800141c:	6820      	ldr	r0, [r4, #0]
 800141e:	1821      	adds	r1, r4, r0
 8001420:	428b      	cmp	r3, r1
 8001422:	bf01      	itttt	eq
 8001424:	6819      	ldreq	r1, [r3, #0]
 8001426:	685b      	ldreq	r3, [r3, #4]
 8001428:	1809      	addeq	r1, r1, r0
 800142a:	6021      	streq	r1, [r4, #0]
 800142c:	6063      	str	r3, [r4, #4]
 800142e:	6054      	str	r4, [r2, #4]
 8001430:	e7cb      	b.n	80013ca <_free_r+0x22>
 8001432:	bd38      	pop	{r3, r4, r5, pc}
 8001434:	20000094 	.word	0x20000094

08001438 <_read_r>:
 8001438:	b538      	push	{r3, r4, r5, lr}
 800143a:	4604      	mov	r4, r0
 800143c:	4608      	mov	r0, r1
 800143e:	4611      	mov	r1, r2
 8001440:	2200      	movs	r2, #0
 8001442:	4d05      	ldr	r5, [pc, #20]	; (8001458 <_read_r+0x20>)
 8001444:	602a      	str	r2, [r5, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	f7fe feee 	bl	8000228 <_read>
 800144c:	1c43      	adds	r3, r0, #1
 800144e:	d102      	bne.n	8001456 <_read_r+0x1e>
 8001450:	682b      	ldr	r3, [r5, #0]
 8001452:	b103      	cbz	r3, 8001456 <_read_r+0x1e>
 8001454:	6023      	str	r3, [r4, #0]
 8001456:	bd38      	pop	{r3, r4, r5, pc}
 8001458:	2000009c 	.word	0x2000009c

0800145c <_fstat_r>:
 800145c:	b538      	push	{r3, r4, r5, lr}
 800145e:	2300      	movs	r3, #0
 8001460:	4d06      	ldr	r5, [pc, #24]	; (800147c <_fstat_r+0x20>)
 8001462:	4604      	mov	r4, r0
 8001464:	4608      	mov	r0, r1
 8001466:	4611      	mov	r1, r2
 8001468:	602b      	str	r3, [r5, #0]
 800146a:	f7fe ff21 	bl	80002b0 <_fstat>
 800146e:	1c43      	adds	r3, r0, #1
 8001470:	d102      	bne.n	8001478 <_fstat_r+0x1c>
 8001472:	682b      	ldr	r3, [r5, #0]
 8001474:	b103      	cbz	r3, 8001478 <_fstat_r+0x1c>
 8001476:	6023      	str	r3, [r4, #0]
 8001478:	bd38      	pop	{r3, r4, r5, pc}
 800147a:	bf00      	nop
 800147c:	2000009c 	.word	0x2000009c

08001480 <_isatty_r>:
 8001480:	b538      	push	{r3, r4, r5, lr}
 8001482:	2300      	movs	r3, #0
 8001484:	4d05      	ldr	r5, [pc, #20]	; (800149c <_isatty_r+0x1c>)
 8001486:	4604      	mov	r4, r0
 8001488:	4608      	mov	r0, r1
 800148a:	602b      	str	r3, [r5, #0]
 800148c:	f7fe ff1f 	bl	80002ce <_isatty>
 8001490:	1c43      	adds	r3, r0, #1
 8001492:	d102      	bne.n	800149a <_isatty_r+0x1a>
 8001494:	682b      	ldr	r3, [r5, #0]
 8001496:	b103      	cbz	r3, 800149a <_isatty_r+0x1a>
 8001498:	6023      	str	r3, [r4, #0]
 800149a:	bd38      	pop	{r3, r4, r5, pc}
 800149c:	2000009c 	.word	0x2000009c

080014a0 <_init>:
 80014a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a2:	bf00      	nop
 80014a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014a6:	bc08      	pop	{r3}
 80014a8:	469e      	mov	lr, r3
 80014aa:	4770      	bx	lr

080014ac <_fini>:
 80014ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ae:	bf00      	nop
 80014b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014b2:	bc08      	pop	{r3}
 80014b4:	469e      	mov	lr, r3
 80014b6:	4770      	bx	lr


15_Input_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013f4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001524  08001524  00011524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015d0  080015d0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080015d0  080015d0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015d0  080015d0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015d0  080015d0  000115d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015d4  080015d4  000115d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080015d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  0800163c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  0800163c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013fd  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000646  00000000  00000000  0002148a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00021ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000140  00000000  00000000  00021c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001fac  00000000  00000000  00021da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e25  00000000  00000000  00023d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059ca4  00000000  00000000  00025b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007f81d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ce8  00000000  00000000  0007f870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	0800150c 	.word	0x0800150c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	0800150c 	.word	0x0800150c

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <PC13_exti_init>:
#define IOPCEN		(1U<<4)
#define AFIOEN		(1U<<0)


void PC13_exti_init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001ac:	b672      	cpsid	i
}
 80001ae:	bf00      	nop
	/* Disable global interrupt */
	__disable_irq();

	/* Enable clock access for GPIOC */
	RCC->APB2ENR |= IOPCEN;
 80001b0:	4b1e      	ldr	r3, [pc, #120]	; (800022c <PC13_exti_init+0x84>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a1d      	ldr	r2, [pc, #116]	; (800022c <PC13_exti_init+0x84>)
 80001b6:	f043 0310 	orr.w	r3, r3, #16
 80001ba:	6193      	str	r3, [r2, #24]

	/* Configure PC13 as input */
	GPIOC->CRH &=~(1U<<20);
 80001bc:	4b1c      	ldr	r3, [pc, #112]	; (8000230 <PC13_exti_init+0x88>)
 80001be:	685b      	ldr	r3, [r3, #4]
 80001c0:	4a1b      	ldr	r2, [pc, #108]	; (8000230 <PC13_exti_init+0x88>)
 80001c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80001c6:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &=~(1U<<21);
 80001c8:	4b19      	ldr	r3, [pc, #100]	; (8000230 <PC13_exti_init+0x88>)
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	4a18      	ldr	r2, [pc, #96]	; (8000230 <PC13_exti_init+0x88>)
 80001ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80001d2:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &=~(1U<<22);
 80001d4:	4b16      	ldr	r3, [pc, #88]	; (8000230 <PC13_exti_init+0x88>)
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	4a15      	ldr	r2, [pc, #84]	; (8000230 <PC13_exti_init+0x88>)
 80001da:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80001de:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= (1U<<23);
 80001e0:	4b13      	ldr	r3, [pc, #76]	; (8000230 <PC13_exti_init+0x88>)
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	4a12      	ldr	r2, [pc, #72]	; (8000230 <PC13_exti_init+0x88>)
 80001e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80001ea:	6053      	str	r3, [r2, #4]

	/* Enable clock access for AFIO */
	RCC->APB2ENR |= AFIOEN;
 80001ec:	4b0f      	ldr	r3, [pc, #60]	; (800022c <PC13_exti_init+0x84>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a0e      	ldr	r2, [pc, #56]	; (800022c <PC13_exti_init+0x84>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6193      	str	r3, [r2, #24]

	/* Select PORTC for EXTI13 */
	AFIO->EXTICR[3] |= (1U<<5);
 80001f8:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <PC13_exti_init+0x8c>)
 80001fa:	695b      	ldr	r3, [r3, #20]
 80001fc:	4a0d      	ldr	r2, [pc, #52]	; (8000234 <PC13_exti_init+0x8c>)
 80001fe:	f043 0320 	orr.w	r3, r3, #32
 8000202:	6153      	str	r3, [r2, #20]

	/* Unmask EXTI13 */
	EXTI->IMR |= (1U<<13);
 8000204:	4b0c      	ldr	r3, [pc, #48]	; (8000238 <PC13_exti_init+0x90>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a0b      	ldr	r2, [pc, #44]	; (8000238 <PC13_exti_init+0x90>)
 800020a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800020e:	6013      	str	r3, [r2, #0]

	/* Select falling edge trigger */
	EXTI->FTSR |= (1U<<13);
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <PC13_exti_init+0x90>)
 8000212:	68db      	ldr	r3, [r3, #12]
 8000214:	4a08      	ldr	r2, [pc, #32]	; (8000238 <PC13_exti_init+0x90>)
 8000216:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800021a:	60d3      	str	r3, [r2, #12]

	/* Enable EXTI13 line in NVIC */
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 800021c:	2028      	movs	r0, #40	; 0x28
 800021e:	f7ff ffa7 	bl	8000170 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000222:	b662      	cpsie	i
}
 8000224:	bf00      	nop

	/* Enable global interrupt */
	__enable_irq();
}
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40021000 	.word	0x40021000
 8000230:	40011000 	.word	0x40011000
 8000234:	40010000 	.word	0x40010000
 8000238:	40010400 	.word	0x40010400

0800023c <main>:
#define IOPAEN		(1U<<2)
#define PIN5		(1U<<5)
#define LED_PIN		PIN5

int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= IOPAEN;
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <main+0x4c>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	4a10      	ldr	r2, [pc, #64]	; (8000288 <main+0x4c>)
 8000246:	f043 0304 	orr.w	r3, r3, #4
 800024a:	6193      	str	r3, [r2, #24]
	GPIOA->CRL |= (1U<<21);
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <main+0x50>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a0e      	ldr	r2, [pc, #56]	; (800028c <main+0x50>)
 8000252:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000256:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<20);
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <main+0x50>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0b      	ldr	r2, [pc, #44]	; (800028c <main+0x50>)
 800025e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000262:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<22);
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <main+0x50>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a08      	ldr	r2, [pc, #32]	; (800028c <main+0x50>)
 800026a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800026e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<23);
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <main+0x50>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a05      	ldr	r2, [pc, #20]	; (800028c <main+0x50>)
 8000276:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800027a:	6013      	str	r3, [r2, #0]

	PC13_exti_init();
 800027c:	f7ff ff94 	bl	80001a8 <PC13_exti_init>
	UART2_TX_init();
 8000280:	f000 f8d8 	bl	8000434 <UART2_TX_init>

	while(1)
 8000284:	e7fe      	b.n	8000284 <main+0x48>
 8000286:	bf00      	nop
 8000288:	40021000 	.word	0x40021000
 800028c:	40010800 	.word	0x40010800

08000290 <exti_callback>:

	}
}

void exti_callback(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	printf("BTN Pressed...\n\r");
 8000294:	4805      	ldr	r0, [pc, #20]	; (80002ac <exti_callback+0x1c>)
 8000296:	f000 f9a5 	bl	80005e4 <iprintf>
	GPIOA->ODR ^= LED_PIN;
 800029a:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <exti_callback+0x20>)
 800029c:	68db      	ldr	r3, [r3, #12]
 800029e:	4a04      	ldr	r2, [pc, #16]	; (80002b0 <exti_callback+0x20>)
 80002a0:	f083 0320 	eor.w	r3, r3, #32
 80002a4:	60d3      	str	r3, [r2, #12]
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	08001524 	.word	0x08001524
 80002b0:	40010800 	.word	0x40010800

080002b4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	if((EXTI->PR & LINE13) != 0)
 80002b8:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <EXTI15_10_IRQHandler+0x24>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d007      	beq.n	80002d4 <EXTI15_10_IRQHandler+0x20>
	{
		/* Clear PR flag */
		EXTI->PR |= LINE13;
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <EXTI15_10_IRQHandler+0x24>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <EXTI15_10_IRQHandler+0x24>)
 80002ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002ce:	6153      	str	r3, [r2, #20]
		// Do something
		exti_callback();
 80002d0:	f7ff ffde 	bl	8000290 <exti_callback>
	}
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40010400 	.word	0x40010400

080002dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]
 80002ec:	e00a      	b.n	8000304 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80002ee:	f3af 8000 	nop.w
 80002f2:	4601      	mov	r1, r0
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	60ba      	str	r2, [r7, #8]
 80002fa:	b2ca      	uxtb	r2, r1
 80002fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	3301      	adds	r3, #1
 8000302:	617b      	str	r3, [r7, #20]
 8000304:	697a      	ldr	r2, [r7, #20]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	429a      	cmp	r2, r3
 800030a:	dbf0      	blt.n	80002ee <_read+0x12>
	}

return len;
 800030c:	687b      	ldr	r3, [r7, #4]
}
 800030e:	4618      	mov	r0, r3
 8000310:	3718      	adds	r7, #24
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}

08000316 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000316:	b580      	push	{r7, lr}
 8000318:	b086      	sub	sp, #24
 800031a:	af00      	add	r7, sp, #0
 800031c:	60f8      	str	r0, [r7, #12]
 800031e:	60b9      	str	r1, [r7, #8]
 8000320:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]
 8000326:	e009      	b.n	800033c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	1c5a      	adds	r2, r3, #1
 800032c:	60ba      	str	r2, [r7, #8]
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	4618      	mov	r0, r3
 8000332:	f000 f873 	bl	800041c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	3301      	adds	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	697a      	ldr	r2, [r7, #20]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	429a      	cmp	r2, r3
 8000342:	dbf1      	blt.n	8000328 <_write+0x12>
	}
	return len;
 8000344:	687b      	ldr	r3, [r7, #4]
}
 8000346:	4618      	mov	r0, r3
 8000348:	3718      	adds	r7, #24
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <_close>:

int _close(int file)
{
 800034e:	b480      	push	{r7}
 8000350:	b083      	sub	sp, #12
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
	return -1;
 8000356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800035a:	4618      	mov	r0, r3
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000374:	605a      	str	r2, [r3, #4]
	return 0;
 8000376:	2300      	movs	r3, #0
}
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr

08000382 <_isatty>:

int _isatty(int file)
{
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
	return 1;
 800038a:	2301      	movs	r3, #1
}
 800038c:	4618      	mov	r0, r3
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr

08000396 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000396:	b480      	push	{r7}
 8000398:	b085      	sub	sp, #20
 800039a:	af00      	add	r7, sp, #0
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
	return 0;
 80003a2:	2300      	movs	r3, #0
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	3714      	adds	r7, #20
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr
	...

080003b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003b8:	4a14      	ldr	r2, [pc, #80]	; (800040c <_sbrk+0x5c>)
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <_sbrk+0x60>)
 80003bc:	1ad3      	subs	r3, r2, r3
 80003be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <_sbrk+0x64>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d102      	bne.n	80003d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <_sbrk+0x64>)
 80003ce:	4a12      	ldr	r2, [pc, #72]	; (8000418 <_sbrk+0x68>)
 80003d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <_sbrk+0x64>)
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4413      	add	r3, r2
 80003da:	693a      	ldr	r2, [r7, #16]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d207      	bcs.n	80003f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003e0:	f000 f8ce 	bl	8000580 <__errno>
 80003e4:	4603      	mov	r3, r0
 80003e6:	220c      	movs	r2, #12
 80003e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295
 80003ee:	e009      	b.n	8000404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <_sbrk+0x64>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <_sbrk+0x64>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	4a05      	ldr	r2, [pc, #20]	; (8000414 <_sbrk+0x64>)
 8000400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000402:	68fb      	ldr	r3, [r7, #12]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20005000 	.word	0x20005000
 8000410:	00000400 	.word	0x00000400
 8000414:	20000080 	.word	0x20000080
 8000418:	20000098 	.word	0x20000098

0800041c <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void uart2_write(int ch);

int __io_putchar(int ch)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f000 f847 	bl	80004b8 <uart2_write>
	return ch;
 800042a:	687b      	ldr	r3, [r7, #4]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <UART2_TX_init>:

void UART2_TX_init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	/*----------Configure UART GPIO pin----------*/
	/* Enable clock access to GPIOA */
	RCC->APB2ENR |= IOPAEN;
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <UART2_TX_init+0x74>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a1a      	ldr	r2, [pc, #104]	; (80004a8 <UART2_TX_init+0x74>)
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6193      	str	r3, [r2, #24]

	/* Set PA2 mode to alternate function mode */
	GPIOA->CRL |= (1U<<8);
 8000444:	4b19      	ldr	r3, [pc, #100]	; (80004ac <UART2_TX_init+0x78>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a18      	ldr	r2, [pc, #96]	; (80004ac <UART2_TX_init+0x78>)
 800044a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800044e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<9);
 8000450:	4b16      	ldr	r3, [pc, #88]	; (80004ac <UART2_TX_init+0x78>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a15      	ldr	r2, [pc, #84]	; (80004ac <UART2_TX_init+0x78>)
 8000456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800045a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<10);
 800045c:	4b13      	ldr	r3, [pc, #76]	; (80004ac <UART2_TX_init+0x78>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a12      	ldr	r2, [pc, #72]	; (80004ac <UART2_TX_init+0x78>)
 8000462:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000466:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<11);
 8000468:	4b10      	ldr	r3, [pc, #64]	; (80004ac <UART2_TX_init+0x78>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a0f      	ldr	r2, [pc, #60]	; (80004ac <UART2_TX_init+0x78>)
 800046e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000472:	6013      	str	r3, [r2, #0]

	/*-----------Configure UART module-----------*/
	/* Enable clock access to UART2 */
	RCC->APB1ENR |= UART2EN;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <UART2_TX_init+0x74>)
 8000476:	69db      	ldr	r3, [r3, #28]
 8000478:	4a0b      	ldr	r2, [pc, #44]	; (80004a8 <UART2_TX_init+0x74>)
 800047a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800047e:	61d3      	str	r3, [r2, #28]

	/* Configure baud rate */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000484:	490a      	ldr	r1, [pc, #40]	; (80004b0 <UART2_TX_init+0x7c>)
 8000486:	480b      	ldr	r0, [pc, #44]	; (80004b4 <UART2_TX_init+0x80>)
 8000488:	f000 f82c 	bl	80004e4 <uart_set_baudrate>

	/* Configure the transfer direction */
	USART2->CR1 |= CR1_TE;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <UART2_TX_init+0x80>)
 800048e:	68db      	ldr	r3, [r3, #12]
 8000490:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <UART2_TX_init+0x80>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	60d3      	str	r3, [r2, #12]

	/* Enable UART module */
	USART2->CR1 |= CR1_UE;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <UART2_TX_init+0x80>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	4a05      	ldr	r2, [pc, #20]	; (80004b4 <UART2_TX_init+0x80>)
 800049e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004a2:	60d3      	str	r3, [r2, #12]
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010800 	.word	0x40010800
 80004b0:	007a1200 	.word	0x007a1200
 80004b4:	40004400 	.word	0x40004400

080004b8 <uart2_write>:
	/* Read data */
	return USART2->DR;
}

void uart2_write(int ch)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	/* Make sure the transmit register is empty */
	while(!(USART2->SR & SR_TXE));
 80004c0:	bf00      	nop
 80004c2:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <uart2_write+0x28>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d0f9      	beq.n	80004c2 <uart2_write+0xa>

	/* Write to transmit data register */
	USART2->DR = (ch & 0xFF);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a03      	ldr	r2, [pc, #12]	; (80004e0 <uart2_write+0x28>)
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	6053      	str	r3, [r2, #4]

}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40004400 	.word	0x40004400

080004e4 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80004f0:	6879      	ldr	r1, [r7, #4]
 80004f2:	68b8      	ldr	r0, [r7, #8]
 80004f4:	f000 f808 	bl	8000508 <compute_uart_bd>
 80004f8:	4603      	mov	r3, r0
 80004fa:	461a      	mov	r2, r3
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	609a      	str	r2, [r3, #8]
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	085a      	lsrs	r2, r3, #1
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	441a      	add	r2, r3
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000520:	b29b      	uxth	r3, r3
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000530:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <LoopForever+0x6>)
  ldr r1, =_edata
 8000536:	490d      	ldr	r1, [pc, #52]	; (800056c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000538:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <LoopForever+0xe>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800054c:	4c0a      	ldr	r4, [pc, #40]	; (8000578 <LoopForever+0x16>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800055a:	f000 f817 	bl	800058c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055e:	f7ff fe6d 	bl	800023c <main>

08000562 <LoopForever>:

LoopForever:
    b LoopForever
 8000562:	e7fe      	b.n	8000562 <LoopForever>
  ldr   r0, =_estack
 8000564:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800056c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000570:	080015d8 	.word	0x080015d8
  ldr r2, =_sbss
 8000574:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000578:	20000094 	.word	0x20000094

0800057c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800057c:	e7fe      	b.n	800057c <ADC1_2_IRQHandler>
	...

08000580 <__errno>:
 8000580:	4b01      	ldr	r3, [pc, #4]	; (8000588 <__errno+0x8>)
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000000 	.word	0x20000000

0800058c <__libc_init_array>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	2600      	movs	r6, #0
 8000590:	4d0c      	ldr	r5, [pc, #48]	; (80005c4 <__libc_init_array+0x38>)
 8000592:	4c0d      	ldr	r4, [pc, #52]	; (80005c8 <__libc_init_array+0x3c>)
 8000594:	1b64      	subs	r4, r4, r5
 8000596:	10a4      	asrs	r4, r4, #2
 8000598:	42a6      	cmp	r6, r4
 800059a:	d109      	bne.n	80005b0 <__libc_init_array+0x24>
 800059c:	f000 ffb6 	bl	800150c <_init>
 80005a0:	2600      	movs	r6, #0
 80005a2:	4d0a      	ldr	r5, [pc, #40]	; (80005cc <__libc_init_array+0x40>)
 80005a4:	4c0a      	ldr	r4, [pc, #40]	; (80005d0 <__libc_init_array+0x44>)
 80005a6:	1b64      	subs	r4, r4, r5
 80005a8:	10a4      	asrs	r4, r4, #2
 80005aa:	42a6      	cmp	r6, r4
 80005ac:	d105      	bne.n	80005ba <__libc_init_array+0x2e>
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b4:	4798      	blx	r3
 80005b6:	3601      	adds	r6, #1
 80005b8:	e7ee      	b.n	8000598 <__libc_init_array+0xc>
 80005ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80005be:	4798      	blx	r3
 80005c0:	3601      	adds	r6, #1
 80005c2:	e7f2      	b.n	80005aa <__libc_init_array+0x1e>
 80005c4:	080015d0 	.word	0x080015d0
 80005c8:	080015d0 	.word	0x080015d0
 80005cc:	080015d0 	.word	0x080015d0
 80005d0:	080015d4 	.word	0x080015d4

080005d4 <memset>:
 80005d4:	4603      	mov	r3, r0
 80005d6:	4402      	add	r2, r0
 80005d8:	4293      	cmp	r3, r2
 80005da:	d100      	bne.n	80005de <memset+0xa>
 80005dc:	4770      	bx	lr
 80005de:	f803 1b01 	strb.w	r1, [r3], #1
 80005e2:	e7f9      	b.n	80005d8 <memset+0x4>

080005e4 <iprintf>:
 80005e4:	b40f      	push	{r0, r1, r2, r3}
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <iprintf+0x2c>)
 80005e8:	b513      	push	{r0, r1, r4, lr}
 80005ea:	681c      	ldr	r4, [r3, #0]
 80005ec:	b124      	cbz	r4, 80005f8 <iprintf+0x14>
 80005ee:	69a3      	ldr	r3, [r4, #24]
 80005f0:	b913      	cbnz	r3, 80005f8 <iprintf+0x14>
 80005f2:	4620      	mov	r0, r4
 80005f4:	f000 f866 	bl	80006c4 <__sinit>
 80005f8:	ab05      	add	r3, sp, #20
 80005fa:	4620      	mov	r0, r4
 80005fc:	9a04      	ldr	r2, [sp, #16]
 80005fe:	68a1      	ldr	r1, [r4, #8]
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	f000 f9bb 	bl	800097c <_vfiprintf_r>
 8000606:	b002      	add	sp, #8
 8000608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr
 8000610:	20000000 	.word	0x20000000

08000614 <std>:
 8000614:	2300      	movs	r3, #0
 8000616:	b510      	push	{r4, lr}
 8000618:	4604      	mov	r4, r0
 800061a:	e9c0 3300 	strd	r3, r3, [r0]
 800061e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000622:	6083      	str	r3, [r0, #8]
 8000624:	8181      	strh	r1, [r0, #12]
 8000626:	6643      	str	r3, [r0, #100]	; 0x64
 8000628:	81c2      	strh	r2, [r0, #14]
 800062a:	6183      	str	r3, [r0, #24]
 800062c:	4619      	mov	r1, r3
 800062e:	2208      	movs	r2, #8
 8000630:	305c      	adds	r0, #92	; 0x5c
 8000632:	f7ff ffcf 	bl	80005d4 <memset>
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <std+0x38>)
 8000638:	6224      	str	r4, [r4, #32]
 800063a:	6263      	str	r3, [r4, #36]	; 0x24
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <std+0x3c>)
 800063e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <std+0x40>)
 8000642:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <std+0x44>)
 8000646:	6323      	str	r3, [r4, #48]	; 0x30
 8000648:	bd10      	pop	{r4, pc}
 800064a:	bf00      	nop
 800064c:	08000f29 	.word	0x08000f29
 8000650:	08000f4b 	.word	0x08000f4b
 8000654:	08000f83 	.word	0x08000f83
 8000658:	08000fa7 	.word	0x08000fa7

0800065c <_cleanup_r>:
 800065c:	4901      	ldr	r1, [pc, #4]	; (8000664 <_cleanup_r+0x8>)
 800065e:	f000 b8af 	b.w	80007c0 <_fwalk_reent>
 8000662:	bf00      	nop
 8000664:	08001279 	.word	0x08001279

08000668 <__sfmoreglue>:
 8000668:	2268      	movs	r2, #104	; 0x68
 800066a:	b570      	push	{r4, r5, r6, lr}
 800066c:	1e4d      	subs	r5, r1, #1
 800066e:	4355      	muls	r5, r2
 8000670:	460e      	mov	r6, r1
 8000672:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000676:	f000 f8e5 	bl	8000844 <_malloc_r>
 800067a:	4604      	mov	r4, r0
 800067c:	b140      	cbz	r0, 8000690 <__sfmoreglue+0x28>
 800067e:	2100      	movs	r1, #0
 8000680:	e9c0 1600 	strd	r1, r6, [r0]
 8000684:	300c      	adds	r0, #12
 8000686:	60a0      	str	r0, [r4, #8]
 8000688:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800068c:	f7ff ffa2 	bl	80005d4 <memset>
 8000690:	4620      	mov	r0, r4
 8000692:	bd70      	pop	{r4, r5, r6, pc}

08000694 <__sfp_lock_acquire>:
 8000694:	4801      	ldr	r0, [pc, #4]	; (800069c <__sfp_lock_acquire+0x8>)
 8000696:	f000 b8b3 	b.w	8000800 <__retarget_lock_acquire_recursive>
 800069a:	bf00      	nop
 800069c:	20000085 	.word	0x20000085

080006a0 <__sfp_lock_release>:
 80006a0:	4801      	ldr	r0, [pc, #4]	; (80006a8 <__sfp_lock_release+0x8>)
 80006a2:	f000 b8ae 	b.w	8000802 <__retarget_lock_release_recursive>
 80006a6:	bf00      	nop
 80006a8:	20000085 	.word	0x20000085

080006ac <__sinit_lock_acquire>:
 80006ac:	4801      	ldr	r0, [pc, #4]	; (80006b4 <__sinit_lock_acquire+0x8>)
 80006ae:	f000 b8a7 	b.w	8000800 <__retarget_lock_acquire_recursive>
 80006b2:	bf00      	nop
 80006b4:	20000086 	.word	0x20000086

080006b8 <__sinit_lock_release>:
 80006b8:	4801      	ldr	r0, [pc, #4]	; (80006c0 <__sinit_lock_release+0x8>)
 80006ba:	f000 b8a2 	b.w	8000802 <__retarget_lock_release_recursive>
 80006be:	bf00      	nop
 80006c0:	20000086 	.word	0x20000086

080006c4 <__sinit>:
 80006c4:	b510      	push	{r4, lr}
 80006c6:	4604      	mov	r4, r0
 80006c8:	f7ff fff0 	bl	80006ac <__sinit_lock_acquire>
 80006cc:	69a3      	ldr	r3, [r4, #24]
 80006ce:	b11b      	cbz	r3, 80006d8 <__sinit+0x14>
 80006d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d4:	f7ff bff0 	b.w	80006b8 <__sinit_lock_release>
 80006d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80006dc:	6523      	str	r3, [r4, #80]	; 0x50
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <__sinit+0x68>)
 80006e0:	4a13      	ldr	r2, [pc, #76]	; (8000730 <__sinit+0x6c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80006e6:	42a3      	cmp	r3, r4
 80006e8:	bf08      	it	eq
 80006ea:	2301      	moveq	r3, #1
 80006ec:	4620      	mov	r0, r4
 80006ee:	bf08      	it	eq
 80006f0:	61a3      	streq	r3, [r4, #24]
 80006f2:	f000 f81f 	bl	8000734 <__sfp>
 80006f6:	6060      	str	r0, [r4, #4]
 80006f8:	4620      	mov	r0, r4
 80006fa:	f000 f81b 	bl	8000734 <__sfp>
 80006fe:	60a0      	str	r0, [r4, #8]
 8000700:	4620      	mov	r0, r4
 8000702:	f000 f817 	bl	8000734 <__sfp>
 8000706:	2200      	movs	r2, #0
 8000708:	2104      	movs	r1, #4
 800070a:	60e0      	str	r0, [r4, #12]
 800070c:	6860      	ldr	r0, [r4, #4]
 800070e:	f7ff ff81 	bl	8000614 <std>
 8000712:	2201      	movs	r2, #1
 8000714:	2109      	movs	r1, #9
 8000716:	68a0      	ldr	r0, [r4, #8]
 8000718:	f7ff ff7c 	bl	8000614 <std>
 800071c:	2202      	movs	r2, #2
 800071e:	2112      	movs	r1, #18
 8000720:	68e0      	ldr	r0, [r4, #12]
 8000722:	f7ff ff77 	bl	8000614 <std>
 8000726:	2301      	movs	r3, #1
 8000728:	61a3      	str	r3, [r4, #24]
 800072a:	e7d1      	b.n	80006d0 <__sinit+0xc>
 800072c:	08001538 	.word	0x08001538
 8000730:	0800065d 	.word	0x0800065d

08000734 <__sfp>:
 8000734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000736:	4607      	mov	r7, r0
 8000738:	f7ff ffac 	bl	8000694 <__sfp_lock_acquire>
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <__sfp+0x84>)
 800073e:	681e      	ldr	r6, [r3, #0]
 8000740:	69b3      	ldr	r3, [r6, #24]
 8000742:	b913      	cbnz	r3, 800074a <__sfp+0x16>
 8000744:	4630      	mov	r0, r6
 8000746:	f7ff ffbd 	bl	80006c4 <__sinit>
 800074a:	3648      	adds	r6, #72	; 0x48
 800074c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000750:	3b01      	subs	r3, #1
 8000752:	d503      	bpl.n	800075c <__sfp+0x28>
 8000754:	6833      	ldr	r3, [r6, #0]
 8000756:	b30b      	cbz	r3, 800079c <__sfp+0x68>
 8000758:	6836      	ldr	r6, [r6, #0]
 800075a:	e7f7      	b.n	800074c <__sfp+0x18>
 800075c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000760:	b9d5      	cbnz	r5, 8000798 <__sfp+0x64>
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <__sfp+0x88>)
 8000764:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000768:	60e3      	str	r3, [r4, #12]
 800076a:	6665      	str	r5, [r4, #100]	; 0x64
 800076c:	f000 f847 	bl	80007fe <__retarget_lock_init_recursive>
 8000770:	f7ff ff96 	bl	80006a0 <__sfp_lock_release>
 8000774:	2208      	movs	r2, #8
 8000776:	4629      	mov	r1, r5
 8000778:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800077c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000780:	6025      	str	r5, [r4, #0]
 8000782:	61a5      	str	r5, [r4, #24]
 8000784:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000788:	f7ff ff24 	bl	80005d4 <memset>
 800078c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000790:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000794:	4620      	mov	r0, r4
 8000796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000798:	3468      	adds	r4, #104	; 0x68
 800079a:	e7d9      	b.n	8000750 <__sfp+0x1c>
 800079c:	2104      	movs	r1, #4
 800079e:	4638      	mov	r0, r7
 80007a0:	f7ff ff62 	bl	8000668 <__sfmoreglue>
 80007a4:	4604      	mov	r4, r0
 80007a6:	6030      	str	r0, [r6, #0]
 80007a8:	2800      	cmp	r0, #0
 80007aa:	d1d5      	bne.n	8000758 <__sfp+0x24>
 80007ac:	f7ff ff78 	bl	80006a0 <__sfp_lock_release>
 80007b0:	230c      	movs	r3, #12
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	e7ee      	b.n	8000794 <__sfp+0x60>
 80007b6:	bf00      	nop
 80007b8:	08001538 	.word	0x08001538
 80007bc:	ffff0001 	.word	0xffff0001

080007c0 <_fwalk_reent>:
 80007c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007c4:	4606      	mov	r6, r0
 80007c6:	4688      	mov	r8, r1
 80007c8:	2700      	movs	r7, #0
 80007ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80007ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007d2:	f1b9 0901 	subs.w	r9, r9, #1
 80007d6:	d505      	bpl.n	80007e4 <_fwalk_reent+0x24>
 80007d8:	6824      	ldr	r4, [r4, #0]
 80007da:	2c00      	cmp	r4, #0
 80007dc:	d1f7      	bne.n	80007ce <_fwalk_reent+0xe>
 80007de:	4638      	mov	r0, r7
 80007e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007e4:	89ab      	ldrh	r3, [r5, #12]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d907      	bls.n	80007fa <_fwalk_reent+0x3a>
 80007ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007ee:	3301      	adds	r3, #1
 80007f0:	d003      	beq.n	80007fa <_fwalk_reent+0x3a>
 80007f2:	4629      	mov	r1, r5
 80007f4:	4630      	mov	r0, r6
 80007f6:	47c0      	blx	r8
 80007f8:	4307      	orrs	r7, r0
 80007fa:	3568      	adds	r5, #104	; 0x68
 80007fc:	e7e9      	b.n	80007d2 <_fwalk_reent+0x12>

080007fe <__retarget_lock_init_recursive>:
 80007fe:	4770      	bx	lr

08000800 <__retarget_lock_acquire_recursive>:
 8000800:	4770      	bx	lr

08000802 <__retarget_lock_release_recursive>:
 8000802:	4770      	bx	lr

08000804 <sbrk_aligned>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	4e0e      	ldr	r6, [pc, #56]	; (8000840 <sbrk_aligned+0x3c>)
 8000808:	460c      	mov	r4, r1
 800080a:	6831      	ldr	r1, [r6, #0]
 800080c:	4605      	mov	r5, r0
 800080e:	b911      	cbnz	r1, 8000816 <sbrk_aligned+0x12>
 8000810:	f000 fb7a 	bl	8000f08 <_sbrk_r>
 8000814:	6030      	str	r0, [r6, #0]
 8000816:	4621      	mov	r1, r4
 8000818:	4628      	mov	r0, r5
 800081a:	f000 fb75 	bl	8000f08 <_sbrk_r>
 800081e:	1c43      	adds	r3, r0, #1
 8000820:	d00a      	beq.n	8000838 <sbrk_aligned+0x34>
 8000822:	1cc4      	adds	r4, r0, #3
 8000824:	f024 0403 	bic.w	r4, r4, #3
 8000828:	42a0      	cmp	r0, r4
 800082a:	d007      	beq.n	800083c <sbrk_aligned+0x38>
 800082c:	1a21      	subs	r1, r4, r0
 800082e:	4628      	mov	r0, r5
 8000830:	f000 fb6a 	bl	8000f08 <_sbrk_r>
 8000834:	3001      	adds	r0, #1
 8000836:	d101      	bne.n	800083c <sbrk_aligned+0x38>
 8000838:	f04f 34ff 	mov.w	r4, #4294967295
 800083c:	4620      	mov	r0, r4
 800083e:	bd70      	pop	{r4, r5, r6, pc}
 8000840:	2000008c 	.word	0x2000008c

08000844 <_malloc_r>:
 8000844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000848:	1ccd      	adds	r5, r1, #3
 800084a:	f025 0503 	bic.w	r5, r5, #3
 800084e:	3508      	adds	r5, #8
 8000850:	2d0c      	cmp	r5, #12
 8000852:	bf38      	it	cc
 8000854:	250c      	movcc	r5, #12
 8000856:	2d00      	cmp	r5, #0
 8000858:	4607      	mov	r7, r0
 800085a:	db01      	blt.n	8000860 <_malloc_r+0x1c>
 800085c:	42a9      	cmp	r1, r5
 800085e:	d905      	bls.n	800086c <_malloc_r+0x28>
 8000860:	230c      	movs	r3, #12
 8000862:	2600      	movs	r6, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4630      	mov	r0, r6
 8000868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800086c:	4e2e      	ldr	r6, [pc, #184]	; (8000928 <_malloc_r+0xe4>)
 800086e:	f000 fdc5 	bl	80013fc <__malloc_lock>
 8000872:	6833      	ldr	r3, [r6, #0]
 8000874:	461c      	mov	r4, r3
 8000876:	bb34      	cbnz	r4, 80008c6 <_malloc_r+0x82>
 8000878:	4629      	mov	r1, r5
 800087a:	4638      	mov	r0, r7
 800087c:	f7ff ffc2 	bl	8000804 <sbrk_aligned>
 8000880:	1c43      	adds	r3, r0, #1
 8000882:	4604      	mov	r4, r0
 8000884:	d14d      	bne.n	8000922 <_malloc_r+0xde>
 8000886:	6834      	ldr	r4, [r6, #0]
 8000888:	4626      	mov	r6, r4
 800088a:	2e00      	cmp	r6, #0
 800088c:	d140      	bne.n	8000910 <_malloc_r+0xcc>
 800088e:	6823      	ldr	r3, [r4, #0]
 8000890:	4631      	mov	r1, r6
 8000892:	4638      	mov	r0, r7
 8000894:	eb04 0803 	add.w	r8, r4, r3
 8000898:	f000 fb36 	bl	8000f08 <_sbrk_r>
 800089c:	4580      	cmp	r8, r0
 800089e:	d13a      	bne.n	8000916 <_malloc_r+0xd2>
 80008a0:	6821      	ldr	r1, [r4, #0]
 80008a2:	3503      	adds	r5, #3
 80008a4:	1a6d      	subs	r5, r5, r1
 80008a6:	f025 0503 	bic.w	r5, r5, #3
 80008aa:	3508      	adds	r5, #8
 80008ac:	2d0c      	cmp	r5, #12
 80008ae:	bf38      	it	cc
 80008b0:	250c      	movcc	r5, #12
 80008b2:	4638      	mov	r0, r7
 80008b4:	4629      	mov	r1, r5
 80008b6:	f7ff ffa5 	bl	8000804 <sbrk_aligned>
 80008ba:	3001      	adds	r0, #1
 80008bc:	d02b      	beq.n	8000916 <_malloc_r+0xd2>
 80008be:	6823      	ldr	r3, [r4, #0]
 80008c0:	442b      	add	r3, r5
 80008c2:	6023      	str	r3, [r4, #0]
 80008c4:	e00e      	b.n	80008e4 <_malloc_r+0xa0>
 80008c6:	6822      	ldr	r2, [r4, #0]
 80008c8:	1b52      	subs	r2, r2, r5
 80008ca:	d41e      	bmi.n	800090a <_malloc_r+0xc6>
 80008cc:	2a0b      	cmp	r2, #11
 80008ce:	d916      	bls.n	80008fe <_malloc_r+0xba>
 80008d0:	1961      	adds	r1, r4, r5
 80008d2:	42a3      	cmp	r3, r4
 80008d4:	6025      	str	r5, [r4, #0]
 80008d6:	bf18      	it	ne
 80008d8:	6059      	strne	r1, [r3, #4]
 80008da:	6863      	ldr	r3, [r4, #4]
 80008dc:	bf08      	it	eq
 80008de:	6031      	streq	r1, [r6, #0]
 80008e0:	5162      	str	r2, [r4, r5]
 80008e2:	604b      	str	r3, [r1, #4]
 80008e4:	4638      	mov	r0, r7
 80008e6:	f104 060b 	add.w	r6, r4, #11
 80008ea:	f000 fd8d 	bl	8001408 <__malloc_unlock>
 80008ee:	f026 0607 	bic.w	r6, r6, #7
 80008f2:	1d23      	adds	r3, r4, #4
 80008f4:	1af2      	subs	r2, r6, r3
 80008f6:	d0b6      	beq.n	8000866 <_malloc_r+0x22>
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	50a3      	str	r3, [r4, r2]
 80008fc:	e7b3      	b.n	8000866 <_malloc_r+0x22>
 80008fe:	6862      	ldr	r2, [r4, #4]
 8000900:	42a3      	cmp	r3, r4
 8000902:	bf0c      	ite	eq
 8000904:	6032      	streq	r2, [r6, #0]
 8000906:	605a      	strne	r2, [r3, #4]
 8000908:	e7ec      	b.n	80008e4 <_malloc_r+0xa0>
 800090a:	4623      	mov	r3, r4
 800090c:	6864      	ldr	r4, [r4, #4]
 800090e:	e7b2      	b.n	8000876 <_malloc_r+0x32>
 8000910:	4634      	mov	r4, r6
 8000912:	6876      	ldr	r6, [r6, #4]
 8000914:	e7b9      	b.n	800088a <_malloc_r+0x46>
 8000916:	230c      	movs	r3, #12
 8000918:	4638      	mov	r0, r7
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	f000 fd74 	bl	8001408 <__malloc_unlock>
 8000920:	e7a1      	b.n	8000866 <_malloc_r+0x22>
 8000922:	6025      	str	r5, [r4, #0]
 8000924:	e7de      	b.n	80008e4 <_malloc_r+0xa0>
 8000926:	bf00      	nop
 8000928:	20000088 	.word	0x20000088

0800092c <__sfputc_r>:
 800092c:	6893      	ldr	r3, [r2, #8]
 800092e:	b410      	push	{r4}
 8000930:	3b01      	subs	r3, #1
 8000932:	2b00      	cmp	r3, #0
 8000934:	6093      	str	r3, [r2, #8]
 8000936:	da07      	bge.n	8000948 <__sfputc_r+0x1c>
 8000938:	6994      	ldr	r4, [r2, #24]
 800093a:	42a3      	cmp	r3, r4
 800093c:	db01      	blt.n	8000942 <__sfputc_r+0x16>
 800093e:	290a      	cmp	r1, #10
 8000940:	d102      	bne.n	8000948 <__sfputc_r+0x1c>
 8000942:	bc10      	pop	{r4}
 8000944:	f000 bb34 	b.w	8000fb0 <__swbuf_r>
 8000948:	6813      	ldr	r3, [r2, #0]
 800094a:	1c58      	adds	r0, r3, #1
 800094c:	6010      	str	r0, [r2, #0]
 800094e:	7019      	strb	r1, [r3, #0]
 8000950:	4608      	mov	r0, r1
 8000952:	bc10      	pop	{r4}
 8000954:	4770      	bx	lr

08000956 <__sfputs_r>:
 8000956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000958:	4606      	mov	r6, r0
 800095a:	460f      	mov	r7, r1
 800095c:	4614      	mov	r4, r2
 800095e:	18d5      	adds	r5, r2, r3
 8000960:	42ac      	cmp	r4, r5
 8000962:	d101      	bne.n	8000968 <__sfputs_r+0x12>
 8000964:	2000      	movs	r0, #0
 8000966:	e007      	b.n	8000978 <__sfputs_r+0x22>
 8000968:	463a      	mov	r2, r7
 800096a:	4630      	mov	r0, r6
 800096c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000970:	f7ff ffdc 	bl	800092c <__sfputc_r>
 8000974:	1c43      	adds	r3, r0, #1
 8000976:	d1f3      	bne.n	8000960 <__sfputs_r+0xa>
 8000978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800097c <_vfiprintf_r>:
 800097c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000980:	460d      	mov	r5, r1
 8000982:	4614      	mov	r4, r2
 8000984:	4698      	mov	r8, r3
 8000986:	4606      	mov	r6, r0
 8000988:	b09d      	sub	sp, #116	; 0x74
 800098a:	b118      	cbz	r0, 8000994 <_vfiprintf_r+0x18>
 800098c:	6983      	ldr	r3, [r0, #24]
 800098e:	b90b      	cbnz	r3, 8000994 <_vfiprintf_r+0x18>
 8000990:	f7ff fe98 	bl	80006c4 <__sinit>
 8000994:	4b89      	ldr	r3, [pc, #548]	; (8000bbc <_vfiprintf_r+0x240>)
 8000996:	429d      	cmp	r5, r3
 8000998:	d11b      	bne.n	80009d2 <_vfiprintf_r+0x56>
 800099a:	6875      	ldr	r5, [r6, #4]
 800099c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800099e:	07d9      	lsls	r1, r3, #31
 80009a0:	d405      	bmi.n	80009ae <_vfiprintf_r+0x32>
 80009a2:	89ab      	ldrh	r3, [r5, #12]
 80009a4:	059a      	lsls	r2, r3, #22
 80009a6:	d402      	bmi.n	80009ae <_vfiprintf_r+0x32>
 80009a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80009aa:	f7ff ff29 	bl	8000800 <__retarget_lock_acquire_recursive>
 80009ae:	89ab      	ldrh	r3, [r5, #12]
 80009b0:	071b      	lsls	r3, r3, #28
 80009b2:	d501      	bpl.n	80009b8 <_vfiprintf_r+0x3c>
 80009b4:	692b      	ldr	r3, [r5, #16]
 80009b6:	b9eb      	cbnz	r3, 80009f4 <_vfiprintf_r+0x78>
 80009b8:	4629      	mov	r1, r5
 80009ba:	4630      	mov	r0, r6
 80009bc:	f000 fb5c 	bl	8001078 <__swsetup_r>
 80009c0:	b1c0      	cbz	r0, 80009f4 <_vfiprintf_r+0x78>
 80009c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80009c4:	07dc      	lsls	r4, r3, #31
 80009c6:	d50e      	bpl.n	80009e6 <_vfiprintf_r+0x6a>
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	b01d      	add	sp, #116	; 0x74
 80009ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009d2:	4b7b      	ldr	r3, [pc, #492]	; (8000bc0 <_vfiprintf_r+0x244>)
 80009d4:	429d      	cmp	r5, r3
 80009d6:	d101      	bne.n	80009dc <_vfiprintf_r+0x60>
 80009d8:	68b5      	ldr	r5, [r6, #8]
 80009da:	e7df      	b.n	800099c <_vfiprintf_r+0x20>
 80009dc:	4b79      	ldr	r3, [pc, #484]	; (8000bc4 <_vfiprintf_r+0x248>)
 80009de:	429d      	cmp	r5, r3
 80009e0:	bf08      	it	eq
 80009e2:	68f5      	ldreq	r5, [r6, #12]
 80009e4:	e7da      	b.n	800099c <_vfiprintf_r+0x20>
 80009e6:	89ab      	ldrh	r3, [r5, #12]
 80009e8:	0598      	lsls	r0, r3, #22
 80009ea:	d4ed      	bmi.n	80009c8 <_vfiprintf_r+0x4c>
 80009ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80009ee:	f7ff ff08 	bl	8000802 <__retarget_lock_release_recursive>
 80009f2:	e7e9      	b.n	80009c8 <_vfiprintf_r+0x4c>
 80009f4:	2300      	movs	r3, #0
 80009f6:	9309      	str	r3, [sp, #36]	; 0x24
 80009f8:	2320      	movs	r3, #32
 80009fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80009fe:	2330      	movs	r3, #48	; 0x30
 8000a00:	f04f 0901 	mov.w	r9, #1
 8000a04:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a08:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000bc8 <_vfiprintf_r+0x24c>
 8000a0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a10:	4623      	mov	r3, r4
 8000a12:	469a      	mov	sl, r3
 8000a14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a18:	b10a      	cbz	r2, 8000a1e <_vfiprintf_r+0xa2>
 8000a1a:	2a25      	cmp	r2, #37	; 0x25
 8000a1c:	d1f9      	bne.n	8000a12 <_vfiprintf_r+0x96>
 8000a1e:	ebba 0b04 	subs.w	fp, sl, r4
 8000a22:	d00b      	beq.n	8000a3c <_vfiprintf_r+0xc0>
 8000a24:	465b      	mov	r3, fp
 8000a26:	4622      	mov	r2, r4
 8000a28:	4629      	mov	r1, r5
 8000a2a:	4630      	mov	r0, r6
 8000a2c:	f7ff ff93 	bl	8000956 <__sfputs_r>
 8000a30:	3001      	adds	r0, #1
 8000a32:	f000 80aa 	beq.w	8000b8a <_vfiprintf_r+0x20e>
 8000a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a38:	445a      	add	r2, fp
 8000a3a:	9209      	str	r2, [sp, #36]	; 0x24
 8000a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	f000 80a2 	beq.w	8000b8a <_vfiprintf_r+0x20e>
 8000a46:	2300      	movs	r3, #0
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a50:	f10a 0a01 	add.w	sl, sl, #1
 8000a54:	9304      	str	r3, [sp, #16]
 8000a56:	9307      	str	r3, [sp, #28]
 8000a58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000a5c:	931a      	str	r3, [sp, #104]	; 0x68
 8000a5e:	4654      	mov	r4, sl
 8000a60:	2205      	movs	r2, #5
 8000a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a66:	4858      	ldr	r0, [pc, #352]	; (8000bc8 <_vfiprintf_r+0x24c>)
 8000a68:	f000 fcba 	bl	80013e0 <memchr>
 8000a6c:	9a04      	ldr	r2, [sp, #16]
 8000a6e:	b9d8      	cbnz	r0, 8000aa8 <_vfiprintf_r+0x12c>
 8000a70:	06d1      	lsls	r1, r2, #27
 8000a72:	bf44      	itt	mi
 8000a74:	2320      	movmi	r3, #32
 8000a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a7a:	0713      	lsls	r3, r2, #28
 8000a7c:	bf44      	itt	mi
 8000a7e:	232b      	movmi	r3, #43	; 0x2b
 8000a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a84:	f89a 3000 	ldrb.w	r3, [sl]
 8000a88:	2b2a      	cmp	r3, #42	; 0x2a
 8000a8a:	d015      	beq.n	8000ab8 <_vfiprintf_r+0x13c>
 8000a8c:	4654      	mov	r4, sl
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f04f 0c0a 	mov.w	ip, #10
 8000a94:	9a07      	ldr	r2, [sp, #28]
 8000a96:	4621      	mov	r1, r4
 8000a98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a9c:	3b30      	subs	r3, #48	; 0x30
 8000a9e:	2b09      	cmp	r3, #9
 8000aa0:	d94e      	bls.n	8000b40 <_vfiprintf_r+0x1c4>
 8000aa2:	b1b0      	cbz	r0, 8000ad2 <_vfiprintf_r+0x156>
 8000aa4:	9207      	str	r2, [sp, #28]
 8000aa6:	e014      	b.n	8000ad2 <_vfiprintf_r+0x156>
 8000aa8:	eba0 0308 	sub.w	r3, r0, r8
 8000aac:	fa09 f303 	lsl.w	r3, r9, r3
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	46a2      	mov	sl, r4
 8000ab4:	9304      	str	r3, [sp, #16]
 8000ab6:	e7d2      	b.n	8000a5e <_vfiprintf_r+0xe2>
 8000ab8:	9b03      	ldr	r3, [sp, #12]
 8000aba:	1d19      	adds	r1, r3, #4
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	9103      	str	r1, [sp, #12]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	bfbb      	ittet	lt
 8000ac4:	425b      	neglt	r3, r3
 8000ac6:	f042 0202 	orrlt.w	r2, r2, #2
 8000aca:	9307      	strge	r3, [sp, #28]
 8000acc:	9307      	strlt	r3, [sp, #28]
 8000ace:	bfb8      	it	lt
 8000ad0:	9204      	strlt	r2, [sp, #16]
 8000ad2:	7823      	ldrb	r3, [r4, #0]
 8000ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ad6:	d10c      	bne.n	8000af2 <_vfiprintf_r+0x176>
 8000ad8:	7863      	ldrb	r3, [r4, #1]
 8000ada:	2b2a      	cmp	r3, #42	; 0x2a
 8000adc:	d135      	bne.n	8000b4a <_vfiprintf_r+0x1ce>
 8000ade:	9b03      	ldr	r3, [sp, #12]
 8000ae0:	3402      	adds	r4, #2
 8000ae2:	1d1a      	adds	r2, r3, #4
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	9203      	str	r2, [sp, #12]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	bfb8      	it	lt
 8000aec:	f04f 33ff 	movlt.w	r3, #4294967295
 8000af0:	9305      	str	r3, [sp, #20]
 8000af2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8000bcc <_vfiprintf_r+0x250>
 8000af6:	2203      	movs	r2, #3
 8000af8:	4650      	mov	r0, sl
 8000afa:	7821      	ldrb	r1, [r4, #0]
 8000afc:	f000 fc70 	bl	80013e0 <memchr>
 8000b00:	b140      	cbz	r0, 8000b14 <_vfiprintf_r+0x198>
 8000b02:	2340      	movs	r3, #64	; 0x40
 8000b04:	eba0 000a 	sub.w	r0, r0, sl
 8000b08:	fa03 f000 	lsl.w	r0, r3, r0
 8000b0c:	9b04      	ldr	r3, [sp, #16]
 8000b0e:	3401      	adds	r4, #1
 8000b10:	4303      	orrs	r3, r0
 8000b12:	9304      	str	r3, [sp, #16]
 8000b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b18:	2206      	movs	r2, #6
 8000b1a:	482d      	ldr	r0, [pc, #180]	; (8000bd0 <_vfiprintf_r+0x254>)
 8000b1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b20:	f000 fc5e 	bl	80013e0 <memchr>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d03f      	beq.n	8000ba8 <_vfiprintf_r+0x22c>
 8000b28:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <_vfiprintf_r+0x258>)
 8000b2a:	bb1b      	cbnz	r3, 8000b74 <_vfiprintf_r+0x1f8>
 8000b2c:	9b03      	ldr	r3, [sp, #12]
 8000b2e:	3307      	adds	r3, #7
 8000b30:	f023 0307 	bic.w	r3, r3, #7
 8000b34:	3308      	adds	r3, #8
 8000b36:	9303      	str	r3, [sp, #12]
 8000b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b3a:	443b      	add	r3, r7
 8000b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8000b3e:	e767      	b.n	8000a10 <_vfiprintf_r+0x94>
 8000b40:	460c      	mov	r4, r1
 8000b42:	2001      	movs	r0, #1
 8000b44:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b48:	e7a5      	b.n	8000a96 <_vfiprintf_r+0x11a>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f04f 0c0a 	mov.w	ip, #10
 8000b50:	4619      	mov	r1, r3
 8000b52:	3401      	adds	r4, #1
 8000b54:	9305      	str	r3, [sp, #20]
 8000b56:	4620      	mov	r0, r4
 8000b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b5c:	3a30      	subs	r2, #48	; 0x30
 8000b5e:	2a09      	cmp	r2, #9
 8000b60:	d903      	bls.n	8000b6a <_vfiprintf_r+0x1ee>
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0c5      	beq.n	8000af2 <_vfiprintf_r+0x176>
 8000b66:	9105      	str	r1, [sp, #20]
 8000b68:	e7c3      	b.n	8000af2 <_vfiprintf_r+0x176>
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b72:	e7f0      	b.n	8000b56 <_vfiprintf_r+0x1da>
 8000b74:	ab03      	add	r3, sp, #12
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	462a      	mov	r2, r5
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <_vfiprintf_r+0x25c>)
 8000b7e:	a904      	add	r1, sp, #16
 8000b80:	f3af 8000 	nop.w
 8000b84:	4607      	mov	r7, r0
 8000b86:	1c78      	adds	r0, r7, #1
 8000b88:	d1d6      	bne.n	8000b38 <_vfiprintf_r+0x1bc>
 8000b8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b8c:	07d9      	lsls	r1, r3, #31
 8000b8e:	d405      	bmi.n	8000b9c <_vfiprintf_r+0x220>
 8000b90:	89ab      	ldrh	r3, [r5, #12]
 8000b92:	059a      	lsls	r2, r3, #22
 8000b94:	d402      	bmi.n	8000b9c <_vfiprintf_r+0x220>
 8000b96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b98:	f7ff fe33 	bl	8000802 <__retarget_lock_release_recursive>
 8000b9c:	89ab      	ldrh	r3, [r5, #12]
 8000b9e:	065b      	lsls	r3, r3, #25
 8000ba0:	f53f af12 	bmi.w	80009c8 <_vfiprintf_r+0x4c>
 8000ba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ba6:	e711      	b.n	80009cc <_vfiprintf_r+0x50>
 8000ba8:	ab03      	add	r3, sp, #12
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	462a      	mov	r2, r5
 8000bae:	4630      	mov	r0, r6
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <_vfiprintf_r+0x25c>)
 8000bb2:	a904      	add	r1, sp, #16
 8000bb4:	f000 f882 	bl	8000cbc <_printf_i>
 8000bb8:	e7e4      	b.n	8000b84 <_vfiprintf_r+0x208>
 8000bba:	bf00      	nop
 8000bbc:	0800155c 	.word	0x0800155c
 8000bc0:	0800157c 	.word	0x0800157c
 8000bc4:	0800153c 	.word	0x0800153c
 8000bc8:	0800159c 	.word	0x0800159c
 8000bcc:	080015a2 	.word	0x080015a2
 8000bd0:	080015a6 	.word	0x080015a6
 8000bd4:	00000000 	.word	0x00000000
 8000bd8:	08000957 	.word	0x08000957

08000bdc <_printf_common>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	4616      	mov	r6, r2
 8000be2:	4699      	mov	r9, r3
 8000be4:	688a      	ldr	r2, [r1, #8]
 8000be6:	690b      	ldr	r3, [r1, #16]
 8000be8:	4607      	mov	r7, r0
 8000bea:	4293      	cmp	r3, r2
 8000bec:	bfb8      	it	lt
 8000bee:	4613      	movlt	r3, r2
 8000bf0:	6033      	str	r3, [r6, #0]
 8000bf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000bf6:	460c      	mov	r4, r1
 8000bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000bfc:	b10a      	cbz	r2, 8000c02 <_printf_common+0x26>
 8000bfe:	3301      	adds	r3, #1
 8000c00:	6033      	str	r3, [r6, #0]
 8000c02:	6823      	ldr	r3, [r4, #0]
 8000c04:	0699      	lsls	r1, r3, #26
 8000c06:	bf42      	ittt	mi
 8000c08:	6833      	ldrmi	r3, [r6, #0]
 8000c0a:	3302      	addmi	r3, #2
 8000c0c:	6033      	strmi	r3, [r6, #0]
 8000c0e:	6825      	ldr	r5, [r4, #0]
 8000c10:	f015 0506 	ands.w	r5, r5, #6
 8000c14:	d106      	bne.n	8000c24 <_printf_common+0x48>
 8000c16:	f104 0a19 	add.w	sl, r4, #25
 8000c1a:	68e3      	ldr	r3, [r4, #12]
 8000c1c:	6832      	ldr	r2, [r6, #0]
 8000c1e:	1a9b      	subs	r3, r3, r2
 8000c20:	42ab      	cmp	r3, r5
 8000c22:	dc28      	bgt.n	8000c76 <_printf_common+0x9a>
 8000c24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c28:	1e13      	subs	r3, r2, #0
 8000c2a:	6822      	ldr	r2, [r4, #0]
 8000c2c:	bf18      	it	ne
 8000c2e:	2301      	movne	r3, #1
 8000c30:	0692      	lsls	r2, r2, #26
 8000c32:	d42d      	bmi.n	8000c90 <_printf_common+0xb4>
 8000c34:	4649      	mov	r1, r9
 8000c36:	4638      	mov	r0, r7
 8000c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c3c:	47c0      	blx	r8
 8000c3e:	3001      	adds	r0, #1
 8000c40:	d020      	beq.n	8000c84 <_printf_common+0xa8>
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	68e5      	ldr	r5, [r4, #12]
 8000c46:	f003 0306 	and.w	r3, r3, #6
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf18      	it	ne
 8000c4e:	2500      	movne	r5, #0
 8000c50:	6832      	ldr	r2, [r6, #0]
 8000c52:	f04f 0600 	mov.w	r6, #0
 8000c56:	68a3      	ldr	r3, [r4, #8]
 8000c58:	bf08      	it	eq
 8000c5a:	1aad      	subeq	r5, r5, r2
 8000c5c:	6922      	ldr	r2, [r4, #16]
 8000c5e:	bf08      	it	eq
 8000c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c64:	4293      	cmp	r3, r2
 8000c66:	bfc4      	itt	gt
 8000c68:	1a9b      	subgt	r3, r3, r2
 8000c6a:	18ed      	addgt	r5, r5, r3
 8000c6c:	341a      	adds	r4, #26
 8000c6e:	42b5      	cmp	r5, r6
 8000c70:	d11a      	bne.n	8000ca8 <_printf_common+0xcc>
 8000c72:	2000      	movs	r0, #0
 8000c74:	e008      	b.n	8000c88 <_printf_common+0xac>
 8000c76:	2301      	movs	r3, #1
 8000c78:	4652      	mov	r2, sl
 8000c7a:	4649      	mov	r1, r9
 8000c7c:	4638      	mov	r0, r7
 8000c7e:	47c0      	blx	r8
 8000c80:	3001      	adds	r0, #1
 8000c82:	d103      	bne.n	8000c8c <_printf_common+0xb0>
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	3501      	adds	r5, #1
 8000c8e:	e7c4      	b.n	8000c1a <_printf_common+0x3e>
 8000c90:	2030      	movs	r0, #48	; 0x30
 8000c92:	18e1      	adds	r1, r4, r3
 8000c94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000c98:	1c5a      	adds	r2, r3, #1
 8000c9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000c9e:	4422      	add	r2, r4
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ca6:	e7c5      	b.n	8000c34 <_printf_common+0x58>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	4622      	mov	r2, r4
 8000cac:	4649      	mov	r1, r9
 8000cae:	4638      	mov	r0, r7
 8000cb0:	47c0      	blx	r8
 8000cb2:	3001      	adds	r0, #1
 8000cb4:	d0e6      	beq.n	8000c84 <_printf_common+0xa8>
 8000cb6:	3601      	adds	r6, #1
 8000cb8:	e7d9      	b.n	8000c6e <_printf_common+0x92>
	...

08000cbc <_printf_i>:
 8000cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	7e0f      	ldrb	r7, [r1, #24]
 8000cc2:	4691      	mov	r9, r2
 8000cc4:	2f78      	cmp	r7, #120	; 0x78
 8000cc6:	4680      	mov	r8, r0
 8000cc8:	460c      	mov	r4, r1
 8000cca:	469a      	mov	sl, r3
 8000ccc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000cce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000cd2:	d807      	bhi.n	8000ce4 <_printf_i+0x28>
 8000cd4:	2f62      	cmp	r7, #98	; 0x62
 8000cd6:	d80a      	bhi.n	8000cee <_printf_i+0x32>
 8000cd8:	2f00      	cmp	r7, #0
 8000cda:	f000 80d9 	beq.w	8000e90 <_printf_i+0x1d4>
 8000cde:	2f58      	cmp	r7, #88	; 0x58
 8000ce0:	f000 80a4 	beq.w	8000e2c <_printf_i+0x170>
 8000ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000cec:	e03a      	b.n	8000d64 <_printf_i+0xa8>
 8000cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000cf2:	2b15      	cmp	r3, #21
 8000cf4:	d8f6      	bhi.n	8000ce4 <_printf_i+0x28>
 8000cf6:	a101      	add	r1, pc, #4	; (adr r1, 8000cfc <_printf_i+0x40>)
 8000cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000cfc:	08000d55 	.word	0x08000d55
 8000d00:	08000d69 	.word	0x08000d69
 8000d04:	08000ce5 	.word	0x08000ce5
 8000d08:	08000ce5 	.word	0x08000ce5
 8000d0c:	08000ce5 	.word	0x08000ce5
 8000d10:	08000ce5 	.word	0x08000ce5
 8000d14:	08000d69 	.word	0x08000d69
 8000d18:	08000ce5 	.word	0x08000ce5
 8000d1c:	08000ce5 	.word	0x08000ce5
 8000d20:	08000ce5 	.word	0x08000ce5
 8000d24:	08000ce5 	.word	0x08000ce5
 8000d28:	08000e77 	.word	0x08000e77
 8000d2c:	08000d99 	.word	0x08000d99
 8000d30:	08000e59 	.word	0x08000e59
 8000d34:	08000ce5 	.word	0x08000ce5
 8000d38:	08000ce5 	.word	0x08000ce5
 8000d3c:	08000e99 	.word	0x08000e99
 8000d40:	08000ce5 	.word	0x08000ce5
 8000d44:	08000d99 	.word	0x08000d99
 8000d48:	08000ce5 	.word	0x08000ce5
 8000d4c:	08000ce5 	.word	0x08000ce5
 8000d50:	08000e61 	.word	0x08000e61
 8000d54:	682b      	ldr	r3, [r5, #0]
 8000d56:	1d1a      	adds	r2, r3, #4
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	602a      	str	r2, [r5, #0]
 8000d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000d64:	2301      	movs	r3, #1
 8000d66:	e0a4      	b.n	8000eb2 <_printf_i+0x1f6>
 8000d68:	6820      	ldr	r0, [r4, #0]
 8000d6a:	6829      	ldr	r1, [r5, #0]
 8000d6c:	0606      	lsls	r6, r0, #24
 8000d6e:	f101 0304 	add.w	r3, r1, #4
 8000d72:	d50a      	bpl.n	8000d8a <_printf_i+0xce>
 8000d74:	680e      	ldr	r6, [r1, #0]
 8000d76:	602b      	str	r3, [r5, #0]
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	da03      	bge.n	8000d84 <_printf_i+0xc8>
 8000d7c:	232d      	movs	r3, #45	; 0x2d
 8000d7e:	4276      	negs	r6, r6
 8000d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d84:	230a      	movs	r3, #10
 8000d86:	485e      	ldr	r0, [pc, #376]	; (8000f00 <_printf_i+0x244>)
 8000d88:	e019      	b.n	8000dbe <_printf_i+0x102>
 8000d8a:	680e      	ldr	r6, [r1, #0]
 8000d8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000d90:	602b      	str	r3, [r5, #0]
 8000d92:	bf18      	it	ne
 8000d94:	b236      	sxthne	r6, r6
 8000d96:	e7ef      	b.n	8000d78 <_printf_i+0xbc>
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	6820      	ldr	r0, [r4, #0]
 8000d9c:	1d19      	adds	r1, r3, #4
 8000d9e:	6029      	str	r1, [r5, #0]
 8000da0:	0601      	lsls	r1, r0, #24
 8000da2:	d501      	bpl.n	8000da8 <_printf_i+0xec>
 8000da4:	681e      	ldr	r6, [r3, #0]
 8000da6:	e002      	b.n	8000dae <_printf_i+0xf2>
 8000da8:	0646      	lsls	r6, r0, #25
 8000daa:	d5fb      	bpl.n	8000da4 <_printf_i+0xe8>
 8000dac:	881e      	ldrh	r6, [r3, #0]
 8000dae:	2f6f      	cmp	r7, #111	; 0x6f
 8000db0:	bf0c      	ite	eq
 8000db2:	2308      	moveq	r3, #8
 8000db4:	230a      	movne	r3, #10
 8000db6:	4852      	ldr	r0, [pc, #328]	; (8000f00 <_printf_i+0x244>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000dbe:	6865      	ldr	r5, [r4, #4]
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	bfa8      	it	ge
 8000dc4:	6821      	ldrge	r1, [r4, #0]
 8000dc6:	60a5      	str	r5, [r4, #8]
 8000dc8:	bfa4      	itt	ge
 8000dca:	f021 0104 	bicge.w	r1, r1, #4
 8000dce:	6021      	strge	r1, [r4, #0]
 8000dd0:	b90e      	cbnz	r6, 8000dd6 <_printf_i+0x11a>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d04d      	beq.n	8000e72 <_printf_i+0x1b6>
 8000dd6:	4615      	mov	r5, r2
 8000dd8:	fbb6 f1f3 	udiv	r1, r6, r3
 8000ddc:	fb03 6711 	mls	r7, r3, r1, r6
 8000de0:	5dc7      	ldrb	r7, [r0, r7]
 8000de2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000de6:	4637      	mov	r7, r6
 8000de8:	42bb      	cmp	r3, r7
 8000dea:	460e      	mov	r6, r1
 8000dec:	d9f4      	bls.n	8000dd8 <_printf_i+0x11c>
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d10b      	bne.n	8000e0a <_printf_i+0x14e>
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	07de      	lsls	r6, r3, #31
 8000df6:	d508      	bpl.n	8000e0a <_printf_i+0x14e>
 8000df8:	6923      	ldr	r3, [r4, #16]
 8000dfa:	6861      	ldr	r1, [r4, #4]
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	bfde      	ittt	le
 8000e00:	2330      	movle	r3, #48	; 0x30
 8000e02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000e06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000e0a:	1b52      	subs	r2, r2, r5
 8000e0c:	6122      	str	r2, [r4, #16]
 8000e0e:	464b      	mov	r3, r9
 8000e10:	4621      	mov	r1, r4
 8000e12:	4640      	mov	r0, r8
 8000e14:	f8cd a000 	str.w	sl, [sp]
 8000e18:	aa03      	add	r2, sp, #12
 8000e1a:	f7ff fedf 	bl	8000bdc <_printf_common>
 8000e1e:	3001      	adds	r0, #1
 8000e20:	d14c      	bne.n	8000ebc <_printf_i+0x200>
 8000e22:	f04f 30ff 	mov.w	r0, #4294967295
 8000e26:	b004      	add	sp, #16
 8000e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2c:	4834      	ldr	r0, [pc, #208]	; (8000f00 <_printf_i+0x244>)
 8000e2e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000e32:	6829      	ldr	r1, [r5, #0]
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	f851 6b04 	ldr.w	r6, [r1], #4
 8000e3a:	6029      	str	r1, [r5, #0]
 8000e3c:	061d      	lsls	r5, r3, #24
 8000e3e:	d514      	bpl.n	8000e6a <_printf_i+0x1ae>
 8000e40:	07df      	lsls	r7, r3, #31
 8000e42:	bf44      	itt	mi
 8000e44:	f043 0320 	orrmi.w	r3, r3, #32
 8000e48:	6023      	strmi	r3, [r4, #0]
 8000e4a:	b91e      	cbnz	r6, 8000e54 <_printf_i+0x198>
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	f023 0320 	bic.w	r3, r3, #32
 8000e52:	6023      	str	r3, [r4, #0]
 8000e54:	2310      	movs	r3, #16
 8000e56:	e7af      	b.n	8000db8 <_printf_i+0xfc>
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	f043 0320 	orr.w	r3, r3, #32
 8000e5e:	6023      	str	r3, [r4, #0]
 8000e60:	2378      	movs	r3, #120	; 0x78
 8000e62:	4828      	ldr	r0, [pc, #160]	; (8000f04 <_printf_i+0x248>)
 8000e64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000e68:	e7e3      	b.n	8000e32 <_printf_i+0x176>
 8000e6a:	0659      	lsls	r1, r3, #25
 8000e6c:	bf48      	it	mi
 8000e6e:	b2b6      	uxthmi	r6, r6
 8000e70:	e7e6      	b.n	8000e40 <_printf_i+0x184>
 8000e72:	4615      	mov	r5, r2
 8000e74:	e7bb      	b.n	8000dee <_printf_i+0x132>
 8000e76:	682b      	ldr	r3, [r5, #0]
 8000e78:	6826      	ldr	r6, [r4, #0]
 8000e7a:	1d18      	adds	r0, r3, #4
 8000e7c:	6961      	ldr	r1, [r4, #20]
 8000e7e:	6028      	str	r0, [r5, #0]
 8000e80:	0635      	lsls	r5, r6, #24
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	d501      	bpl.n	8000e8a <_printf_i+0x1ce>
 8000e86:	6019      	str	r1, [r3, #0]
 8000e88:	e002      	b.n	8000e90 <_printf_i+0x1d4>
 8000e8a:	0670      	lsls	r0, r6, #25
 8000e8c:	d5fb      	bpl.n	8000e86 <_printf_i+0x1ca>
 8000e8e:	8019      	strh	r1, [r3, #0]
 8000e90:	2300      	movs	r3, #0
 8000e92:	4615      	mov	r5, r2
 8000e94:	6123      	str	r3, [r4, #16]
 8000e96:	e7ba      	b.n	8000e0e <_printf_i+0x152>
 8000e98:	682b      	ldr	r3, [r5, #0]
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	1d1a      	adds	r2, r3, #4
 8000e9e:	602a      	str	r2, [r5, #0]
 8000ea0:	681d      	ldr	r5, [r3, #0]
 8000ea2:	6862      	ldr	r2, [r4, #4]
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	f000 fa9b 	bl	80013e0 <memchr>
 8000eaa:	b108      	cbz	r0, 8000eb0 <_printf_i+0x1f4>
 8000eac:	1b40      	subs	r0, r0, r5
 8000eae:	6060      	str	r0, [r4, #4]
 8000eb0:	6863      	ldr	r3, [r4, #4]
 8000eb2:	6123      	str	r3, [r4, #16]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000eba:	e7a8      	b.n	8000e0e <_printf_i+0x152>
 8000ebc:	462a      	mov	r2, r5
 8000ebe:	4649      	mov	r1, r9
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	6923      	ldr	r3, [r4, #16]
 8000ec4:	47d0      	blx	sl
 8000ec6:	3001      	adds	r0, #1
 8000ec8:	d0ab      	beq.n	8000e22 <_printf_i+0x166>
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	079b      	lsls	r3, r3, #30
 8000ece:	d413      	bmi.n	8000ef8 <_printf_i+0x23c>
 8000ed0:	68e0      	ldr	r0, [r4, #12]
 8000ed2:	9b03      	ldr	r3, [sp, #12]
 8000ed4:	4298      	cmp	r0, r3
 8000ed6:	bfb8      	it	lt
 8000ed8:	4618      	movlt	r0, r3
 8000eda:	e7a4      	b.n	8000e26 <_printf_i+0x16a>
 8000edc:	2301      	movs	r3, #1
 8000ede:	4632      	mov	r2, r6
 8000ee0:	4649      	mov	r1, r9
 8000ee2:	4640      	mov	r0, r8
 8000ee4:	47d0      	blx	sl
 8000ee6:	3001      	adds	r0, #1
 8000ee8:	d09b      	beq.n	8000e22 <_printf_i+0x166>
 8000eea:	3501      	adds	r5, #1
 8000eec:	68e3      	ldr	r3, [r4, #12]
 8000eee:	9903      	ldr	r1, [sp, #12]
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	42ab      	cmp	r3, r5
 8000ef4:	dcf2      	bgt.n	8000edc <_printf_i+0x220>
 8000ef6:	e7eb      	b.n	8000ed0 <_printf_i+0x214>
 8000ef8:	2500      	movs	r5, #0
 8000efa:	f104 0619 	add.w	r6, r4, #25
 8000efe:	e7f5      	b.n	8000eec <_printf_i+0x230>
 8000f00:	080015ad 	.word	0x080015ad
 8000f04:	080015be 	.word	0x080015be

08000f08 <_sbrk_r>:
 8000f08:	b538      	push	{r3, r4, r5, lr}
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	4d05      	ldr	r5, [pc, #20]	; (8000f24 <_sbrk_r+0x1c>)
 8000f0e:	4604      	mov	r4, r0
 8000f10:	4608      	mov	r0, r1
 8000f12:	602b      	str	r3, [r5, #0]
 8000f14:	f7ff fa4c 	bl	80003b0 <_sbrk>
 8000f18:	1c43      	adds	r3, r0, #1
 8000f1a:	d102      	bne.n	8000f22 <_sbrk_r+0x1a>
 8000f1c:	682b      	ldr	r3, [r5, #0]
 8000f1e:	b103      	cbz	r3, 8000f22 <_sbrk_r+0x1a>
 8000f20:	6023      	str	r3, [r4, #0]
 8000f22:	bd38      	pop	{r3, r4, r5, pc}
 8000f24:	20000090 	.word	0x20000090

08000f28 <__sread>:
 8000f28:	b510      	push	{r4, lr}
 8000f2a:	460c      	mov	r4, r1
 8000f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f30:	f000 fab8 	bl	80014a4 <_read_r>
 8000f34:	2800      	cmp	r0, #0
 8000f36:	bfab      	itete	ge
 8000f38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8000f3c:	181b      	addge	r3, r3, r0
 8000f3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f42:	bfac      	ite	ge
 8000f44:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f46:	81a3      	strhlt	r3, [r4, #12]
 8000f48:	bd10      	pop	{r4, pc}

08000f4a <__swrite>:
 8000f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4e:	461f      	mov	r7, r3
 8000f50:	898b      	ldrh	r3, [r1, #12]
 8000f52:	4605      	mov	r5, r0
 8000f54:	05db      	lsls	r3, r3, #23
 8000f56:	460c      	mov	r4, r1
 8000f58:	4616      	mov	r6, r2
 8000f5a:	d505      	bpl.n	8000f68 <__swrite+0x1e>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f64:	f000 f9c4 	bl	80012f0 <_lseek_r>
 8000f68:	89a3      	ldrh	r3, [r4, #12]
 8000f6a:	4632      	mov	r2, r6
 8000f6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f70:	81a3      	strh	r3, [r4, #12]
 8000f72:	4628      	mov	r0, r5
 8000f74:	463b      	mov	r3, r7
 8000f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f7e:	f000 b869 	b.w	8001054 <_write_r>

08000f82 <__sseek>:
 8000f82:	b510      	push	{r4, lr}
 8000f84:	460c      	mov	r4, r1
 8000f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f8a:	f000 f9b1 	bl	80012f0 <_lseek_r>
 8000f8e:	1c43      	adds	r3, r0, #1
 8000f90:	89a3      	ldrh	r3, [r4, #12]
 8000f92:	bf15      	itete	ne
 8000f94:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f9e:	81a3      	strheq	r3, [r4, #12]
 8000fa0:	bf18      	it	ne
 8000fa2:	81a3      	strhne	r3, [r4, #12]
 8000fa4:	bd10      	pop	{r4, pc}

08000fa6 <__sclose>:
 8000fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000faa:	f000 b8d3 	b.w	8001154 <_close_r>
	...

08000fb0 <__swbuf_r>:
 8000fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb2:	460e      	mov	r6, r1
 8000fb4:	4614      	mov	r4, r2
 8000fb6:	4605      	mov	r5, r0
 8000fb8:	b118      	cbz	r0, 8000fc2 <__swbuf_r+0x12>
 8000fba:	6983      	ldr	r3, [r0, #24]
 8000fbc:	b90b      	cbnz	r3, 8000fc2 <__swbuf_r+0x12>
 8000fbe:	f7ff fb81 	bl	80006c4 <__sinit>
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <__swbuf_r+0x98>)
 8000fc4:	429c      	cmp	r4, r3
 8000fc6:	d12b      	bne.n	8001020 <__swbuf_r+0x70>
 8000fc8:	686c      	ldr	r4, [r5, #4]
 8000fca:	69a3      	ldr	r3, [r4, #24]
 8000fcc:	60a3      	str	r3, [r4, #8]
 8000fce:	89a3      	ldrh	r3, [r4, #12]
 8000fd0:	071a      	lsls	r2, r3, #28
 8000fd2:	d52f      	bpl.n	8001034 <__swbuf_r+0x84>
 8000fd4:	6923      	ldr	r3, [r4, #16]
 8000fd6:	b36b      	cbz	r3, 8001034 <__swbuf_r+0x84>
 8000fd8:	6923      	ldr	r3, [r4, #16]
 8000fda:	6820      	ldr	r0, [r4, #0]
 8000fdc:	b2f6      	uxtb	r6, r6
 8000fde:	1ac0      	subs	r0, r0, r3
 8000fe0:	6963      	ldr	r3, [r4, #20]
 8000fe2:	4637      	mov	r7, r6
 8000fe4:	4283      	cmp	r3, r0
 8000fe6:	dc04      	bgt.n	8000ff2 <__swbuf_r+0x42>
 8000fe8:	4621      	mov	r1, r4
 8000fea:	4628      	mov	r0, r5
 8000fec:	f000 f944 	bl	8001278 <_fflush_r>
 8000ff0:	bb30      	cbnz	r0, 8001040 <__swbuf_r+0x90>
 8000ff2:	68a3      	ldr	r3, [r4, #8]
 8000ff4:	3001      	adds	r0, #1
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	60a3      	str	r3, [r4, #8]
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	6022      	str	r2, [r4, #0]
 8001000:	701e      	strb	r6, [r3, #0]
 8001002:	6963      	ldr	r3, [r4, #20]
 8001004:	4283      	cmp	r3, r0
 8001006:	d004      	beq.n	8001012 <__swbuf_r+0x62>
 8001008:	89a3      	ldrh	r3, [r4, #12]
 800100a:	07db      	lsls	r3, r3, #31
 800100c:	d506      	bpl.n	800101c <__swbuf_r+0x6c>
 800100e:	2e0a      	cmp	r6, #10
 8001010:	d104      	bne.n	800101c <__swbuf_r+0x6c>
 8001012:	4621      	mov	r1, r4
 8001014:	4628      	mov	r0, r5
 8001016:	f000 f92f 	bl	8001278 <_fflush_r>
 800101a:	b988      	cbnz	r0, 8001040 <__swbuf_r+0x90>
 800101c:	4638      	mov	r0, r7
 800101e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <__swbuf_r+0x9c>)
 8001022:	429c      	cmp	r4, r3
 8001024:	d101      	bne.n	800102a <__swbuf_r+0x7a>
 8001026:	68ac      	ldr	r4, [r5, #8]
 8001028:	e7cf      	b.n	8000fca <__swbuf_r+0x1a>
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <__swbuf_r+0xa0>)
 800102c:	429c      	cmp	r4, r3
 800102e:	bf08      	it	eq
 8001030:	68ec      	ldreq	r4, [r5, #12]
 8001032:	e7ca      	b.n	8000fca <__swbuf_r+0x1a>
 8001034:	4621      	mov	r1, r4
 8001036:	4628      	mov	r0, r5
 8001038:	f000 f81e 	bl	8001078 <__swsetup_r>
 800103c:	2800      	cmp	r0, #0
 800103e:	d0cb      	beq.n	8000fd8 <__swbuf_r+0x28>
 8001040:	f04f 37ff 	mov.w	r7, #4294967295
 8001044:	e7ea      	b.n	800101c <__swbuf_r+0x6c>
 8001046:	bf00      	nop
 8001048:	0800155c 	.word	0x0800155c
 800104c:	0800157c 	.word	0x0800157c
 8001050:	0800153c 	.word	0x0800153c

08001054 <_write_r>:
 8001054:	b538      	push	{r3, r4, r5, lr}
 8001056:	4604      	mov	r4, r0
 8001058:	4608      	mov	r0, r1
 800105a:	4611      	mov	r1, r2
 800105c:	2200      	movs	r2, #0
 800105e:	4d05      	ldr	r5, [pc, #20]	; (8001074 <_write_r+0x20>)
 8001060:	602a      	str	r2, [r5, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	f7ff f957 	bl	8000316 <_write>
 8001068:	1c43      	adds	r3, r0, #1
 800106a:	d102      	bne.n	8001072 <_write_r+0x1e>
 800106c:	682b      	ldr	r3, [r5, #0]
 800106e:	b103      	cbz	r3, 8001072 <_write_r+0x1e>
 8001070:	6023      	str	r3, [r4, #0]
 8001072:	bd38      	pop	{r3, r4, r5, pc}
 8001074:	20000090 	.word	0x20000090

08001078 <__swsetup_r>:
 8001078:	4b32      	ldr	r3, [pc, #200]	; (8001144 <__swsetup_r+0xcc>)
 800107a:	b570      	push	{r4, r5, r6, lr}
 800107c:	681d      	ldr	r5, [r3, #0]
 800107e:	4606      	mov	r6, r0
 8001080:	460c      	mov	r4, r1
 8001082:	b125      	cbz	r5, 800108e <__swsetup_r+0x16>
 8001084:	69ab      	ldr	r3, [r5, #24]
 8001086:	b913      	cbnz	r3, 800108e <__swsetup_r+0x16>
 8001088:	4628      	mov	r0, r5
 800108a:	f7ff fb1b 	bl	80006c4 <__sinit>
 800108e:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <__swsetup_r+0xd0>)
 8001090:	429c      	cmp	r4, r3
 8001092:	d10f      	bne.n	80010b4 <__swsetup_r+0x3c>
 8001094:	686c      	ldr	r4, [r5, #4]
 8001096:	89a3      	ldrh	r3, [r4, #12]
 8001098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800109c:	0719      	lsls	r1, r3, #28
 800109e:	d42c      	bmi.n	80010fa <__swsetup_r+0x82>
 80010a0:	06dd      	lsls	r5, r3, #27
 80010a2:	d411      	bmi.n	80010c8 <__swsetup_r+0x50>
 80010a4:	2309      	movs	r3, #9
 80010a6:	6033      	str	r3, [r6, #0]
 80010a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	81a3      	strh	r3, [r4, #12]
 80010b2:	e03e      	b.n	8001132 <__swsetup_r+0xba>
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <__swsetup_r+0xd4>)
 80010b6:	429c      	cmp	r4, r3
 80010b8:	d101      	bne.n	80010be <__swsetup_r+0x46>
 80010ba:	68ac      	ldr	r4, [r5, #8]
 80010bc:	e7eb      	b.n	8001096 <__swsetup_r+0x1e>
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <__swsetup_r+0xd8>)
 80010c0:	429c      	cmp	r4, r3
 80010c2:	bf08      	it	eq
 80010c4:	68ec      	ldreq	r4, [r5, #12]
 80010c6:	e7e6      	b.n	8001096 <__swsetup_r+0x1e>
 80010c8:	0758      	lsls	r0, r3, #29
 80010ca:	d512      	bpl.n	80010f2 <__swsetup_r+0x7a>
 80010cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010ce:	b141      	cbz	r1, 80010e2 <__swsetup_r+0x6a>
 80010d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010d4:	4299      	cmp	r1, r3
 80010d6:	d002      	beq.n	80010de <__swsetup_r+0x66>
 80010d8:	4630      	mov	r0, r6
 80010da:	f000 f99b 	bl	8001414 <_free_r>
 80010de:	2300      	movs	r3, #0
 80010e0:	6363      	str	r3, [r4, #52]	; 0x34
 80010e2:	89a3      	ldrh	r3, [r4, #12]
 80010e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80010e8:	81a3      	strh	r3, [r4, #12]
 80010ea:	2300      	movs	r3, #0
 80010ec:	6063      	str	r3, [r4, #4]
 80010ee:	6923      	ldr	r3, [r4, #16]
 80010f0:	6023      	str	r3, [r4, #0]
 80010f2:	89a3      	ldrh	r3, [r4, #12]
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	81a3      	strh	r3, [r4, #12]
 80010fa:	6923      	ldr	r3, [r4, #16]
 80010fc:	b94b      	cbnz	r3, 8001112 <__swsetup_r+0x9a>
 80010fe:	89a3      	ldrh	r3, [r4, #12]
 8001100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001108:	d003      	beq.n	8001112 <__swsetup_r+0x9a>
 800110a:	4621      	mov	r1, r4
 800110c:	4630      	mov	r0, r6
 800110e:	f000 f927 	bl	8001360 <__smakebuf_r>
 8001112:	89a0      	ldrh	r0, [r4, #12]
 8001114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001118:	f010 0301 	ands.w	r3, r0, #1
 800111c:	d00a      	beq.n	8001134 <__swsetup_r+0xbc>
 800111e:	2300      	movs	r3, #0
 8001120:	60a3      	str	r3, [r4, #8]
 8001122:	6963      	ldr	r3, [r4, #20]
 8001124:	425b      	negs	r3, r3
 8001126:	61a3      	str	r3, [r4, #24]
 8001128:	6923      	ldr	r3, [r4, #16]
 800112a:	b943      	cbnz	r3, 800113e <__swsetup_r+0xc6>
 800112c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001130:	d1ba      	bne.n	80010a8 <__swsetup_r+0x30>
 8001132:	bd70      	pop	{r4, r5, r6, pc}
 8001134:	0781      	lsls	r1, r0, #30
 8001136:	bf58      	it	pl
 8001138:	6963      	ldrpl	r3, [r4, #20]
 800113a:	60a3      	str	r3, [r4, #8]
 800113c:	e7f4      	b.n	8001128 <__swsetup_r+0xb0>
 800113e:	2000      	movs	r0, #0
 8001140:	e7f7      	b.n	8001132 <__swsetup_r+0xba>
 8001142:	bf00      	nop
 8001144:	20000000 	.word	0x20000000
 8001148:	0800155c 	.word	0x0800155c
 800114c:	0800157c 	.word	0x0800157c
 8001150:	0800153c 	.word	0x0800153c

08001154 <_close_r>:
 8001154:	b538      	push	{r3, r4, r5, lr}
 8001156:	2300      	movs	r3, #0
 8001158:	4d05      	ldr	r5, [pc, #20]	; (8001170 <_close_r+0x1c>)
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	602b      	str	r3, [r5, #0]
 8001160:	f7ff f8f5 	bl	800034e <_close>
 8001164:	1c43      	adds	r3, r0, #1
 8001166:	d102      	bne.n	800116e <_close_r+0x1a>
 8001168:	682b      	ldr	r3, [r5, #0]
 800116a:	b103      	cbz	r3, 800116e <_close_r+0x1a>
 800116c:	6023      	str	r3, [r4, #0]
 800116e:	bd38      	pop	{r3, r4, r5, pc}
 8001170:	20000090 	.word	0x20000090

08001174 <__sflush_r>:
 8001174:	898a      	ldrh	r2, [r1, #12]
 8001176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001178:	4605      	mov	r5, r0
 800117a:	0710      	lsls	r0, r2, #28
 800117c:	460c      	mov	r4, r1
 800117e:	d457      	bmi.n	8001230 <__sflush_r+0xbc>
 8001180:	684b      	ldr	r3, [r1, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	dc04      	bgt.n	8001190 <__sflush_r+0x1c>
 8001186:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001188:	2b00      	cmp	r3, #0
 800118a:	dc01      	bgt.n	8001190 <__sflush_r+0x1c>
 800118c:	2000      	movs	r0, #0
 800118e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001192:	2e00      	cmp	r6, #0
 8001194:	d0fa      	beq.n	800118c <__sflush_r+0x18>
 8001196:	2300      	movs	r3, #0
 8001198:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800119c:	682f      	ldr	r7, [r5, #0]
 800119e:	602b      	str	r3, [r5, #0]
 80011a0:	d032      	beq.n	8001208 <__sflush_r+0x94>
 80011a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011a4:	89a3      	ldrh	r3, [r4, #12]
 80011a6:	075a      	lsls	r2, r3, #29
 80011a8:	d505      	bpl.n	80011b6 <__sflush_r+0x42>
 80011aa:	6863      	ldr	r3, [r4, #4]
 80011ac:	1ac0      	subs	r0, r0, r3
 80011ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011b0:	b10b      	cbz	r3, 80011b6 <__sflush_r+0x42>
 80011b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011b4:	1ac0      	subs	r0, r0, r3
 80011b6:	2300      	movs	r3, #0
 80011b8:	4602      	mov	r2, r0
 80011ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011bc:	4628      	mov	r0, r5
 80011be:	6a21      	ldr	r1, [r4, #32]
 80011c0:	47b0      	blx	r6
 80011c2:	1c43      	adds	r3, r0, #1
 80011c4:	89a3      	ldrh	r3, [r4, #12]
 80011c6:	d106      	bne.n	80011d6 <__sflush_r+0x62>
 80011c8:	6829      	ldr	r1, [r5, #0]
 80011ca:	291d      	cmp	r1, #29
 80011cc:	d82c      	bhi.n	8001228 <__sflush_r+0xb4>
 80011ce:	4a29      	ldr	r2, [pc, #164]	; (8001274 <__sflush_r+0x100>)
 80011d0:	40ca      	lsrs	r2, r1
 80011d2:	07d6      	lsls	r6, r2, #31
 80011d4:	d528      	bpl.n	8001228 <__sflush_r+0xb4>
 80011d6:	2200      	movs	r2, #0
 80011d8:	6062      	str	r2, [r4, #4]
 80011da:	6922      	ldr	r2, [r4, #16]
 80011dc:	04d9      	lsls	r1, r3, #19
 80011de:	6022      	str	r2, [r4, #0]
 80011e0:	d504      	bpl.n	80011ec <__sflush_r+0x78>
 80011e2:	1c42      	adds	r2, r0, #1
 80011e4:	d101      	bne.n	80011ea <__sflush_r+0x76>
 80011e6:	682b      	ldr	r3, [r5, #0]
 80011e8:	b903      	cbnz	r3, 80011ec <__sflush_r+0x78>
 80011ea:	6560      	str	r0, [r4, #84]	; 0x54
 80011ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011ee:	602f      	str	r7, [r5, #0]
 80011f0:	2900      	cmp	r1, #0
 80011f2:	d0cb      	beq.n	800118c <__sflush_r+0x18>
 80011f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011f8:	4299      	cmp	r1, r3
 80011fa:	d002      	beq.n	8001202 <__sflush_r+0x8e>
 80011fc:	4628      	mov	r0, r5
 80011fe:	f000 f909 	bl	8001414 <_free_r>
 8001202:	2000      	movs	r0, #0
 8001204:	6360      	str	r0, [r4, #52]	; 0x34
 8001206:	e7c2      	b.n	800118e <__sflush_r+0x1a>
 8001208:	6a21      	ldr	r1, [r4, #32]
 800120a:	2301      	movs	r3, #1
 800120c:	4628      	mov	r0, r5
 800120e:	47b0      	blx	r6
 8001210:	1c41      	adds	r1, r0, #1
 8001212:	d1c7      	bne.n	80011a4 <__sflush_r+0x30>
 8001214:	682b      	ldr	r3, [r5, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0c4      	beq.n	80011a4 <__sflush_r+0x30>
 800121a:	2b1d      	cmp	r3, #29
 800121c:	d001      	beq.n	8001222 <__sflush_r+0xae>
 800121e:	2b16      	cmp	r3, #22
 8001220:	d101      	bne.n	8001226 <__sflush_r+0xb2>
 8001222:	602f      	str	r7, [r5, #0]
 8001224:	e7b2      	b.n	800118c <__sflush_r+0x18>
 8001226:	89a3      	ldrh	r3, [r4, #12]
 8001228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122c:	81a3      	strh	r3, [r4, #12]
 800122e:	e7ae      	b.n	800118e <__sflush_r+0x1a>
 8001230:	690f      	ldr	r7, [r1, #16]
 8001232:	2f00      	cmp	r7, #0
 8001234:	d0aa      	beq.n	800118c <__sflush_r+0x18>
 8001236:	0793      	lsls	r3, r2, #30
 8001238:	bf18      	it	ne
 800123a:	2300      	movne	r3, #0
 800123c:	680e      	ldr	r6, [r1, #0]
 800123e:	bf08      	it	eq
 8001240:	694b      	ldreq	r3, [r1, #20]
 8001242:	1bf6      	subs	r6, r6, r7
 8001244:	600f      	str	r7, [r1, #0]
 8001246:	608b      	str	r3, [r1, #8]
 8001248:	2e00      	cmp	r6, #0
 800124a:	dd9f      	ble.n	800118c <__sflush_r+0x18>
 800124c:	4633      	mov	r3, r6
 800124e:	463a      	mov	r2, r7
 8001250:	4628      	mov	r0, r5
 8001252:	6a21      	ldr	r1, [r4, #32]
 8001254:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001258:	47e0      	blx	ip
 800125a:	2800      	cmp	r0, #0
 800125c:	dc06      	bgt.n	800126c <__sflush_r+0xf8>
 800125e:	89a3      	ldrh	r3, [r4, #12]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001268:	81a3      	strh	r3, [r4, #12]
 800126a:	e790      	b.n	800118e <__sflush_r+0x1a>
 800126c:	4407      	add	r7, r0
 800126e:	1a36      	subs	r6, r6, r0
 8001270:	e7ea      	b.n	8001248 <__sflush_r+0xd4>
 8001272:	bf00      	nop
 8001274:	20400001 	.word	0x20400001

08001278 <_fflush_r>:
 8001278:	b538      	push	{r3, r4, r5, lr}
 800127a:	690b      	ldr	r3, [r1, #16]
 800127c:	4605      	mov	r5, r0
 800127e:	460c      	mov	r4, r1
 8001280:	b913      	cbnz	r3, 8001288 <_fflush_r+0x10>
 8001282:	2500      	movs	r5, #0
 8001284:	4628      	mov	r0, r5
 8001286:	bd38      	pop	{r3, r4, r5, pc}
 8001288:	b118      	cbz	r0, 8001292 <_fflush_r+0x1a>
 800128a:	6983      	ldr	r3, [r0, #24]
 800128c:	b90b      	cbnz	r3, 8001292 <_fflush_r+0x1a>
 800128e:	f7ff fa19 	bl	80006c4 <__sinit>
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <_fflush_r+0x6c>)
 8001294:	429c      	cmp	r4, r3
 8001296:	d11b      	bne.n	80012d0 <_fflush_r+0x58>
 8001298:	686c      	ldr	r4, [r5, #4]
 800129a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0ef      	beq.n	8001282 <_fflush_r+0xa>
 80012a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012a4:	07d0      	lsls	r0, r2, #31
 80012a6:	d404      	bmi.n	80012b2 <_fflush_r+0x3a>
 80012a8:	0599      	lsls	r1, r3, #22
 80012aa:	d402      	bmi.n	80012b2 <_fflush_r+0x3a>
 80012ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012ae:	f7ff faa7 	bl	8000800 <__retarget_lock_acquire_recursive>
 80012b2:	4628      	mov	r0, r5
 80012b4:	4621      	mov	r1, r4
 80012b6:	f7ff ff5d 	bl	8001174 <__sflush_r>
 80012ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012bc:	4605      	mov	r5, r0
 80012be:	07da      	lsls	r2, r3, #31
 80012c0:	d4e0      	bmi.n	8001284 <_fflush_r+0xc>
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	059b      	lsls	r3, r3, #22
 80012c6:	d4dd      	bmi.n	8001284 <_fflush_r+0xc>
 80012c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012ca:	f7ff fa9a 	bl	8000802 <__retarget_lock_release_recursive>
 80012ce:	e7d9      	b.n	8001284 <_fflush_r+0xc>
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <_fflush_r+0x70>)
 80012d2:	429c      	cmp	r4, r3
 80012d4:	d101      	bne.n	80012da <_fflush_r+0x62>
 80012d6:	68ac      	ldr	r4, [r5, #8]
 80012d8:	e7df      	b.n	800129a <_fflush_r+0x22>
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <_fflush_r+0x74>)
 80012dc:	429c      	cmp	r4, r3
 80012de:	bf08      	it	eq
 80012e0:	68ec      	ldreq	r4, [r5, #12]
 80012e2:	e7da      	b.n	800129a <_fflush_r+0x22>
 80012e4:	0800155c 	.word	0x0800155c
 80012e8:	0800157c 	.word	0x0800157c
 80012ec:	0800153c 	.word	0x0800153c

080012f0 <_lseek_r>:
 80012f0:	b538      	push	{r3, r4, r5, lr}
 80012f2:	4604      	mov	r4, r0
 80012f4:	4608      	mov	r0, r1
 80012f6:	4611      	mov	r1, r2
 80012f8:	2200      	movs	r2, #0
 80012fa:	4d05      	ldr	r5, [pc, #20]	; (8001310 <_lseek_r+0x20>)
 80012fc:	602a      	str	r2, [r5, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	f7ff f849 	bl	8000396 <_lseek>
 8001304:	1c43      	adds	r3, r0, #1
 8001306:	d102      	bne.n	800130e <_lseek_r+0x1e>
 8001308:	682b      	ldr	r3, [r5, #0]
 800130a:	b103      	cbz	r3, 800130e <_lseek_r+0x1e>
 800130c:	6023      	str	r3, [r4, #0]
 800130e:	bd38      	pop	{r3, r4, r5, pc}
 8001310:	20000090 	.word	0x20000090

08001314 <__swhatbuf_r>:
 8001314:	b570      	push	{r4, r5, r6, lr}
 8001316:	460e      	mov	r6, r1
 8001318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800131c:	4614      	mov	r4, r2
 800131e:	2900      	cmp	r1, #0
 8001320:	461d      	mov	r5, r3
 8001322:	b096      	sub	sp, #88	; 0x58
 8001324:	da08      	bge.n	8001338 <__swhatbuf_r+0x24>
 8001326:	2200      	movs	r2, #0
 8001328:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800132c:	602a      	str	r2, [r5, #0]
 800132e:	061a      	lsls	r2, r3, #24
 8001330:	d410      	bmi.n	8001354 <__swhatbuf_r+0x40>
 8001332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001336:	e00e      	b.n	8001356 <__swhatbuf_r+0x42>
 8001338:	466a      	mov	r2, sp
 800133a:	f000 f8c5 	bl	80014c8 <_fstat_r>
 800133e:	2800      	cmp	r0, #0
 8001340:	dbf1      	blt.n	8001326 <__swhatbuf_r+0x12>
 8001342:	9a01      	ldr	r2, [sp, #4]
 8001344:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001348:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800134c:	425a      	negs	r2, r3
 800134e:	415a      	adcs	r2, r3
 8001350:	602a      	str	r2, [r5, #0]
 8001352:	e7ee      	b.n	8001332 <__swhatbuf_r+0x1e>
 8001354:	2340      	movs	r3, #64	; 0x40
 8001356:	2000      	movs	r0, #0
 8001358:	6023      	str	r3, [r4, #0]
 800135a:	b016      	add	sp, #88	; 0x58
 800135c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001360 <__smakebuf_r>:
 8001360:	898b      	ldrh	r3, [r1, #12]
 8001362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001364:	079d      	lsls	r5, r3, #30
 8001366:	4606      	mov	r6, r0
 8001368:	460c      	mov	r4, r1
 800136a:	d507      	bpl.n	800137c <__smakebuf_r+0x1c>
 800136c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001370:	6023      	str	r3, [r4, #0]
 8001372:	6123      	str	r3, [r4, #16]
 8001374:	2301      	movs	r3, #1
 8001376:	6163      	str	r3, [r4, #20]
 8001378:	b002      	add	sp, #8
 800137a:	bd70      	pop	{r4, r5, r6, pc}
 800137c:	466a      	mov	r2, sp
 800137e:	ab01      	add	r3, sp, #4
 8001380:	f7ff ffc8 	bl	8001314 <__swhatbuf_r>
 8001384:	9900      	ldr	r1, [sp, #0]
 8001386:	4605      	mov	r5, r0
 8001388:	4630      	mov	r0, r6
 800138a:	f7ff fa5b 	bl	8000844 <_malloc_r>
 800138e:	b948      	cbnz	r0, 80013a4 <__smakebuf_r+0x44>
 8001390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001394:	059a      	lsls	r2, r3, #22
 8001396:	d4ef      	bmi.n	8001378 <__smakebuf_r+0x18>
 8001398:	f023 0303 	bic.w	r3, r3, #3
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	81a3      	strh	r3, [r4, #12]
 80013a2:	e7e3      	b.n	800136c <__smakebuf_r+0xc>
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <__smakebuf_r+0x7c>)
 80013a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80013a8:	89a3      	ldrh	r3, [r4, #12]
 80013aa:	6020      	str	r0, [r4, #0]
 80013ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b0:	81a3      	strh	r3, [r4, #12]
 80013b2:	9b00      	ldr	r3, [sp, #0]
 80013b4:	6120      	str	r0, [r4, #16]
 80013b6:	6163      	str	r3, [r4, #20]
 80013b8:	9b01      	ldr	r3, [sp, #4]
 80013ba:	b15b      	cbz	r3, 80013d4 <__smakebuf_r+0x74>
 80013bc:	4630      	mov	r0, r6
 80013be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013c2:	f000 f893 	bl	80014ec <_isatty_r>
 80013c6:	b128      	cbz	r0, 80013d4 <__smakebuf_r+0x74>
 80013c8:	89a3      	ldrh	r3, [r4, #12]
 80013ca:	f023 0303 	bic.w	r3, r3, #3
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	81a3      	strh	r3, [r4, #12]
 80013d4:	89a0      	ldrh	r0, [r4, #12]
 80013d6:	4305      	orrs	r5, r0
 80013d8:	81a5      	strh	r5, [r4, #12]
 80013da:	e7cd      	b.n	8001378 <__smakebuf_r+0x18>
 80013dc:	0800065d 	.word	0x0800065d

080013e0 <memchr>:
 80013e0:	4603      	mov	r3, r0
 80013e2:	b510      	push	{r4, lr}
 80013e4:	b2c9      	uxtb	r1, r1
 80013e6:	4402      	add	r2, r0
 80013e8:	4293      	cmp	r3, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	d101      	bne.n	80013f2 <memchr+0x12>
 80013ee:	2000      	movs	r0, #0
 80013f0:	e003      	b.n	80013fa <memchr+0x1a>
 80013f2:	7804      	ldrb	r4, [r0, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	428c      	cmp	r4, r1
 80013f8:	d1f6      	bne.n	80013e8 <memchr+0x8>
 80013fa:	bd10      	pop	{r4, pc}

080013fc <__malloc_lock>:
 80013fc:	4801      	ldr	r0, [pc, #4]	; (8001404 <__malloc_lock+0x8>)
 80013fe:	f7ff b9ff 	b.w	8000800 <__retarget_lock_acquire_recursive>
 8001402:	bf00      	nop
 8001404:	20000084 	.word	0x20000084

08001408 <__malloc_unlock>:
 8001408:	4801      	ldr	r0, [pc, #4]	; (8001410 <__malloc_unlock+0x8>)
 800140a:	f7ff b9fa 	b.w	8000802 <__retarget_lock_release_recursive>
 800140e:	bf00      	nop
 8001410:	20000084 	.word	0x20000084

08001414 <_free_r>:
 8001414:	b538      	push	{r3, r4, r5, lr}
 8001416:	4605      	mov	r5, r0
 8001418:	2900      	cmp	r1, #0
 800141a:	d040      	beq.n	800149e <_free_r+0x8a>
 800141c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001420:	1f0c      	subs	r4, r1, #4
 8001422:	2b00      	cmp	r3, #0
 8001424:	bfb8      	it	lt
 8001426:	18e4      	addlt	r4, r4, r3
 8001428:	f7ff ffe8 	bl	80013fc <__malloc_lock>
 800142c:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <_free_r+0x8c>)
 800142e:	6813      	ldr	r3, [r2, #0]
 8001430:	b933      	cbnz	r3, 8001440 <_free_r+0x2c>
 8001432:	6063      	str	r3, [r4, #4]
 8001434:	6014      	str	r4, [r2, #0]
 8001436:	4628      	mov	r0, r5
 8001438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800143c:	f7ff bfe4 	b.w	8001408 <__malloc_unlock>
 8001440:	42a3      	cmp	r3, r4
 8001442:	d908      	bls.n	8001456 <_free_r+0x42>
 8001444:	6820      	ldr	r0, [r4, #0]
 8001446:	1821      	adds	r1, r4, r0
 8001448:	428b      	cmp	r3, r1
 800144a:	bf01      	itttt	eq
 800144c:	6819      	ldreq	r1, [r3, #0]
 800144e:	685b      	ldreq	r3, [r3, #4]
 8001450:	1809      	addeq	r1, r1, r0
 8001452:	6021      	streq	r1, [r4, #0]
 8001454:	e7ed      	b.n	8001432 <_free_r+0x1e>
 8001456:	461a      	mov	r2, r3
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	b10b      	cbz	r3, 8001460 <_free_r+0x4c>
 800145c:	42a3      	cmp	r3, r4
 800145e:	d9fa      	bls.n	8001456 <_free_r+0x42>
 8001460:	6811      	ldr	r1, [r2, #0]
 8001462:	1850      	adds	r0, r2, r1
 8001464:	42a0      	cmp	r0, r4
 8001466:	d10b      	bne.n	8001480 <_free_r+0x6c>
 8001468:	6820      	ldr	r0, [r4, #0]
 800146a:	4401      	add	r1, r0
 800146c:	1850      	adds	r0, r2, r1
 800146e:	4283      	cmp	r3, r0
 8001470:	6011      	str	r1, [r2, #0]
 8001472:	d1e0      	bne.n	8001436 <_free_r+0x22>
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	4401      	add	r1, r0
 800147a:	6011      	str	r1, [r2, #0]
 800147c:	6053      	str	r3, [r2, #4]
 800147e:	e7da      	b.n	8001436 <_free_r+0x22>
 8001480:	d902      	bls.n	8001488 <_free_r+0x74>
 8001482:	230c      	movs	r3, #12
 8001484:	602b      	str	r3, [r5, #0]
 8001486:	e7d6      	b.n	8001436 <_free_r+0x22>
 8001488:	6820      	ldr	r0, [r4, #0]
 800148a:	1821      	adds	r1, r4, r0
 800148c:	428b      	cmp	r3, r1
 800148e:	bf01      	itttt	eq
 8001490:	6819      	ldreq	r1, [r3, #0]
 8001492:	685b      	ldreq	r3, [r3, #4]
 8001494:	1809      	addeq	r1, r1, r0
 8001496:	6021      	streq	r1, [r4, #0]
 8001498:	6063      	str	r3, [r4, #4]
 800149a:	6054      	str	r4, [r2, #4]
 800149c:	e7cb      	b.n	8001436 <_free_r+0x22>
 800149e:	bd38      	pop	{r3, r4, r5, pc}
 80014a0:	20000088 	.word	0x20000088

080014a4 <_read_r>:
 80014a4:	b538      	push	{r3, r4, r5, lr}
 80014a6:	4604      	mov	r4, r0
 80014a8:	4608      	mov	r0, r1
 80014aa:	4611      	mov	r1, r2
 80014ac:	2200      	movs	r2, #0
 80014ae:	4d05      	ldr	r5, [pc, #20]	; (80014c4 <_read_r+0x20>)
 80014b0:	602a      	str	r2, [r5, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	f7fe ff12 	bl	80002dc <_read>
 80014b8:	1c43      	adds	r3, r0, #1
 80014ba:	d102      	bne.n	80014c2 <_read_r+0x1e>
 80014bc:	682b      	ldr	r3, [r5, #0]
 80014be:	b103      	cbz	r3, 80014c2 <_read_r+0x1e>
 80014c0:	6023      	str	r3, [r4, #0]
 80014c2:	bd38      	pop	{r3, r4, r5, pc}
 80014c4:	20000090 	.word	0x20000090

080014c8 <_fstat_r>:
 80014c8:	b538      	push	{r3, r4, r5, lr}
 80014ca:	2300      	movs	r3, #0
 80014cc:	4d06      	ldr	r5, [pc, #24]	; (80014e8 <_fstat_r+0x20>)
 80014ce:	4604      	mov	r4, r0
 80014d0:	4608      	mov	r0, r1
 80014d2:	4611      	mov	r1, r2
 80014d4:	602b      	str	r3, [r5, #0]
 80014d6:	f7fe ff45 	bl	8000364 <_fstat>
 80014da:	1c43      	adds	r3, r0, #1
 80014dc:	d102      	bne.n	80014e4 <_fstat_r+0x1c>
 80014de:	682b      	ldr	r3, [r5, #0]
 80014e0:	b103      	cbz	r3, 80014e4 <_fstat_r+0x1c>
 80014e2:	6023      	str	r3, [r4, #0]
 80014e4:	bd38      	pop	{r3, r4, r5, pc}
 80014e6:	bf00      	nop
 80014e8:	20000090 	.word	0x20000090

080014ec <_isatty_r>:
 80014ec:	b538      	push	{r3, r4, r5, lr}
 80014ee:	2300      	movs	r3, #0
 80014f0:	4d05      	ldr	r5, [pc, #20]	; (8001508 <_isatty_r+0x1c>)
 80014f2:	4604      	mov	r4, r0
 80014f4:	4608      	mov	r0, r1
 80014f6:	602b      	str	r3, [r5, #0]
 80014f8:	f7fe ff43 	bl	8000382 <_isatty>
 80014fc:	1c43      	adds	r3, r0, #1
 80014fe:	d102      	bne.n	8001506 <_isatty_r+0x1a>
 8001500:	682b      	ldr	r3, [r5, #0]
 8001502:	b103      	cbz	r3, 8001506 <_isatty_r+0x1a>
 8001504:	6023      	str	r3, [r4, #0]
 8001506:	bd38      	pop	{r3, r4, r5, pc}
 8001508:	20000090 	.word	0x20000090

0800150c <_init>:
 800150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150e:	bf00      	nop
 8001510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001512:	bc08      	pop	{r3}
 8001514:	469e      	mov	lr, r3
 8001516:	4770      	bx	lr

08001518 <_fini>:
 8001518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800151a:	bf00      	nop
 800151c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800151e:	bc08      	pop	{r3}
 8001520:	469e      	mov	lr, r3
 8001522:	4770      	bx	lr

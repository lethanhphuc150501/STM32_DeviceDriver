
22_SPI_ADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ac4  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bf4  08000bfc  00010bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bf4  08000bf4  00010bfc  2**0
                  CONTENTS
  4 .ARM          00000000  08000bf4  08000bf4  00010bfc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bf4  08000bfc  00010bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bf4  08000bf4  00010bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bf8  08000bf8  00010bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000000  08000bfc  00020000  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08000bfc  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010bfc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000063e  00000000  00000000  00010c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002c7  00000000  00000000  00011263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00011530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  000115f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010e75  00000000  00000000  00011678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011d2  00000000  00000000  000224ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058191  00000000  00000000  000236bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007b850  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000288  00000000  00000000  0007b8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bdc 	.word	0x08000bdc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000bdc 	.word	0x08000bdc

08000170 <__aeabi_dmul>:
 8000170:	b570      	push	{r4, r5, r6, lr}
 8000172:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000176:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800017a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800017e:	bf1d      	ittte	ne
 8000180:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000184:	ea94 0f0c 	teqne	r4, ip
 8000188:	ea95 0f0c 	teqne	r5, ip
 800018c:	f000 f8de 	bleq	800034c <__aeabi_dmul+0x1dc>
 8000190:	442c      	add	r4, r5
 8000192:	ea81 0603 	eor.w	r6, r1, r3
 8000196:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800019e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a2:	bf18      	it	ne
 80001a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001b0:	d038      	beq.n	8000224 <__aeabi_dmul+0xb4>
 80001b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001b6:	f04f 0500 	mov.w	r5, #0
 80001ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001c6:	f04f 0600 	mov.w	r6, #0
 80001ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ce:	f09c 0f00 	teq	ip, #0
 80001d2:	bf18      	it	ne
 80001d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001e4:	d204      	bcs.n	80001f0 <__aeabi_dmul+0x80>
 80001e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ea:	416d      	adcs	r5, r5
 80001ec:	eb46 0606 	adc.w	r6, r6, r6
 80001f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000200:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000204:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000208:	bf88      	it	hi
 800020a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800020e:	d81e      	bhi.n	800024e <__aeabi_dmul+0xde>
 8000210:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000214:	bf08      	it	eq
 8000216:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021a:	f150 0000 	adcs.w	r0, r0, #0
 800021e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000222:	bd70      	pop	{r4, r5, r6, pc}
 8000224:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000228:	ea46 0101 	orr.w	r1, r6, r1
 800022c:	ea40 0002 	orr.w	r0, r0, r2
 8000230:	ea81 0103 	eor.w	r1, r1, r3
 8000234:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000238:	bfc2      	ittt	gt
 800023a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800023e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000242:	bd70      	popgt	{r4, r5, r6, pc}
 8000244:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000248:	f04f 0e00 	mov.w	lr, #0
 800024c:	3c01      	subs	r4, #1
 800024e:	f300 80ab 	bgt.w	80003a8 <__aeabi_dmul+0x238>
 8000252:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000256:	bfde      	ittt	le
 8000258:	2000      	movle	r0, #0
 800025a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800025e:	bd70      	pople	{r4, r5, r6, pc}
 8000260:	f1c4 0400 	rsb	r4, r4, #0
 8000264:	3c20      	subs	r4, #32
 8000266:	da35      	bge.n	80002d4 <__aeabi_dmul+0x164>
 8000268:	340c      	adds	r4, #12
 800026a:	dc1b      	bgt.n	80002a4 <__aeabi_dmul+0x134>
 800026c:	f104 0414 	add.w	r4, r4, #20
 8000270:	f1c4 0520 	rsb	r5, r4, #32
 8000274:	fa00 f305 	lsl.w	r3, r0, r5
 8000278:	fa20 f004 	lsr.w	r0, r0, r4
 800027c:	fa01 f205 	lsl.w	r2, r1, r5
 8000280:	ea40 0002 	orr.w	r0, r0, r2
 8000284:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800028c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000290:	fa21 f604 	lsr.w	r6, r1, r4
 8000294:	eb42 0106 	adc.w	r1, r2, r6
 8000298:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800029c:	bf08      	it	eq
 800029e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f1c4 040c 	rsb	r4, r4, #12
 80002a8:	f1c4 0520 	rsb	r5, r4, #32
 80002ac:	fa00 f304 	lsl.w	r3, r0, r4
 80002b0:	fa20 f005 	lsr.w	r0, r0, r5
 80002b4:	fa01 f204 	lsl.w	r2, r1, r4
 80002b8:	ea40 0002 	orr.w	r0, r0, r2
 80002bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002cc:	bf08      	it	eq
 80002ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f205 	lsl.w	r2, r0, r5
 80002dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e0:	fa20 f304 	lsr.w	r3, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea43 0302 	orr.w	r3, r3, r2
 80002ec:	fa21 f004 	lsr.w	r0, r1, r4
 80002f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	fa21 f204 	lsr.w	r2, r1, r4
 80002f8:	ea20 0002 	bic.w	r0, r0, r2
 80002fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f094 0f00 	teq	r4, #0
 8000310:	d10f      	bne.n	8000332 <__aeabi_dmul+0x1c2>
 8000312:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000316:	0040      	lsls	r0, r0, #1
 8000318:	eb41 0101 	adc.w	r1, r1, r1
 800031c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3c01      	subeq	r4, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1a6>
 8000326:	ea41 0106 	orr.w	r1, r1, r6
 800032a:	f095 0f00 	teq	r5, #0
 800032e:	bf18      	it	ne
 8000330:	4770      	bxne	lr
 8000332:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000336:	0052      	lsls	r2, r2, #1
 8000338:	eb43 0303 	adc.w	r3, r3, r3
 800033c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000340:	bf08      	it	eq
 8000342:	3d01      	subeq	r5, #1
 8000344:	d0f7      	beq.n	8000336 <__aeabi_dmul+0x1c6>
 8000346:	ea43 0306 	orr.w	r3, r3, r6
 800034a:	4770      	bx	lr
 800034c:	ea94 0f0c 	teq	r4, ip
 8000350:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000354:	bf18      	it	ne
 8000356:	ea95 0f0c 	teqne	r5, ip
 800035a:	d00c      	beq.n	8000376 <__aeabi_dmul+0x206>
 800035c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000360:	bf18      	it	ne
 8000362:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000366:	d1d1      	bne.n	800030c <__aeabi_dmul+0x19c>
 8000368:	ea81 0103 	eor.w	r1, r1, r3
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000370:	f04f 0000 	mov.w	r0, #0
 8000374:	bd70      	pop	{r4, r5, r6, pc}
 8000376:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037a:	bf06      	itte	eq
 800037c:	4610      	moveq	r0, r2
 800037e:	4619      	moveq	r1, r3
 8000380:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000384:	d019      	beq.n	80003ba <__aeabi_dmul+0x24a>
 8000386:	ea94 0f0c 	teq	r4, ip
 800038a:	d102      	bne.n	8000392 <__aeabi_dmul+0x222>
 800038c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000390:	d113      	bne.n	80003ba <__aeabi_dmul+0x24a>
 8000392:	ea95 0f0c 	teq	r5, ip
 8000396:	d105      	bne.n	80003a4 <__aeabi_dmul+0x234>
 8000398:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800039c:	bf1c      	itt	ne
 800039e:	4610      	movne	r0, r2
 80003a0:	4619      	movne	r1, r3
 80003a2:	d10a      	bne.n	80003ba <__aeabi_dmul+0x24a>
 80003a4:	ea81 0103 	eor.w	r1, r1, r3
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd70      	pop	{r4, r5, r6, pc}
 80003ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003c2:	bd70      	pop	{r4, r5, r6, pc}

080003c4 <__aeabi_drsub>:
 80003c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	e002      	b.n	80003d0 <__adddf3>
 80003ca:	bf00      	nop

080003cc <__aeabi_dsub>:
 80003cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003d0 <__adddf3>:
 80003d0:	b530      	push	{r4, r5, lr}
 80003d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	bf1f      	itttt	ne
 80003e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f6:	f000 80e2 	beq.w	80005be <__adddf3+0x1ee>
 80003fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000402:	bfb8      	it	lt
 8000404:	426d      	neglt	r5, r5
 8000406:	dd0c      	ble.n	8000422 <__adddf3+0x52>
 8000408:	442c      	add	r4, r5
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	ea82 0000 	eor.w	r0, r2, r0
 8000416:	ea83 0101 	eor.w	r1, r3, r1
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	2d36      	cmp	r5, #54	; 0x36
 8000424:	bf88      	it	hi
 8000426:	bd30      	pophi	{r4, r5, pc}
 8000428:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800042c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000430:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000434:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x70>
 800043a:	4240      	negs	r0, r0
 800043c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000440:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000444:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000448:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800044c:	d002      	beq.n	8000454 <__adddf3+0x84>
 800044e:	4252      	negs	r2, r2
 8000450:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000454:	ea94 0f05 	teq	r4, r5
 8000458:	f000 80a7 	beq.w	80005aa <__adddf3+0x1da>
 800045c:	f1a4 0401 	sub.w	r4, r4, #1
 8000460:	f1d5 0e20 	rsbs	lr, r5, #32
 8000464:	db0d      	blt.n	8000482 <__adddf3+0xb2>
 8000466:	fa02 fc0e 	lsl.w	ip, r2, lr
 800046a:	fa22 f205 	lsr.w	r2, r2, r5
 800046e:	1880      	adds	r0, r0, r2
 8000470:	f141 0100 	adc.w	r1, r1, #0
 8000474:	fa03 f20e 	lsl.w	r2, r3, lr
 8000478:	1880      	adds	r0, r0, r2
 800047a:	fa43 f305 	asr.w	r3, r3, r5
 800047e:	4159      	adcs	r1, r3
 8000480:	e00e      	b.n	80004a0 <__adddf3+0xd0>
 8000482:	f1a5 0520 	sub.w	r5, r5, #32
 8000486:	f10e 0e20 	add.w	lr, lr, #32
 800048a:	2a01      	cmp	r2, #1
 800048c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000490:	bf28      	it	cs
 8000492:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	18c0      	adds	r0, r0, r3
 800049c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a4:	d507      	bpl.n	80004b6 <__adddf3+0xe6>
 80004a6:	f04f 0e00 	mov.w	lr, #0
 80004aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ba:	d31b      	bcc.n	80004f4 <__adddf3+0x124>
 80004bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004c0:	d30c      	bcc.n	80004dc <__adddf3+0x10c>
 80004c2:	0849      	lsrs	r1, r1, #1
 80004c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004cc:	f104 0401 	add.w	r4, r4, #1
 80004d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d8:	f080 809a 	bcs.w	8000610 <__adddf3+0x240>
 80004dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004e0:	bf08      	it	eq
 80004e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e6:	f150 0000 	adcs.w	r0, r0, #0
 80004ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ee:	ea41 0105 	orr.w	r1, r1, r5
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f8:	4140      	adcs	r0, r0
 80004fa:	eb41 0101 	adc.w	r1, r1, r1
 80004fe:	3c01      	subs	r4, #1
 8000500:	bf28      	it	cs
 8000502:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000506:	d2e9      	bcs.n	80004dc <__adddf3+0x10c>
 8000508:	f091 0f00 	teq	r1, #0
 800050c:	bf04      	itt	eq
 800050e:	4601      	moveq	r1, r0
 8000510:	2000      	moveq	r0, #0
 8000512:	fab1 f381 	clz	r3, r1
 8000516:	bf08      	it	eq
 8000518:	3320      	addeq	r3, #32
 800051a:	f1a3 030b 	sub.w	r3, r3, #11
 800051e:	f1b3 0220 	subs.w	r2, r3, #32
 8000522:	da0c      	bge.n	800053e <__adddf3+0x16e>
 8000524:	320c      	adds	r2, #12
 8000526:	dd08      	ble.n	800053a <__adddf3+0x16a>
 8000528:	f102 0c14 	add.w	ip, r2, #20
 800052c:	f1c2 020c 	rsb	r2, r2, #12
 8000530:	fa01 f00c 	lsl.w	r0, r1, ip
 8000534:	fa21 f102 	lsr.w	r1, r1, r2
 8000538:	e00c      	b.n	8000554 <__adddf3+0x184>
 800053a:	f102 0214 	add.w	r2, r2, #20
 800053e:	bfd8      	it	le
 8000540:	f1c2 0c20 	rsble	ip, r2, #32
 8000544:	fa01 f102 	lsl.w	r1, r1, r2
 8000548:	fa20 fc0c 	lsr.w	ip, r0, ip
 800054c:	bfdc      	itt	le
 800054e:	ea41 010c 	orrle.w	r1, r1, ip
 8000552:	4090      	lslle	r0, r2
 8000554:	1ae4      	subs	r4, r4, r3
 8000556:	bfa2      	ittt	ge
 8000558:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800055c:	4329      	orrge	r1, r5
 800055e:	bd30      	popge	{r4, r5, pc}
 8000560:	ea6f 0404 	mvn.w	r4, r4
 8000564:	3c1f      	subs	r4, #31
 8000566:	da1c      	bge.n	80005a2 <__adddf3+0x1d2>
 8000568:	340c      	adds	r4, #12
 800056a:	dc0e      	bgt.n	800058a <__adddf3+0x1ba>
 800056c:	f104 0414 	add.w	r4, r4, #20
 8000570:	f1c4 0220 	rsb	r2, r4, #32
 8000574:	fa20 f004 	lsr.w	r0, r0, r4
 8000578:	fa01 f302 	lsl.w	r3, r1, r2
 800057c:	ea40 0003 	orr.w	r0, r0, r3
 8000580:	fa21 f304 	lsr.w	r3, r1, r4
 8000584:	ea45 0103 	orr.w	r1, r5, r3
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f1c4 040c 	rsb	r4, r4, #12
 800058e:	f1c4 0220 	rsb	r2, r4, #32
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 f304 	lsl.w	r3, r1, r4
 800059a:	ea40 0003 	orr.w	r0, r0, r3
 800059e:	4629      	mov	r1, r5
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	fa21 f004 	lsr.w	r0, r1, r4
 80005a6:	4629      	mov	r1, r5
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	f094 0f00 	teq	r4, #0
 80005ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005b2:	bf06      	itte	eq
 80005b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b8:	3401      	addeq	r4, #1
 80005ba:	3d01      	subne	r5, #1
 80005bc:	e74e      	b.n	800045c <__adddf3+0x8c>
 80005be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005c2:	bf18      	it	ne
 80005c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c8:	d029      	beq.n	800061e <__adddf3+0x24e>
 80005ca:	ea94 0f05 	teq	r4, r5
 80005ce:	bf08      	it	eq
 80005d0:	ea90 0f02 	teqeq	r0, r2
 80005d4:	d005      	beq.n	80005e2 <__adddf3+0x212>
 80005d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005da:	bf04      	itt	eq
 80005dc:	4619      	moveq	r1, r3
 80005de:	4610      	moveq	r0, r2
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	ea91 0f03 	teq	r1, r3
 80005e6:	bf1e      	ittt	ne
 80005e8:	2100      	movne	r1, #0
 80005ea:	2000      	movne	r0, #0
 80005ec:	bd30      	popne	{r4, r5, pc}
 80005ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005f2:	d105      	bne.n	8000600 <__adddf3+0x230>
 80005f4:	0040      	lsls	r0, r0, #1
 80005f6:	4149      	adcs	r1, r1
 80005f8:	bf28      	it	cs
 80005fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fe:	bd30      	pop	{r4, r5, pc}
 8000600:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000604:	bf3c      	itt	cc
 8000606:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800060a:	bd30      	popcc	{r4, r5, pc}
 800060c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000610:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000614:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf1a      	itte	ne
 8000624:	4619      	movne	r1, r3
 8000626:	4610      	movne	r0, r2
 8000628:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800062c:	bf1c      	itt	ne
 800062e:	460b      	movne	r3, r1
 8000630:	4602      	movne	r2, r0
 8000632:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000636:	bf06      	itte	eq
 8000638:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800063c:	ea91 0f03 	teqeq	r1, r3
 8000640:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	bf00      	nop

08000648 <__aeabi_ui2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f04f 0500 	mov.w	r5, #0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e750      	b.n	8000508 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_i2d>:
 8000668:	f090 0f00 	teq	r0, #0
 800066c:	bf04      	itt	eq
 800066e:	2100      	moveq	r1, #0
 8000670:	4770      	bxeq	lr
 8000672:	b530      	push	{r4, r5, lr}
 8000674:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000678:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000680:	bf48      	it	mi
 8000682:	4240      	negmi	r0, r0
 8000684:	f04f 0100 	mov.w	r1, #0
 8000688:	e73e      	b.n	8000508 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_f2d>:
 800068c:	0042      	lsls	r2, r0, #1
 800068e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000692:	ea4f 0131 	mov.w	r1, r1, rrx
 8000696:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800069a:	bf1f      	itttt	ne
 800069c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a8:	4770      	bxne	lr
 80006aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ae:	bf08      	it	eq
 80006b0:	4770      	bxeq	lr
 80006b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b6:	bf04      	itt	eq
 80006b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006bc:	4770      	bxeq	lr
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	e71c      	b.n	8000508 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_ul2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f04f 0500 	mov.w	r5, #0
 80006de:	e00a      	b.n	80006f6 <__aeabi_l2d+0x16>

080006e0 <__aeabi_l2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ee:	d502      	bpl.n	80006f6 <__aeabi_l2d+0x16>
 80006f0:	4240      	negs	r0, r0
 80006f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000702:	f43f aed8 	beq.w	80004b6 <__adddf3+0xe6>
 8000706:	f04f 0203 	mov.w	r2, #3
 800070a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070e:	bf18      	it	ne
 8000710:	3203      	addne	r2, #3
 8000712:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000716:	bf18      	it	ne
 8000718:	3203      	addne	r2, #3
 800071a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071e:	f1c2 0320 	rsb	r3, r2, #32
 8000722:	fa00 fc03 	lsl.w	ip, r0, r3
 8000726:	fa20 f002 	lsr.w	r0, r0, r2
 800072a:	fa01 fe03 	lsl.w	lr, r1, r3
 800072e:	ea40 000e 	orr.w	r0, r0, lr
 8000732:	fa21 f102 	lsr.w	r1, r1, r2
 8000736:	4414      	add	r4, r2
 8000738:	e6bd      	b.n	80004b6 <__adddf3+0xe6>
 800073a:	bf00      	nop

0800073c <adxl_read>:

#define MULTI_BYTE_EN		0x40
#define READ_OPERATION		0x80

void adxl_read(uint8_t address, uint8_t *rxdata)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
	/* Set read operation */
	address |= READ_OPERATION;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800074e:	b2db      	uxtb	r3, r3
 8000750:	71fb      	strb	r3, [r7, #7]

	/* Set multi-byte */
	address |= MULTI_BYTE_EN;
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000758:	b2db      	uxtb	r3, r3
 800075a:	71fb      	strb	r3, [r7, #7]

	/* Pull CS line low to enable slave */
	cs_enable();
 800075c:	f000 f9d4 	bl	8000b08 <cs_enable>

	/* Send address */
	spi1_transmit(&address, 1);
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	2101      	movs	r1, #1
 8000764:	4618      	mov	r0, r3
 8000766:	f000 f971 	bl	8000a4c <spi1_transmit>

	/* Read 6 bytes */
	spi1_receive(rxdata, 6);
 800076a:	2106      	movs	r1, #6
 800076c:	6838      	ldr	r0, [r7, #0]
 800076e:	f000 f9a5 	bl	8000abc <spi1_receive>

	/* Pull CS line high to disable slave */
	cs_disable();
 8000772:	f000 f9d7 	bl	8000b24 <cs_disable>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <adxl_write>:

void adxl_write(uint8_t address, uint8_t value)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b084      	sub	sp, #16
 8000782:	af00      	add	r7, sp, #0
 8000784:	4603      	mov	r3, r0
 8000786:	460a      	mov	r2, r1
 8000788:	71fb      	strb	r3, [r7, #7]
 800078a:	4613      	mov	r3, r2
 800078c:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];

	/* Enable multi-byte, place address into buffer */
	data[0] = address | MULTI_BYTE_EN;
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000794:	b2db      	uxtb	r3, r3
 8000796:	733b      	strb	r3, [r7, #12]

	/* Place data into buffer */
	data[1] = value;
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	737b      	strb	r3, [r7, #13]

	/* Pull CS line low to enable slave */
	cs_enable();
 800079c:	f000 f9b4 	bl	8000b08 <cs_enable>

	/* Transmit data and address */
	spi1_transmit(data, 2);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2102      	movs	r1, #2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f950 	bl	8000a4c <spi1_transmit>

	/* Pull CS line high to disable slave */
	cs_disable();
 80007ac:	f000 f9ba 	bl	8000b24 <cs_disable>
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <adxl_init>:

void adxl_init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	/* Enable SPI GPIO */
	spi_gpio_init();
 80007bc:	f000 f87e 	bl	80008bc <spi_gpio_init>

	/* Configure SPI */
	spi_config();
 80007c0:	f000 f8ec 	bl	800099c <spi_config>

	/* Set data format range to +-4g */
	adxl_write(DATA_FORMAT_R, FOUR_G);
 80007c4:	2101      	movs	r1, #1
 80007c6:	2031      	movs	r0, #49	; 0x31
 80007c8:	f7ff ffd9 	bl	800077e <adxl_write>

	/* Reset all bits */
	adxl_write(POWER_CTL_R, RESET);
 80007cc:	2100      	movs	r1, #0
 80007ce:	202d      	movs	r0, #45	; 0x2d
 80007d0:	f7ff ffd5 	bl	800077e <adxl_write>

	/* Configure power control measure bit */
	adxl_write(POWER_CTL_R, SET_MEASURE_B);
 80007d4:	2108      	movs	r1, #8
 80007d6:	202d      	movs	r0, #45	; 0x2d
 80007d8:	f7ff ffd1 	bl	800077e <adxl_write>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <main>:
double xg, yg, zg;

uint8_t data_rec[6];

int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	adxl_init();
 80007e4:	f7ff ffe8 	bl	80007b8 <adxl_init>

	while(1)
	{
		adxl_read(DATA_START_ADDR, data_rec);
 80007e8:	492d      	ldr	r1, [pc, #180]	; (80008a0 <main+0xc0>)
 80007ea:	2032      	movs	r0, #50	; 0x32
 80007ec:	f7ff ffa6 	bl	800073c <adxl_read>

		x = ((data_rec[1] << 8) | data_rec[0]);
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <main+0xc0>)
 80007f2:	785b      	ldrb	r3, [r3, #1]
 80007f4:	021b      	lsls	r3, r3, #8
 80007f6:	b21a      	sxth	r2, r3
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <main+0xc0>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	4313      	orrs	r3, r2
 8000800:	b21a      	sxth	r2, r3
 8000802:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <main+0xc4>)
 8000804:	801a      	strh	r2, [r3, #0]
		y = ((data_rec[3] << 8) | data_rec[2]);
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <main+0xc0>)
 8000808:	78db      	ldrb	r3, [r3, #3]
 800080a:	021b      	lsls	r3, r3, #8
 800080c:	b21a      	sxth	r2, r3
 800080e:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <main+0xc0>)
 8000810:	789b      	ldrb	r3, [r3, #2]
 8000812:	b21b      	sxth	r3, r3
 8000814:	4313      	orrs	r3, r2
 8000816:	b21a      	sxth	r2, r3
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <main+0xc8>)
 800081a:	801a      	strh	r2, [r3, #0]
		z = ((data_rec[5] << 8) | data_rec[4]);
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <main+0xc0>)
 800081e:	795b      	ldrb	r3, [r3, #5]
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	b21a      	sxth	r2, r3
 8000824:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <main+0xc0>)
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	b21b      	sxth	r3, r3
 800082a:	4313      	orrs	r3, r2
 800082c:	b21a      	sxth	r2, r3
 800082e:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <main+0xcc>)
 8000830:	801a      	strh	r2, [r3, #0]

		xg = x * 0.0078;
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <main+0xc4>)
 8000834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff15 	bl	8000668 <__aeabi_i2d>
 800083e:	a316      	add	r3, pc, #88	; (adr r3, 8000898 <main+0xb8>)
 8000840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000844:	f7ff fc94 	bl	8000170 <__aeabi_dmul>
 8000848:	4602      	mov	r2, r0
 800084a:	460b      	mov	r3, r1
 800084c:	4918      	ldr	r1, [pc, #96]	; (80008b0 <main+0xd0>)
 800084e:	e9c1 2300 	strd	r2, r3, [r1]
		yg = y * 0.0078;
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <main+0xc8>)
 8000854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff05 	bl	8000668 <__aeabi_i2d>
 800085e:	a30e      	add	r3, pc, #56	; (adr r3, 8000898 <main+0xb8>)
 8000860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000864:	f7ff fc84 	bl	8000170 <__aeabi_dmul>
 8000868:	4602      	mov	r2, r0
 800086a:	460b      	mov	r3, r1
 800086c:	4911      	ldr	r1, [pc, #68]	; (80008b4 <main+0xd4>)
 800086e:	e9c1 2300 	strd	r2, r3, [r1]
		zg = z * 0.0078;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <main+0xcc>)
 8000874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fef5 	bl	8000668 <__aeabi_i2d>
 800087e:	a306      	add	r3, pc, #24	; (adr r3, 8000898 <main+0xb8>)
 8000880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000884:	f7ff fc74 	bl	8000170 <__aeabi_dmul>
 8000888:	4602      	mov	r2, r0
 800088a:	460b      	mov	r3, r1
 800088c:	490a      	ldr	r1, [pc, #40]	; (80008b8 <main+0xd8>)
 800088e:	e9c1 2300 	strd	r2, r3, [r1]
		adxl_read(DATA_START_ADDR, data_rec);
 8000892:	e7a9      	b.n	80007e8 <main+0x8>
 8000894:	f3af 8000 	nop.w
 8000898:	8e8a71de 	.word	0x8e8a71de
 800089c:	3f7ff2e4 	.word	0x3f7ff2e4
 80008a0:	20000040 	.word	0x20000040
 80008a4:	2000001c 	.word	0x2000001c
 80008a8:	2000001e 	.word	0x2000001e
 80008ac:	20000020 	.word	0x20000020
 80008b0:	20000028 	.word	0x20000028
 80008b4:	20000030 	.word	0x20000030
 80008b8:	20000038 	.word	0x20000038

080008bc <spi_gpio_init>:
 * 	PA6 -> MISO
 * 	PA7 -> MOSI
 */

void spi_gpio_init(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
	/* Enable clock access to GPIOA */
	RCC->APB2ENR |= IOPAEN;
 80008c0:	4b34      	ldr	r3, [pc, #208]	; (8000994 <spi_gpio_init+0xd8>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a33      	ldr	r2, [pc, #204]	; (8000994 <spi_gpio_init+0xd8>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	6193      	str	r3, [r2, #24]

	/* Set PA4 as Output push-pull */
	GPIOA->CRL |= (1U<<16);
 80008cc:	4b32      	ldr	r3, [pc, #200]	; (8000998 <spi_gpio_init+0xdc>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a31      	ldr	r2, [pc, #196]	; (8000998 <spi_gpio_init+0xdc>)
 80008d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<17);
 80008d8:	4b2f      	ldr	r3, [pc, #188]	; (8000998 <spi_gpio_init+0xdc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a2e      	ldr	r2, [pc, #184]	; (8000998 <spi_gpio_init+0xdc>)
 80008de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<18);
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <spi_gpio_init+0xdc>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a2b      	ldr	r2, [pc, #172]	; (8000998 <spi_gpio_init+0xdc>)
 80008ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ee:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<19);
 80008f0:	4b29      	ldr	r3, [pc, #164]	; (8000998 <spi_gpio_init+0xdc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a28      	ldr	r2, [pc, #160]	; (8000998 <spi_gpio_init+0xdc>)
 80008f6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80008fa:	6013      	str	r3, [r2, #0]

	/* Set PA5 as Alternate function push-pull */
	GPIOA->CRL |= (1U<<20);
 80008fc:	4b26      	ldr	r3, [pc, #152]	; (8000998 <spi_gpio_init+0xdc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a25      	ldr	r2, [pc, #148]	; (8000998 <spi_gpio_init+0xdc>)
 8000902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000906:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<21);
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <spi_gpio_init+0xdc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a22      	ldr	r2, [pc, #136]	; (8000998 <spi_gpio_init+0xdc>)
 800090e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000912:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<22);
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <spi_gpio_init+0xdc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a1f      	ldr	r2, [pc, #124]	; (8000998 <spi_gpio_init+0xdc>)
 800091a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800091e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<23);
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <spi_gpio_init+0xdc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <spi_gpio_init+0xdc>)
 8000926:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800092a:	6013      	str	r3, [r2, #0]

	/* Set PA6 as Input Floating */
	GPIOA->CRL &=~(1U<<24);
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <spi_gpio_init+0xdc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a19      	ldr	r2, [pc, #100]	; (8000998 <spi_gpio_init+0xdc>)
 8000932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000936:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<25);
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <spi_gpio_init+0xdc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a16      	ldr	r2, [pc, #88]	; (8000998 <spi_gpio_init+0xdc>)
 800093e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000942:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<26);
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <spi_gpio_init+0xdc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a13      	ldr	r2, [pc, #76]	; (8000998 <spi_gpio_init+0xdc>)
 800094a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800094e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<27);
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <spi_gpio_init+0xdc>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a10      	ldr	r2, [pc, #64]	; (8000998 <spi_gpio_init+0xdc>)
 8000956:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800095a:	6013      	str	r3, [r2, #0]

	/* Set PA7 as Alternate function push-pull */
	GPIOA->CRL |= (1U<<28);
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <spi_gpio_init+0xdc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <spi_gpio_init+0xdc>)
 8000962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000966:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<29);
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <spi_gpio_init+0xdc>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <spi_gpio_init+0xdc>)
 800096e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000972:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<30);
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <spi_gpio_init+0xdc>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <spi_gpio_init+0xdc>)
 800097a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800097e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<31);
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <spi_gpio_init+0xdc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <spi_gpio_init+0xdc>)
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	40021000 	.word	0x40021000
 8000998:	40010800 	.word	0x40010800

0800099c <spi_config>:

void spi_config(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	/* Enable clock access to SPI1 module */
	RCC->APB2ENR |= SPI1EN;
 80009a0:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <spi_config+0xa8>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a27      	ldr	r2, [pc, #156]	; (8000a44 <spi_config+0xa8>)
 80009a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009aa:	6193      	str	r3, [r2, #24]

	/* Set clock to fPCLK/2 */
	SPI1->CR1 &=~(1U<<3);
 80009ac:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <spi_config+0xac>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a25      	ldr	r2, [pc, #148]	; (8000a48 <spi_config+0xac>)
 80009b2:	f023 0308 	bic.w	r3, r3, #8
 80009b6:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~(1U<<4);
 80009b8:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <spi_config+0xac>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <spi_config+0xac>)
 80009be:	f023 0310 	bic.w	r3, r3, #16
 80009c2:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~(1U<<5);
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <spi_config+0xac>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1f      	ldr	r2, [pc, #124]	; (8000a48 <spi_config+0xac>)
 80009ca:	f023 0320 	bic.w	r3, r3, #32
 80009ce:	6013      	str	r3, [r2, #0]

	/* Set CPOL to 1 and CPHA to 1 */
	SPI1->CR1 |= (1U<<0);
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <spi_config+0xac>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <spi_config+0xac>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1U<<1);
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <spi_config+0xac>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <spi_config+0xac>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	6013      	str	r3, [r2, #0]

	/* Enable full duplex */
	SPI1->CR1 &=~(1U<<10);
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <spi_config+0xac>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <spi_config+0xac>)
 80009ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009f2:	6013      	str	r3, [r2, #0]

	/* Set MSB first */
	SPI1->CR1 &=~(1U<<7);
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <spi_config+0xac>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <spi_config+0xac>)
 80009fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009fe:	6013      	str	r3, [r2, #0]

	/* Set mode to MASTER */
	SPI1->CR1 |= (1U<<2);
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <spi_config+0xac>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <spi_config+0xac>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	6013      	str	r3, [r2, #0]

	/* Set 8-bit data mode */
	SPI1->CR1 &=~(1U<<11);
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <spi_config+0xac>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <spi_config+0xac>)
 8000a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a16:	6013      	str	r3, [r2, #0]

	/* Select software slave management by setting SSM=1 and SSI=1 */
	SPI1->CR1 |= (1U<<8);
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <spi_config+0xac>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <spi_config+0xac>)
 8000a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a22:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1U<<9);
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <spi_config+0xac>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <spi_config+0xac>)
 8000a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2e:	6013      	str	r3, [r2, #0]

	/* Enable SPI1 module */
	SPI1->CR1 |= (1U<<6);
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <spi_config+0xac>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <spi_config+0xac>)
 8000a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40013000 	.word	0x40013000

08000a4c <spi1_transmit>:

void spi1_transmit(uint8_t *data, uint32_t size)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
	uint32_t i=0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
	uint8_t temp;
	while(i < size)
 8000a5a:	e00f      	b.n	8000a7c <spi1_transmit+0x30>
	{
		/* Wait until TXE is set */
		while(!(SPI1->SR & SR_TXE));
 8000a5c:	bf00      	nop
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <spi1_transmit+0x6c>)
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0f9      	beq.n	8000a5e <spi1_transmit+0x12>

		/* Write the data to the data register */
		SPI1->DR = data[i];
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4413      	add	r3, r2
 8000a70:	781a      	ldrb	r2, [r3, #0]
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <spi1_transmit+0x6c>)
 8000a74:	60da      	str	r2, [r3, #12]
		i++;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
	while(i < size)
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d3eb      	bcc.n	8000a5c <spi1_transmit+0x10>
	}
	/* Wait until TXE is set */
	while(!(SPI1->SR & SR_TXE));
 8000a84:	bf00      	nop
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <spi1_transmit+0x6c>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f9      	beq.n	8000a86 <spi1_transmit+0x3a>

	/* Wait for BUSY flag to reset */
	while(SPI1->SR & SR_BSY);
 8000a92:	bf00      	nop
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <spi1_transmit+0x6c>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f9      	bne.n	8000a94 <spi1_transmit+0x48>

	/* Clear OVR flag */
	temp = SPI1->DR;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <spi1_transmit+0x6c>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	72fb      	strb	r3, [r7, #11]
	temp = SPI1->SR;
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <spi1_transmit+0x6c>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	72fb      	strb	r3, [r7, #11]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40013000 	.word	0x40013000

08000abc <spi1_receive>:

void spi1_receive(uint8_t *data, uint32_t size)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	while(size)
 8000ac6:	e013      	b.n	8000af0 <spi1_receive+0x34>
	{
		/* Send dummy data */
		SPI1->DR = 0;
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <spi1_receive+0x48>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]

		/* Wait for RXNE flag to set */
		while(!(SPI1->SR & SR_RXNE));
 8000ace:	bf00      	nop
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <spi1_receive+0x48>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0f9      	beq.n	8000ad0 <spi1_receive+0x14>

		/* Read data from data register */
		*data++ = SPI1->DR;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <spi1_receive+0x48>)
 8000ade:	68d9      	ldr	r1, [r3, #12]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	b2ca      	uxtb	r2, r1
 8000ae8:	701a      	strb	r2, [r3, #0]
		size--;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	603b      	str	r3, [r7, #0]
	while(size)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1e8      	bne.n	8000ac8 <spi1_receive+0xc>
	}
}
 8000af6:	bf00      	nop
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40013000 	.word	0x40013000

08000b08 <cs_enable>:

void cs_enable(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
	GPIOA->ODR &=~(1U<<4);
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <cs_enable+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <cs_enable+0x18>)
 8000b12:	f023 0310 	bic.w	r3, r3, #16
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40010800 	.word	0x40010800

08000b24 <cs_disable>:

void cs_disable(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1U<<4);
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <cs_disable+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	4a03      	ldr	r2, [pc, #12]	; (8000b3c <cs_disable+0x18>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40010800 	.word	0x40010800

08000b40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b42:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b44:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4a:	490d      	ldr	r1, [pc, #52]	; (8000b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <LoopForever+0xe>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b60:	4c0a      	ldr	r4, [pc, #40]	; (8000b8c <LoopForever+0x16>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b6e:	f000 f811 	bl	8000b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b72:	f7ff fe35 	bl	80007e0 <main>

08000b76 <LoopForever>:

LoopForever:
    b LoopForever
 8000b76:	e7fe      	b.n	8000b76 <LoopForever>
  ldr   r0, =_estack
 8000b78:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b84:	08000bfc 	.word	0x08000bfc
  ldr r2, =_sbss
 8000b88:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b8c:	20000048 	.word	0x20000048

08000b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_2_IRQHandler>
	...

08000b94 <__libc_init_array>:
 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	2600      	movs	r6, #0
 8000b98:	4d0c      	ldr	r5, [pc, #48]	; (8000bcc <__libc_init_array+0x38>)
 8000b9a:	4c0d      	ldr	r4, [pc, #52]	; (8000bd0 <__libc_init_array+0x3c>)
 8000b9c:	1b64      	subs	r4, r4, r5
 8000b9e:	10a4      	asrs	r4, r4, #2
 8000ba0:	42a6      	cmp	r6, r4
 8000ba2:	d109      	bne.n	8000bb8 <__libc_init_array+0x24>
 8000ba4:	f000 f81a 	bl	8000bdc <_init>
 8000ba8:	2600      	movs	r6, #0
 8000baa:	4d0a      	ldr	r5, [pc, #40]	; (8000bd4 <__libc_init_array+0x40>)
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <__libc_init_array+0x44>)
 8000bae:	1b64      	subs	r4, r4, r5
 8000bb0:	10a4      	asrs	r4, r4, #2
 8000bb2:	42a6      	cmp	r6, r4
 8000bb4:	d105      	bne.n	8000bc2 <__libc_init_array+0x2e>
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}
 8000bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bbc:	4798      	blx	r3
 8000bbe:	3601      	adds	r6, #1
 8000bc0:	e7ee      	b.n	8000ba0 <__libc_init_array+0xc>
 8000bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bc6:	4798      	blx	r3
 8000bc8:	3601      	adds	r6, #1
 8000bca:	e7f2      	b.n	8000bb2 <__libc_init_array+0x1e>
 8000bcc:	08000bf4 	.word	0x08000bf4
 8000bd0:	08000bf4 	.word	0x08000bf4
 8000bd4:	08000bf4 	.word	0x08000bf4
 8000bd8:	08000bf8 	.word	0x08000bf8

08000bdc <_init>:
 8000bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bde:	bf00      	nop
 8000be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000be2:	bc08      	pop	{r3}
 8000be4:	469e      	mov	lr, r3
 8000be6:	4770      	bx	lr

08000be8 <_fini>:
 8000be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bea:	bf00      	nop
 8000bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bee:	bc08      	pop	{r3}
 8000bf0:	469e      	mov	lr, r3
 8000bf2:	4770      	bx	lr


9_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000328  08000330  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000328  08000328  00010330  2**0
                  CONTENTS
  4 .ARM          00000000  08000328  08000328  00010330  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000328  08000330  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000328  08000328  00010328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800032c  0800032c  0001032c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000330  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000330  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010330  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003ea  00000000  00000000  00010359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000018f  00000000  00000000  00010743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  000108d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ffc4  00000000  00000000  000109a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000009be  00000000  00000000  00020964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054076  00000000  00000000  00021322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00075398  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  000753e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000310 	.word	0x08000310

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000310 	.word	0x08000310

08000170 <pa1_adc_init>:
#define ADC_SEQ_LEN_1	0x00
#define CR2_ADON		(1U<<0)
#define CR2_SWSTART		(1U<<22)
#define SR_EOC			(1U<<1)
void pa1_adc_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/* Enable clock access to GPIOA */
	RCC->APB2ENR |= IOPAEN;
 8000174:	4b25      	ldr	r3, [pc, #148]	; (800020c <pa1_adc_init+0x9c>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a24      	ldr	r2, [pc, #144]	; (800020c <pa1_adc_init+0x9c>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	/* Set the mode of PA1 to analog */
	GPIOA->CRL &=~(1U<<4);
 8000180:	4b23      	ldr	r3, [pc, #140]	; (8000210 <pa1_adc_init+0xa0>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a22      	ldr	r2, [pc, #136]	; (8000210 <pa1_adc_init+0xa0>)
 8000186:	f023 0310 	bic.w	r3, r3, #16
 800018a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<5);
 800018c:	4b20      	ldr	r3, [pc, #128]	; (8000210 <pa1_adc_init+0xa0>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a1f      	ldr	r2, [pc, #124]	; (8000210 <pa1_adc_init+0xa0>)
 8000192:	f023 0320 	bic.w	r3, r3, #32
 8000196:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<6);
 8000198:	4b1d      	ldr	r3, [pc, #116]	; (8000210 <pa1_adc_init+0xa0>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a1c      	ldr	r2, [pc, #112]	; (8000210 <pa1_adc_init+0xa0>)
 800019e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80001a2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<7);
 80001a4:	4b1a      	ldr	r3, [pc, #104]	; (8000210 <pa1_adc_init+0xa0>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a19      	ldr	r2, [pc, #100]	; (8000210 <pa1_adc_init+0xa0>)
 80001aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80001ae:	6013      	str	r3, [r2, #0]
	/*-----------Configure the ADC module-----------*/
	/* Enable clock access to ADC */
	RCC->APB2ENR |= ADC1EN;
 80001b0:	4b16      	ldr	r3, [pc, #88]	; (800020c <pa1_adc_init+0x9c>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a15      	ldr	r2, [pc, #84]	; (800020c <pa1_adc_init+0x9c>)
 80001b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001ba:	6193      	str	r3, [r2, #24]
	/* Conversion sequence start */
	ADC1->SQR3 = ADC_CH1;
 80001bc:	4b15      	ldr	r3, [pc, #84]	; (8000214 <pa1_adc_init+0xa4>)
 80001be:	2201      	movs	r2, #1
 80001c0:	635a      	str	r2, [r3, #52]	; 0x34
	/* Conversion sequence length */
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 80001c2:	4b14      	ldr	r3, [pc, #80]	; (8000214 <pa1_adc_init+0xa4>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	62da      	str	r2, [r3, #44]	; 0x2c

	ADC1->CR2 |= (1U<<17);
 80001c8:	4b12      	ldr	r3, [pc, #72]	; (8000214 <pa1_adc_init+0xa4>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4a11      	ldr	r2, [pc, #68]	; (8000214 <pa1_adc_init+0xa4>)
 80001ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001d2:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1U<<18);
 80001d4:	4b0f      	ldr	r3, [pc, #60]	; (8000214 <pa1_adc_init+0xa4>)
 80001d6:	689b      	ldr	r3, [r3, #8]
 80001d8:	4a0e      	ldr	r2, [pc, #56]	; (8000214 <pa1_adc_init+0xa4>)
 80001da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80001de:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1U<<19);
 80001e0:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <pa1_adc_init+0xa4>)
 80001e2:	689b      	ldr	r3, [r3, #8]
 80001e4:	4a0b      	ldr	r2, [pc, #44]	; (8000214 <pa1_adc_init+0xa4>)
 80001e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001ea:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1U<<20);
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <pa1_adc_init+0xa4>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	4a08      	ldr	r2, [pc, #32]	; (8000214 <pa1_adc_init+0xa4>)
 80001f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001f6:	6093      	str	r3, [r2, #8]

	/* Enable ADC module */
	ADC1->CR2 |= CR2_ADON;
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <pa1_adc_init+0xa4>)
 80001fa:	689b      	ldr	r3, [r3, #8]
 80001fc:	4a05      	ldr	r2, [pc, #20]	; (8000214 <pa1_adc_init+0xa4>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6093      	str	r3, [r2, #8]
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40021000 	.word	0x40021000
 8000210:	40010800 	.word	0x40010800
 8000214:	40012400 	.word	0x40012400

08000218 <start_conversion>:
void start_conversion(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	ADC1->CR2 |= CR2_SWSTART;
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <start_conversion+0x18>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	4a03      	ldr	r2, [pc, #12]	; (8000230 <start_conversion+0x18>)
 8000222:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000226:	6093      	str	r3, [r2, #8]
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	40012400 	.word	0x40012400

08000234 <adc_read>:
uint32_t adc_read(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	/* Wait for conversion to be completed */
	while(!(ADC1->SR & SR_EOC));
 8000238:	bf00      	nop
 800023a:	4b06      	ldr	r3, [pc, #24]	; (8000254 <adc_read+0x20>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f003 0302 	and.w	r3, r3, #2
 8000242:	2b00      	cmp	r3, #0
 8000244:	d0f9      	beq.n	800023a <adc_read+0x6>
	/* Read converted result */
	return (ADC1->DR);
 8000246:	4b03      	ldr	r3, [pc, #12]	; (8000254 <adc_read+0x20>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800024a:	4618      	mov	r0, r3
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	40012400 	.word	0x40012400

08000258 <main>:
#include "adc.h"

uint32_t sensor_value;

int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	pa1_adc_init();
 800025c:	f7ff ff88 	bl	8000170 <pa1_adc_init>
	while(1)
	{
		start_conversion();
 8000260:	f7ff ffda 	bl	8000218 <start_conversion>
		sensor_value = adc_read();
 8000264:	f7ff ffe6 	bl	8000234 <adc_read>
 8000268:	4603      	mov	r3, r0
 800026a:	4a01      	ldr	r2, [pc, #4]	; (8000270 <main+0x18>)
 800026c:	6013      	str	r3, [r2, #0]
		start_conversion();
 800026e:	e7f7      	b.n	8000260 <main+0x8>
 8000270:	2000001c 	.word	0x2000001c

08000274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000274:	480d      	ldr	r0, [pc, #52]	; (80002ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000276:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000278:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800027e:	490d      	ldr	r1, [pc, #52]	; (80002b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000280:	4a0d      	ldr	r2, [pc, #52]	; (80002b8 <LoopForever+0xe>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000294:	4c0a      	ldr	r4, [pc, #40]	; (80002c0 <LoopForever+0x16>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a2:	f000 f811 	bl	80002c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ffd7 	bl	8000258 <main>

080002aa <LoopForever>:

LoopForever:
    b LoopForever
 80002aa:	e7fe      	b.n	80002aa <LoopForever>
  ldr   r0, =_estack
 80002ac:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b8:	08000330 	.word	0x08000330
  ldr r2, =_sbss
 80002bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c0:	20000020 	.word	0x20000020

080002c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC1_2_IRQHandler>
	...

080002c8 <__libc_init_array>:
 80002c8:	b570      	push	{r4, r5, r6, lr}
 80002ca:	2600      	movs	r6, #0
 80002cc:	4d0c      	ldr	r5, [pc, #48]	; (8000300 <__libc_init_array+0x38>)
 80002ce:	4c0d      	ldr	r4, [pc, #52]	; (8000304 <__libc_init_array+0x3c>)
 80002d0:	1b64      	subs	r4, r4, r5
 80002d2:	10a4      	asrs	r4, r4, #2
 80002d4:	42a6      	cmp	r6, r4
 80002d6:	d109      	bne.n	80002ec <__libc_init_array+0x24>
 80002d8:	f000 f81a 	bl	8000310 <_init>
 80002dc:	2600      	movs	r6, #0
 80002de:	4d0a      	ldr	r5, [pc, #40]	; (8000308 <__libc_init_array+0x40>)
 80002e0:	4c0a      	ldr	r4, [pc, #40]	; (800030c <__libc_init_array+0x44>)
 80002e2:	1b64      	subs	r4, r4, r5
 80002e4:	10a4      	asrs	r4, r4, #2
 80002e6:	42a6      	cmp	r6, r4
 80002e8:	d105      	bne.n	80002f6 <__libc_init_array+0x2e>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f0:	4798      	blx	r3
 80002f2:	3601      	adds	r6, #1
 80002f4:	e7ee      	b.n	80002d4 <__libc_init_array+0xc>
 80002f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fa:	4798      	blx	r3
 80002fc:	3601      	adds	r6, #1
 80002fe:	e7f2      	b.n	80002e6 <__libc_init_array+0x1e>
 8000300:	08000328 	.word	0x08000328
 8000304:	08000328 	.word	0x08000328
 8000308:	08000328 	.word	0x08000328
 800030c:	0800032c 	.word	0x0800032c

08000310 <_init>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	bf00      	nop
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr

0800031c <_fini>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	bf00      	nop
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr

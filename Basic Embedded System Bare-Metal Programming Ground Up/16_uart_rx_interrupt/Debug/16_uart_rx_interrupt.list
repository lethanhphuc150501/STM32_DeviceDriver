
16_uart_rx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800041c  08000424  00010424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800041c  0800041c  00010424  2**0
                  CONTENTS
  4 .ARM          00000000  0800041c  0800041c  00010424  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800041c  08000424  00010424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800041c  0800041c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000420  08000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000424  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000424  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010424  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008d0  00000000  00000000  0001044d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002f3  00000000  00000000  00010d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00011010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  000110c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010d7b  00000000  00000000  00011148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000cc1  00000000  00000000  00021ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058417  00000000  00000000  00022b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007af9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001bc  00000000  00000000  0007afec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000404 	.word	0x08000404

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000404 	.word	0x08000404

08000170 <main>:
#define LED_PIN		PIN5

char key;

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* Enable clock access to GPIOA */
	RCC->APB2ENR |= IOPAEN;
 8000174:	4b10      	ldr	r3, [pc, #64]	; (80001b8 <main+0x48>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a0f      	ldr	r2, [pc, #60]	; (80001b8 <main+0x48>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]

	/* Set PA5 as output pin */
	GPIOA->CRL |= (1U<<21);
 8000180:	4b0e      	ldr	r3, [pc, #56]	; (80001bc <main+0x4c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <main+0x4c>)
 8000186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800018a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<20);
 800018c:	4b0b      	ldr	r3, [pc, #44]	; (80001bc <main+0x4c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a0a      	ldr	r2, [pc, #40]	; (80001bc <main+0x4c>)
 8000192:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000196:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<22);
 8000198:	4b08      	ldr	r3, [pc, #32]	; (80001bc <main+0x4c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a07      	ldr	r2, [pc, #28]	; (80001bc <main+0x4c>)
 800019e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80001a2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<23);
 80001a4:	4b05      	ldr	r3, [pc, #20]	; (80001bc <main+0x4c>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a04      	ldr	r2, [pc, #16]	; (80001bc <main+0x4c>)
 80001aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80001ae:	6013      	str	r3, [r2, #0]

	UART2_RX_interrupt_init();
 80001b0:	f000 f852 	bl	8000258 <UART2_RX_interrupt_init>

	while(1)
 80001b4:	e7fe      	b.n	80001b4 <main+0x44>
 80001b6:	bf00      	nop
 80001b8:	40021000 	.word	0x40021000
 80001bc:	40010800 	.word	0x40010800

080001c0 <uart_callback>:

	}
}

static void uart_callback()
{
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0
	key = USART2->DR;
 80001c4:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <uart_callback+0x38>)
 80001c6:	685b      	ldr	r3, [r3, #4]
 80001c8:	b2da      	uxtb	r2, r3
 80001ca:	4b0c      	ldr	r3, [pc, #48]	; (80001fc <uart_callback+0x3c>)
 80001cc:	701a      	strb	r2, [r3, #0]
	if(key == '1')
 80001ce:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <uart_callback+0x3c>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b31      	cmp	r3, #49	; 0x31
 80001d4:	d106      	bne.n	80001e4 <uart_callback+0x24>
	{
		GPIOA->ODR |= LED_PIN;
 80001d6:	4b0a      	ldr	r3, [pc, #40]	; (8000200 <uart_callback+0x40>)
 80001d8:	68db      	ldr	r3, [r3, #12]
 80001da:	4a09      	ldr	r2, [pc, #36]	; (8000200 <uart_callback+0x40>)
 80001dc:	f043 0320 	orr.w	r3, r3, #32
 80001e0:	60d3      	str	r3, [r2, #12]
	}
	else
	{
		GPIOA->ODR &=~LED_PIN;
	}
}
 80001e2:	e005      	b.n	80001f0 <uart_callback+0x30>
		GPIOA->ODR &=~LED_PIN;
 80001e4:	4b06      	ldr	r3, [pc, #24]	; (8000200 <uart_callback+0x40>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	4a05      	ldr	r2, [pc, #20]	; (8000200 <uart_callback+0x40>)
 80001ea:	f023 0320 	bic.w	r3, r3, #32
 80001ee:	60d3      	str	r3, [r2, #12]
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40004400 	.word	0x40004400
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	40010800 	.word	0x40010800

08000204 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	if(USART2->SR & SR_RXNE)
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <USART2_IRQHandler+0x18>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f003 0320 	and.w	r3, r3, #32
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <USART2_IRQHandler+0x14>
	{
		// Do something
		uart_callback();
 8000214:	f7ff ffd4 	bl	80001c0 <uart_callback>
	}
}
 8000218:	bf00      	nop
 800021a:	bd80      	pop	{r7, pc}
 800021c:	40004400 	.word	0x40004400

08000220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	2b00      	cmp	r3, #0
 8000230:	db0b      	blt.n	800024a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	f003 021f 	and.w	r2, r3, #31
 8000238:	4906      	ldr	r1, [pc, #24]	; (8000254 <__NVIC_EnableIRQ+0x34>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	2001      	movs	r0, #1
 8000242:	fa00 f202 	lsl.w	r2, r0, r2
 8000246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	e000e100 	.word	0xe000e100

08000258 <UART2_RX_interrupt_init>:
	uart2_write(ch);
	return ch;
}

void UART2_RX_interrupt_init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	/*----------Configure UART GPIO pin----------*/
	/* Enable clock access to GPIOA */
	RCC->APB2ENR |= IOPAEN;
 800025c:	4b2c      	ldr	r3, [pc, #176]	; (8000310 <UART2_RX_interrupt_init+0xb8>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a2b      	ldr	r2, [pc, #172]	; (8000310 <UART2_RX_interrupt_init+0xb8>)
 8000262:	f043 0304 	orr.w	r3, r3, #4
 8000266:	6193      	str	r3, [r2, #24]

	/* Set PA2 mode to alternate function mode */
	GPIOA->CRL |= (1U<<8);
 8000268:	4b2a      	ldr	r3, [pc, #168]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a29      	ldr	r2, [pc, #164]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 800026e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000272:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<9);
 8000274:	4b27      	ldr	r3, [pc, #156]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a26      	ldr	r2, [pc, #152]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 800027a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800027e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<10);
 8000280:	4b24      	ldr	r3, [pc, #144]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a23      	ldr	r2, [pc, #140]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 8000286:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800028a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<11);
 800028c:	4b21      	ldr	r3, [pc, #132]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a20      	ldr	r2, [pc, #128]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 8000292:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000296:	6013      	str	r3, [r2, #0]

	/* Set PA3 mode to alternate function mode */
	GPIOA->CRL &=~(1U<<12);
 8000298:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a1d      	ldr	r2, [pc, #116]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 800029e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<13);
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a1a      	ldr	r2, [pc, #104]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 80002aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<15);
 80002b0:	4b18      	ldr	r3, [pc, #96]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a17      	ldr	r2, [pc, #92]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 80002b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<14);
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a14      	ldr	r2, [pc, #80]	; (8000314 <UART2_RX_interrupt_init+0xbc>)
 80002c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002c6:	6013      	str	r3, [r2, #0]

	/*-----------Configure UART module-----------*/
	/* Enable clock access to UART2 */
	RCC->APB1ENR |= UART2EN;
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <UART2_RX_interrupt_init+0xb8>)
 80002ca:	69db      	ldr	r3, [r3, #28]
 80002cc:	4a10      	ldr	r2, [pc, #64]	; (8000310 <UART2_RX_interrupt_init+0xb8>)
 80002ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d2:	61d3      	str	r3, [r2, #28]

	/* Configure baud rate */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80002d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002d8:	490f      	ldr	r1, [pc, #60]	; (8000318 <UART2_RX_interrupt_init+0xc0>)
 80002da:	4810      	ldr	r0, [pc, #64]	; (800031c <UART2_RX_interrupt_init+0xc4>)
 80002dc:	f000 f820 	bl	8000320 <uart_set_baudrate>

	/* Configure the transfer direction */
	USART2->CR1 |= (CR1_TE | CR1_RE);
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <UART2_RX_interrupt_init+0xc4>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <UART2_RX_interrupt_init+0xc4>)
 80002e6:	f043 030c 	orr.w	r3, r3, #12
 80002ea:	60d3      	str	r3, [r2, #12]

	/* Enable RXNE interrupt */
	USART2->CR1 |= CR1_RXNEIE;
 80002ec:	4b0b      	ldr	r3, [pc, #44]	; (800031c <UART2_RX_interrupt_init+0xc4>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	4a0a      	ldr	r2, [pc, #40]	; (800031c <UART2_RX_interrupt_init+0xc4>)
 80002f2:	f043 0320 	orr.w	r3, r3, #32
 80002f6:	60d3      	str	r3, [r2, #12]

	/* Enable UART2 interrupt in NVIC */
	NVIC_EnableIRQ(USART2_IRQn);
 80002f8:	2026      	movs	r0, #38	; 0x26
 80002fa:	f7ff ff91 	bl	8000220 <__NVIC_EnableIRQ>

	/* Enable UART module */
	USART2->CR1 |= CR1_UE;
 80002fe:	4b07      	ldr	r3, [pc, #28]	; (800031c <UART2_RX_interrupt_init+0xc4>)
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	4a06      	ldr	r2, [pc, #24]	; (800031c <UART2_RX_interrupt_init+0xc4>)
 8000304:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000308:	60d3      	str	r3, [r2, #12]
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000
 8000314:	40010800 	.word	0x40010800
 8000318:	007a1200 	.word	0x007a1200
 800031c:	40004400 	.word	0x40004400

08000320 <uart_set_baudrate>:
	USART2->DR = (ch & 0xFF);

}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 800032c:	6879      	ldr	r1, [r7, #4]
 800032e:	68b8      	ldr	r0, [r7, #8]
 8000330:	f000 f808 	bl	8000344 <compute_uart_bd>
 8000334:	4603      	mov	r3, r0
 8000336:	461a      	mov	r2, r3
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	609a      	str	r2, [r3, #8]
}
 800033c:	bf00      	nop
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	085a      	lsrs	r2, r3, #1
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	441a      	add	r2, r3
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	fbb2 f3f3 	udiv	r3, r2, r3
 800035c:	b29b      	uxth	r3, r3
}
 800035e:	4618      	mov	r0, r3
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800036c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000372:	490d      	ldr	r1, [pc, #52]	; (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000374:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000388:	4c0a      	ldr	r4, [pc, #40]	; (80003b4 <LoopForever+0x16>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 f811 	bl	80003bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff fee9 	bl	8000170 <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003ac:	08000424 	.word	0x08000424
  ldr r2, =_sbss
 80003b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b4:	20000020 	.word	0x20000020

080003b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC1_2_IRQHandler>
	...

080003bc <__libc_init_array>:
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	2600      	movs	r6, #0
 80003c0:	4d0c      	ldr	r5, [pc, #48]	; (80003f4 <__libc_init_array+0x38>)
 80003c2:	4c0d      	ldr	r4, [pc, #52]	; (80003f8 <__libc_init_array+0x3c>)
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	10a4      	asrs	r4, r4, #2
 80003c8:	42a6      	cmp	r6, r4
 80003ca:	d109      	bne.n	80003e0 <__libc_init_array+0x24>
 80003cc:	f000 f81a 	bl	8000404 <_init>
 80003d0:	2600      	movs	r6, #0
 80003d2:	4d0a      	ldr	r5, [pc, #40]	; (80003fc <__libc_init_array+0x40>)
 80003d4:	4c0a      	ldr	r4, [pc, #40]	; (8000400 <__libc_init_array+0x44>)
 80003d6:	1b64      	subs	r4, r4, r5
 80003d8:	10a4      	asrs	r4, r4, #2
 80003da:	42a6      	cmp	r6, r4
 80003dc:	d105      	bne.n	80003ea <__libc_init_array+0x2e>
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e4:	4798      	blx	r3
 80003e6:	3601      	adds	r6, #1
 80003e8:	e7ee      	b.n	80003c8 <__libc_init_array+0xc>
 80003ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ee:	4798      	blx	r3
 80003f0:	3601      	adds	r6, #1
 80003f2:	e7f2      	b.n	80003da <__libc_init_array+0x1e>
 80003f4:	0800041c 	.word	0x0800041c
 80003f8:	0800041c 	.word	0x0800041c
 80003fc:	0800041c 	.word	0x0800041c
 8000400:	08000420 	.word	0x08000420

08000404 <_init>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr

08000410 <_fini>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr

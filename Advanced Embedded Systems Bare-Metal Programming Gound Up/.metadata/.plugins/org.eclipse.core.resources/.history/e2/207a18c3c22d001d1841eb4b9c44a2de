
8_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000368  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000498  080004a0  000104a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000498  08000498  000104a0  2**0
                  CONTENTS
  4 .ARM          00000000  08000498  08000498  000104a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000498  080004a0  000104a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000498  08000498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800049c  0800049c  0001049c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080004a0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004a0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000104a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000072f  00000000  00000000  000104c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000297  00000000  00000000  00010bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00010e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00010f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010124  00000000  00000000  00010fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ec5  00000000  00000000  000210cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005423c  00000000  00000000  00021f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000761cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000014c  00000000  00000000  00076220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000480 	.word	0x08000480

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000480 	.word	0x08000480

08000170 <adc_dma_init>:
#define CCR_MINC		(1U<<7)

uint16_t adc_raw_data[NUM_OF_CHANNELS];

void adc_dma_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/*---------------GPIO Configuration---------------*/
	/* Enable clock access to GPIOA */
	RCC->APB2ENR |= IOPAEN;
 8000174:	4b5e      	ldr	r3, [pc, #376]	; (80002f0 <adc_dma_init+0x180>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a5d      	ldr	r2, [pc, #372]	; (80002f0 <adc_dma_init+0x180>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]

	/* Set PA0 & PA1 to Input Analog mode */
	GPIOA->CRL &=~(1U<<0);
 8000180:	4b5c      	ldr	r3, [pc, #368]	; (80002f4 <adc_dma_init+0x184>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a5b      	ldr	r2, [pc, #364]	; (80002f4 <adc_dma_init+0x184>)
 8000186:	f023 0301 	bic.w	r3, r3, #1
 800018a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<1);
 800018c:	4b59      	ldr	r3, [pc, #356]	; (80002f4 <adc_dma_init+0x184>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a58      	ldr	r2, [pc, #352]	; (80002f4 <adc_dma_init+0x184>)
 8000192:	f023 0302 	bic.w	r3, r3, #2
 8000196:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<2);
 8000198:	4b56      	ldr	r3, [pc, #344]	; (80002f4 <adc_dma_init+0x184>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a55      	ldr	r2, [pc, #340]	; (80002f4 <adc_dma_init+0x184>)
 800019e:	f023 0304 	bic.w	r3, r3, #4
 80001a2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<3);
 80001a4:	4b53      	ldr	r3, [pc, #332]	; (80002f4 <adc_dma_init+0x184>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a52      	ldr	r2, [pc, #328]	; (80002f4 <adc_dma_init+0x184>)
 80001aa:	f023 0308 	bic.w	r3, r3, #8
 80001ae:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<4);
 80001b0:	4b50      	ldr	r3, [pc, #320]	; (80002f4 <adc_dma_init+0x184>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a4f      	ldr	r2, [pc, #316]	; (80002f4 <adc_dma_init+0x184>)
 80001b6:	f023 0310 	bic.w	r3, r3, #16
 80001ba:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<5);
 80001bc:	4b4d      	ldr	r3, [pc, #308]	; (80002f4 <adc_dma_init+0x184>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a4c      	ldr	r2, [pc, #304]	; (80002f4 <adc_dma_init+0x184>)
 80001c2:	f023 0320 	bic.w	r3, r3, #32
 80001c6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<6);
 80001c8:	4b4a      	ldr	r3, [pc, #296]	; (80002f4 <adc_dma_init+0x184>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a49      	ldr	r2, [pc, #292]	; (80002f4 <adc_dma_init+0x184>)
 80001ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80001d2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<7);
 80001d4:	4b47      	ldr	r3, [pc, #284]	; (80002f4 <adc_dma_init+0x184>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a46      	ldr	r2, [pc, #280]	; (80002f4 <adc_dma_init+0x184>)
 80001da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80001de:	6013      	str	r3, [r2, #0]

	/*---------------ADC Configuration----------------*/
	/* Enable clock access to ADC1 */
	RCC->APB2ENR |= ADC1EN;
 80001e0:	4b43      	ldr	r3, [pc, #268]	; (80002f0 <adc_dma_init+0x180>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	4a42      	ldr	r2, [pc, #264]	; (80002f0 <adc_dma_init+0x180>)
 80001e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001ea:	6193      	str	r3, [r2, #24]

	/* Set sequence length: 2 conversions */
	ADC1->SQR1 |= (1U<<20);
 80001ec:	4b42      	ldr	r3, [pc, #264]	; (80002f8 <adc_dma_init+0x188>)
 80001ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001f0:	4a41      	ldr	r2, [pc, #260]	; (80002f8 <adc_dma_init+0x188>)
 80001f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001f6:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 &=~(1U<<21);
 80001f8:	4b3f      	ldr	r3, [pc, #252]	; (80002f8 <adc_dma_init+0x188>)
 80001fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001fc:	4a3e      	ldr	r2, [pc, #248]	; (80002f8 <adc_dma_init+0x188>)
 80001fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000202:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 &=~(1U<<22);
 8000204:	4b3c      	ldr	r3, [pc, #240]	; (80002f8 <adc_dma_init+0x188>)
 8000206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000208:	4a3b      	ldr	r2, [pc, #236]	; (80002f8 <adc_dma_init+0x188>)
 800020a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800020e:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 &=~(1U<<23);
 8000210:	4b39      	ldr	r3, [pc, #228]	; (80002f8 <adc_dma_init+0x188>)
 8000212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000214:	4a38      	ldr	r2, [pc, #224]	; (80002f8 <adc_dma_init+0x188>)
 8000216:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800021a:	62d3      	str	r3, [r2, #44]	; 0x2c

	/* Set sequence */
	ADC1->SQR3 = (0U<<0) | (1U<<5);
 800021c:	4b36      	ldr	r3, [pc, #216]	; (80002f8 <adc_dma_init+0x188>)
 800021e:	2220      	movs	r2, #32
 8000220:	635a      	str	r2, [r3, #52]	; 0x34

	/* Enable scan mode */
	ADC1->CR1 = CR1_SCAN;
 8000222:	4b35      	ldr	r3, [pc, #212]	; (80002f8 <adc_dma_init+0x188>)
 8000224:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000228:	605a      	str	r2, [r3, #4]

	/* Select to use DMA */
	ADC1->CR2 |= CR2_CONT;
 800022a:	4b33      	ldr	r3, [pc, #204]	; (80002f8 <adc_dma_init+0x188>)
 800022c:	689b      	ldr	r3, [r3, #8]
 800022e:	4a32      	ldr	r2, [pc, #200]	; (80002f8 <adc_dma_init+0x188>)
 8000230:	f043 0302 	orr.w	r3, r3, #2
 8000234:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= CR2_DMA;
 8000236:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <adc_dma_init+0x188>)
 8000238:	689b      	ldr	r3, [r3, #8]
 800023a:	4a2f      	ldr	r2, [pc, #188]	; (80002f8 <adc_dma_init+0x188>)
 800023c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000240:	6093      	str	r3, [r2, #8]

	/*---------------DMA Configuration----------------*/
	/* Enable clock access to DMA1 */
	RCC->AHBENR |= DMA1EN;
 8000242:	4b2b      	ldr	r3, [pc, #172]	; (80002f0 <adc_dma_init+0x180>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	4a2a      	ldr	r2, [pc, #168]	; (80002f0 <adc_dma_init+0x180>)
 8000248:	f043 0301 	orr.w	r3, r3, #1
 800024c:	6153      	str	r3, [r2, #20]

	/* Disable DMA1 Channel 1 */
	DMA1_Channel1->CCR &=~CCR_EN;
 800024e:	4b2b      	ldr	r3, [pc, #172]	; (80002fc <adc_dma_init+0x18c>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a2a      	ldr	r2, [pc, #168]	; (80002fc <adc_dma_init+0x18c>)
 8000254:	f023 0301 	bic.w	r3, r3, #1
 8000258:	6013      	str	r3, [r2, #0]

	/* Wait till DMA1 Channel 1 is disabled */
	while(DMA1_Channel1->CCR & CCR_EN);
 800025a:	bf00      	nop
 800025c:	4b27      	ldr	r3, [pc, #156]	; (80002fc <adc_dma_init+0x18c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f003 0301 	and.w	r3, r3, #1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d1f9      	bne.n	800025c <adc_dma_init+0xec>

	/* Enable Circular mode */
	DMA1_Channel1->CCR |= CCR_CIRC;
 8000268:	4b24      	ldr	r3, [pc, #144]	; (80002fc <adc_dma_init+0x18c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a23      	ldr	r2, [pc, #140]	; (80002fc <adc_dma_init+0x18c>)
 800026e:	f043 0320 	orr.w	r3, r3, #32
 8000272:	6013      	str	r3, [r2, #0]

	/* Set memory transfer size: 16-bits */
	DMA1_Channel1->CCR |= (1U<<10);
 8000274:	4b21      	ldr	r3, [pc, #132]	; (80002fc <adc_dma_init+0x18c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a20      	ldr	r2, [pc, #128]	; (80002fc <adc_dma_init+0x18c>)
 800027a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800027e:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &=~(1U<<11);
 8000280:	4b1e      	ldr	r3, [pc, #120]	; (80002fc <adc_dma_init+0x18c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a1d      	ldr	r2, [pc, #116]	; (80002fc <adc_dma_init+0x18c>)
 8000286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800028a:	6013      	str	r3, [r2, #0]

	/* Set peripheral transfer size */
	DMA1_Channel1->CCR |= (1U<<8);
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <adc_dma_init+0x18c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a1a      	ldr	r2, [pc, #104]	; (80002fc <adc_dma_init+0x18c>)
 8000292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000296:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &=~(1U<<9);
 8000298:	4b18      	ldr	r3, [pc, #96]	; (80002fc <adc_dma_init+0x18c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a17      	ldr	r2, [pc, #92]	; (80002fc <adc_dma_init+0x18c>)
 800029e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80002a2:	6013      	str	r3, [r2, #0]

	/* Enable memory increment */
	DMA1_Channel1->CCR |= CCR_MINC;
 80002a4:	4b15      	ldr	r3, [pc, #84]	; (80002fc <adc_dma_init+0x18c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a14      	ldr	r2, [pc, #80]	; (80002fc <adc_dma_init+0x18c>)
 80002aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ae:	6013      	str	r3, [r2, #0]

	/* Set peripheral address */
	DMA1_Channel1->CPAR = (uint32_t)(&(ADC1->DR));
 80002b0:	4b12      	ldr	r3, [pc, #72]	; (80002fc <adc_dma_init+0x18c>)
 80002b2:	4a13      	ldr	r2, [pc, #76]	; (8000300 <adc_dma_init+0x190>)
 80002b4:	609a      	str	r2, [r3, #8]

	/* Set memory address */
	DMA1_Channel1->CMAR = (uint32_t)(&adc_raw_data);
 80002b6:	4b11      	ldr	r3, [pc, #68]	; (80002fc <adc_dma_init+0x18c>)
 80002b8:	4a12      	ldr	r2, [pc, #72]	; (8000304 <adc_dma_init+0x194>)
 80002ba:	60da      	str	r2, [r3, #12]

	/* Set number of transfer */
	DMA1_Channel1->CNDTR = (uint16_t)(NUM_OF_CHANNELS);
 80002bc:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <adc_dma_init+0x18c>)
 80002be:	2202      	movs	r2, #2
 80002c0:	605a      	str	r2, [r3, #4]

	/* Enable DMA1 Channel 1 */
	DMA1_Channel1->CCR |= CCR_EN;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <adc_dma_init+0x18c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <adc_dma_init+0x18c>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6013      	str	r3, [r2, #0]

	/*---------------Enable ADC Module----------------*/
	/* Enable ADC */
	ADC1->CR2 |= CR2_ADON;
 80002ce:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <adc_dma_init+0x188>)
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	4a09      	ldr	r2, [pc, #36]	; (80002f8 <adc_dma_init+0x188>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6093      	str	r3, [r2, #8]

	/* Start ADC */
	ADC1->CR2 |= CR2_SWSTART;
 80002da:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <adc_dma_init+0x188>)
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <adc_dma_init+0x188>)
 80002e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002e4:	6093      	str	r3, [r2, #8]
}
 80002e6:	bf00      	nop
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40021000 	.word	0x40021000
 80002f4:	40010800 	.word	0x40010800
 80002f8:	40012400 	.word	0x40012400
 80002fc:	40020008 	.word	0x40020008
 8000300:	4001244c 	.word	0x4001244c
 8000304:	2000001c 	.word	0x2000001c

08000308 <main>:
#include "adc_dma.h"

extern uint16_t adc_raw_data[NUM_OF_CHANNELS];

int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	UART2_TX_init();
 800030c:	f000 f804 	bl	8000318 <UART2_TX_init>
	adc_dma_init();
 8000310:	f7ff ff2e 	bl	8000170 <adc_dma_init>

	while(1)
 8000314:	e7fe      	b.n	8000314 <main+0xc>
	...

08000318 <UART2_TX_init>:
	uart2_write(ch);
	return ch;
}

void UART2_TX_init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	/*----------Configure UART GPIO pin----------*/
	/* Enable clock access to GPIOA */
	RCC->APB2ENR |= IOPAEN;
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <UART2_TX_init+0x74>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a1a      	ldr	r2, [pc, #104]	; (800038c <UART2_TX_init+0x74>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6193      	str	r3, [r2, #24]

	/* Set PA2 mode to alternate function mode */
	GPIOA->CRL |= (1U<<8);
 8000328:	4b19      	ldr	r3, [pc, #100]	; (8000390 <UART2_TX_init+0x78>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a18      	ldr	r2, [pc, #96]	; (8000390 <UART2_TX_init+0x78>)
 800032e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000332:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<9);
 8000334:	4b16      	ldr	r3, [pc, #88]	; (8000390 <UART2_TX_init+0x78>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a15      	ldr	r2, [pc, #84]	; (8000390 <UART2_TX_init+0x78>)
 800033a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800033e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<10);
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <UART2_TX_init+0x78>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a12      	ldr	r2, [pc, #72]	; (8000390 <UART2_TX_init+0x78>)
 8000346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800034a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<11);
 800034c:	4b10      	ldr	r3, [pc, #64]	; (8000390 <UART2_TX_init+0x78>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a0f      	ldr	r2, [pc, #60]	; (8000390 <UART2_TX_init+0x78>)
 8000352:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000356:	6013      	str	r3, [r2, #0]

	/*-----------Configure UART module-----------*/
	/* Enable clock access to UART2 */
	RCC->APB1ENR |= UART2EN;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <UART2_TX_init+0x74>)
 800035a:	69db      	ldr	r3, [r3, #28]
 800035c:	4a0b      	ldr	r2, [pc, #44]	; (800038c <UART2_TX_init+0x74>)
 800035e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000362:	61d3      	str	r3, [r2, #28]

	/* Configure baud rate */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000368:	490a      	ldr	r1, [pc, #40]	; (8000394 <UART2_TX_init+0x7c>)
 800036a:	480b      	ldr	r0, [pc, #44]	; (8000398 <UART2_TX_init+0x80>)
 800036c:	f000 f816 	bl	800039c <uart_set_baudrate>

	/* Configure the transfer direction */
	USART2->CR1 |= CR1_TE;
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <UART2_TX_init+0x80>)
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	4a08      	ldr	r2, [pc, #32]	; (8000398 <UART2_TX_init+0x80>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	60d3      	str	r3, [r2, #12]

	/* Enable UART module */
	USART2->CR1 |= CR1_UE;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <UART2_TX_init+0x80>)
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	4a05      	ldr	r2, [pc, #20]	; (8000398 <UART2_TX_init+0x80>)
 8000382:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000386:	60d3      	str	r3, [r2, #12]
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40021000 	.word	0x40021000
 8000390:	40010800 	.word	0x40010800
 8000394:	007a1200 	.word	0x007a1200
 8000398:	40004400 	.word	0x40004400

0800039c <uart_set_baudrate>:
	USART2->DR = (ch & 0xFF);

}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80003a8:	6879      	ldr	r1, [r7, #4]
 80003aa:	68b8      	ldr	r0, [r7, #8]
 80003ac:	f000 f808 	bl	80003c0 <compute_uart_bd>
 80003b0:	4603      	mov	r3, r0
 80003b2:	461a      	mov	r2, r3
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	609a      	str	r2, [r3, #8]
}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	085a      	lsrs	r2, r3, #1
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	441a      	add	r2, r3
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d8:	b29b      	uxth	r3, r3
}
 80003da:	4618      	mov	r0, r3
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr

080003e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e4:	480d      	ldr	r0, [pc, #52]	; (800041c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ec:	480c      	ldr	r0, [pc, #48]	; (8000420 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ee:	490d      	ldr	r1, [pc, #52]	; (8000424 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f0:	4a0d      	ldr	r2, [pc, #52]	; (8000428 <LoopForever+0xe>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f4:	e002      	b.n	80003fc <LoopCopyDataInit>

080003f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003fa:	3304      	adds	r3, #4

080003fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000400:	d3f9      	bcc.n	80003f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000402:	4a0a      	ldr	r2, [pc, #40]	; (800042c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000404:	4c0a      	ldr	r4, [pc, #40]	; (8000430 <LoopForever+0x16>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000408:	e001      	b.n	800040e <LoopFillZerobss>

0800040a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800040a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800040c:	3204      	adds	r2, #4

0800040e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000410:	d3fb      	bcc.n	800040a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000412:	f000 f811 	bl	8000438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000416:	f7ff ff77 	bl	8000308 <main>

0800041a <LoopForever>:

LoopForever:
    b LoopForever
 800041a:	e7fe      	b.n	800041a <LoopForever>
  ldr   r0, =_estack
 800041c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000424:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000428:	080004a0 	.word	0x080004a0
  ldr r2, =_sbss
 800042c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000430:	20000020 	.word	0x20000020

08000434 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000434:	e7fe      	b.n	8000434 <ADC1_2_IRQHandler>
	...

08000438 <__libc_init_array>:
 8000438:	b570      	push	{r4, r5, r6, lr}
 800043a:	2600      	movs	r6, #0
 800043c:	4d0c      	ldr	r5, [pc, #48]	; (8000470 <__libc_init_array+0x38>)
 800043e:	4c0d      	ldr	r4, [pc, #52]	; (8000474 <__libc_init_array+0x3c>)
 8000440:	1b64      	subs	r4, r4, r5
 8000442:	10a4      	asrs	r4, r4, #2
 8000444:	42a6      	cmp	r6, r4
 8000446:	d109      	bne.n	800045c <__libc_init_array+0x24>
 8000448:	f000 f81a 	bl	8000480 <_init>
 800044c:	2600      	movs	r6, #0
 800044e:	4d0a      	ldr	r5, [pc, #40]	; (8000478 <__libc_init_array+0x40>)
 8000450:	4c0a      	ldr	r4, [pc, #40]	; (800047c <__libc_init_array+0x44>)
 8000452:	1b64      	subs	r4, r4, r5
 8000454:	10a4      	asrs	r4, r4, #2
 8000456:	42a6      	cmp	r6, r4
 8000458:	d105      	bne.n	8000466 <__libc_init_array+0x2e>
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000460:	4798      	blx	r3
 8000462:	3601      	adds	r6, #1
 8000464:	e7ee      	b.n	8000444 <__libc_init_array+0xc>
 8000466:	f855 3b04 	ldr.w	r3, [r5], #4
 800046a:	4798      	blx	r3
 800046c:	3601      	adds	r6, #1
 800046e:	e7f2      	b.n	8000456 <__libc_init_array+0x1e>
 8000470:	08000498 	.word	0x08000498
 8000474:	08000498 	.word	0x08000498
 8000478:	08000498 	.word	0x08000498
 800047c:	0800049c 	.word	0x0800049c

08000480 <_init>:
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000482:	bf00      	nop
 8000484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000486:	bc08      	pop	{r3}
 8000488:	469e      	mov	lr, r3
 800048a:	4770      	bx	lr

0800048c <_fini>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	bf00      	nop
 8000490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000492:	bc08      	pop	{r3}
 8000494:	469e      	mov	lr, r3
 8000496:	4770      	bx	lr
